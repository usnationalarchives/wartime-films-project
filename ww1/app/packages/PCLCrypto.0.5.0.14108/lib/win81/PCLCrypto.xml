<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCLCrypto</name>
    </assembly>
    <members>
        <member name="T:PCLCrypto.AsymmetricKeyAlgorithmProvider">
            <summary>
            WinRT implementation of the <see cref="T:PCLCrypto.IAsymmetricKeyAlgorithmProvider"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.AsymmetricKeyAlgorithmProvider.platform">
            <summary>
            The WinRT platform implementation.
            </summary>
        </member>
        <member name="F:PCLCrypto.AsymmetricKeyAlgorithmProvider.algorithm">
            <summary>
            The algorithm used by this instance.
            </summary>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProvider.#ctor(PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.AsymmetricKeyAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="P:PCLCrypto.AsymmetricKeyAlgorithmProvider.Algorithm">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProvider.CreateKeyPair(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProvider.ImportKeyPair(System.Byte[],PCLCrypto.CryptographicPrivateKeyBlobType)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProvider.ImportPublicKey(System.Byte[],PCLCrypto.CryptographicPublicKeyBlobType)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProvider.GetPlatformKeyBlobType(PCLCrypto.CryptographicPublicKeyBlobType)">
            <summary>
            Gets the platform-specific enum value for the given PCL enum value.
            </summary>
            <param name="blobType">The platform independent enum value for the blob type.</param>
            <returns>The platform-specific enum value for the equivalent blob type.</returns>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProvider.GetPlatformKeyBlobType(PCLCrypto.CryptographicPrivateKeyBlobType)">
            <summary>
            Gets the platform-specific enum value for the given PCL enum value.
            </summary>
            <param name="blobType">The platform independent enum value for the blob type.</param>
            <returns>The platform-specific enum value for the equivalent blob type.</returns>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProvider.GetAlgorithmName(PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Returns the string to pass to the platform APIs for a given algorithm.
            </summary>
            <param name="algorithm">The algorithm desired.</param>
            <returns>The platform-specific string to pass to OpenAlgorithm.</returns>
        </member>
        <member name="T:PCLCrypto.CryptographicBuffer">
            <summary>
            The WinRT implementation of the <see cref="T:PCLCrypto.ICryptographicBuffer"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptographicBuffer.EmptyBuffer">
            <summary>
            An empty byte array.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.Compare(System.Byte[],System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.ConvertBinaryToString(System.Text.Encoding,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.ConvertStringToBinary(System.String,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.CopyToByteArray(System.Byte[],System.Byte[]@)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.CreateFromByteArray(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.DecodeFromBase64String(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.DecodeFromHexString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.EncodeToBase64String(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.EncodeToHexString(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.GenerateRandom(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.GenerateRandomNumber">
            <inheritdoc/>
        </member>
        <member name="T:PCLCrypto.WinRTCryptographicHash">
            <summary>
            The WinRT implementation of the <see cref="T:PCLCrypto.CryptographicHash"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCryptographicHash.platform">
            <summary>
            The platform-specific hash object.
            </summary>
        </member>
        <member name="M:PCLCrypto.WinRTCryptographicHash.#ctor(Windows.Security.Cryptography.Core.CryptographicHash)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.WinRTCryptographicHash"/> class.
            </summary>
            <param name="platformHash">The platform hash.</param>
        </member>
        <member name="P:PCLCrypto.WinRTCryptographicHash.CanReuseTransform">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.WinRTCryptographicHash.Append(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.WinRTCryptographicHash.GetValueAndReset">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.WinRTCryptographicHash.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.WinRTCryptographicHash.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.HashAlgorithmProvider">
            <summary>
            A WinRT implementation of <see cref="T:PCLCrypto.IHashAlgorithmProvider"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.HashAlgorithmProvider.algorithm">
            <summary>
            The hash algorithm used by this instance.
            </summary>
        </member>
        <member name="F:PCLCrypto.HashAlgorithmProvider.platform">
            <summary>
            The platform-specific algorithm provider.
            </summary>
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProvider.#ctor(PCLCrypto.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.HashAlgorithmProvider" /> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="P:PCLCrypto.HashAlgorithmProvider.Algorithm">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.HashAlgorithmProvider.HashLength">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProvider.CreateHash">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProvider.HashData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProvider.GetAlgorithmName(PCLCrypto.HashAlgorithm)">
            <summary>
            Returns the string to pass to the platform APIs for a given algorithm.
            </summary>
            <param name="algorithm">The algorithm desired.</param>
            <returns>The platform-specific string to pass to OpenAlgorithm.</returns>
        </member>
        <member name="T:PCLCrypto.KeyDerivationAlgorithmProvider">
            <summary>
            The WinRT implementation of the <see cref="T:PCLCrypto.IKeyDerivationAlgorithmProvider"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.KeyDerivationAlgorithmProvider.algorithm">
            <summary>
            The algorithm used by this instance.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationAlgorithmProvider.#ctor(PCLCrypto.KeyDerivationAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.KeyDerivationAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="P:PCLCrypto.KeyDerivationAlgorithmProvider.Algorithm">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.KeyDerivationAlgorithmProvider.CreateKey(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.KeyDerivationAlgorithmProvider.GetAlgorithmName(PCLCrypto.KeyDerivationAlgorithm)">
            <summary>
            Returns the string to pass to the platform APIs for a given algorithm.
            </summary>
            <param name="algorithm">The algorithm desired.</param>
            <returns>The platform-specific string to pass to OpenAlgorithm.</returns>
        </member>
        <member name="T:PCLCrypto.KeyDerivationAlgorithmProviderFactory">
            <summary>
            The WinRT implementation of the <see cref="T:PCLCrypto.IKeyDerivationAlgorithmProviderFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.KeyDerivationAlgorithm)">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.KeyDerivationParameters">
            <summary>
            A WinRT implementation of the <see cref="T:PCLCrypto.IKeyDerivationParameters"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.KeyDerivationParameters.platform">
            <summary>
            The platform parameters.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationParameters.#ctor(Windows.Security.Cryptography.Core.KeyDerivationParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.KeyDerivationParameters"/> class.
            </summary>
            <param name="parameters">The platform parameters.</param>
        </member>
        <member name="P:PCLCrypto.KeyDerivationParameters.IterationCount">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.KeyDerivationParameters.KdfGenericBinary">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.KeyDerivationParameters.Parameters">
            <summary>
            Gets the platform parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:PCLCrypto.KeyDerivationParametersFactory">
            <summary>
            A WinRT implementation of the <see cref="T:PCLCrypto.IKeyDerivationParametersFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationParametersFactory.BuildForPbkdf2(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.KeyDerivationParametersFactory.BuildForSP800108(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.KeyDerivationParametersFactory.BuildForSP80056a(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.MacAlgorithmProvider">
            <summary>
            The WinRT implementation of the <see cref="T:PCLCrypto.IMacAlgorithmProvider"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.MacAlgorithmProvider.algorithm">
            <summary>
            The algorithm of this instance.
            </summary>
        </member>
        <member name="F:PCLCrypto.MacAlgorithmProvider.platform">
            <summary>
            The platform implementation of this algorithm.
            </summary>
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProvider.#ctor(PCLCrypto.MacAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.MacAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="P:PCLCrypto.MacAlgorithmProvider.Algorithm">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.MacAlgorithmProvider.MacLength">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProvider.CreateHash(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProvider.CreateKey(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProvider.GetAlgorithmName(PCLCrypto.MacAlgorithm)">
            <summary>
            Returns the string to pass to the platform APIs for a given algorithm.
            </summary>
            <param name="algorithm">The algorithm desired.</param>
            <returns>The platform-specific string to pass to OpenAlgorithm.</returns>
        </member>
        <member name="T:PCLCrypto.MacAlgorithmProviderFactory">
            <summary>
            The WinRT implementation of the <see cref="T:PCLCrypto.IMacAlgorithmProviderFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.MacAlgorithm)">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.SymmetricKeyAlgorithmProviderFactory">
            <summary>
            WinRT implementation of the <see cref="T:PCLCrypto.ISymmetricKeyAlgorithmProviderFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProviderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.SymmetricKeyAlgorithmProviderFactory"/> class.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.SymmetricAlgorithm)">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory">
            <summary>
            WinRT implementation of the <see cref="T:PCLCrypto.IAsymmetricKeyAlgorithmProviderFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory"/> class.
            </summary>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.AsymmetricAlgorithm)">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.CryptographicEngine">
            <summary>
            A WinRT implementation of <see cref="T:PCLCrypto.ICryptographicEngine"/>.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.Encrypt(PCLCrypto.ICryptographicKey,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.CreateEncryptor(PCLCrypto.ICryptographicKey,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.Decrypt(PCLCrypto.ICryptographicKey,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.CreateDecryptor(PCLCrypto.ICryptographicKey,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.Sign(PCLCrypto.ICryptographicKey,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.SignHashedData(PCLCrypto.ICryptographicKey,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.VerifySignature(PCLCrypto.ICryptographicKey,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.VerifySignatureWithHashInput(PCLCrypto.ICryptographicKey,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.DeriveKeyMaterial(PCLCrypto.ICryptographicKey,PCLCrypto.IKeyDerivationParameters,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.ExtractPlatformKey(PCLCrypto.ICryptographicKey)">
            <summary>
            Extracts the platform-specific key from the PCL version.
            </summary>
            <param name="key">The PCL key.</param>
            <returns>The platform-specific key.</returns>
        </member>
        <member name="T:PCLCrypto.CryptographicEngine.BufferingCryptoTransform">
            <summary>
            A crypto transform that can do no work incrementally, but does it all at the end.
            </summary>
            <remarks>
            Sadly, this is necessary because WinRT offers no incremental encryption/decryption
            APIs.
            </remarks>
        </member>
        <member name="F:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.bufferingStream">
            <summary>
            The buffering stream.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.transform">
            <summary>
            The transform to run when all bytes are collected.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.#ctor(System.Func{System.Byte[],System.Byte[]})">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.CryptographicEngine.BufferingCryptoTransform"/> class.
            </summary>
            <param name="transform">The transform to run when all bytes are collected.</param>
        </member>
        <member name="P:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.CanReuseTransform">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.CanTransformMultipleBlocks">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.InputBlockSize">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.OutputBlockSize">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.BufferingCryptoTransform.Dispose">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.CryptographicKey">
            <summary>
            The WinRT implementation of the <see cref="T:PCLCrypto.ICryptographicKey"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptographicKey.key">
            <summary>
            The WinRT cryptographic key.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.#ctor(Windows.Security.Cryptography.Core.CryptographicKey)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.CryptographicKey" /> class.
            </summary>
            <param name="key">The WinRT cryptographic key.</param>
        </member>
        <member name="P:PCLCrypto.CryptographicKey.KeySize">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptographicKey.Key">
            <summary>
            Gets the platform key.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.Export(PCLCrypto.CryptographicPrivateKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicKey.ExportPublicKey(PCLCrypto.CryptographicPublicKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.DeriveBytes">
            <summary>
            Exposes the WinRT implementation of <see cref="T:PCLCrypto.IDeriveBytes"/>.
            </summary>
        </member>
        <member name="M:PCLCrypto.DeriveBytes.GetBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.DeriveBytes.GetBytes(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.DeriveBytes.GetBytes(Windows.Storage.Streams.IBuffer,Windows.Storage.Streams.IBuffer,System.Int32,System.Int32)">
            <summary>
            Derives a cryptographically strong key from the specified bytes.
            </summary>
            <param name="keyMaterial">The user-supplied password.</param>
            <param name="salt">The salt.</param>
            <param name="iterations">The rounds of computation to use in deriving a stronger key. The larger this is, the longer attacks will take.</param>
            <param name="countBytes">The desired key size in bytes.</param>
            <returns>The generated key.</returns>
        </member>
        <member name="T:PCLCrypto.RandomNumberGenerator">
            <summary>
            Exposes the WinRT implementation of <see cref="T:PCLCrypto.IRandomNumberGenerator"/>.
            </summary>
        </member>
        <member name="M:PCLCrypto.RandomNumberGenerator.GetBytes(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:PCLCrypto.SymmetricKeyAlgorithmProvider">
            <summary>
            A WinRT implementation of the <see cref="T:PCLCrypto.ISymmetricKeyAlgorithmProvider"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.SymmetricKeyAlgorithmProvider.platform">
            <summary>
            The WinRT platform implementation.
            </summary>
        </member>
        <member name="F:PCLCrypto.SymmetricKeyAlgorithmProvider.algorithm">
            <summary>
            The algorithm used by this instance.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProvider.#ctor(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.SymmetricKeyAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="P:PCLCrypto.SymmetricKeyAlgorithmProvider.Algorithm">
            <inheritdoc/>
        </member>
        <member name="P:PCLCrypto.SymmetricKeyAlgorithmProvider.BlockLength">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProvider.CreateSymmetricKey(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProvider.GetAlgorithmName(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Returns the string to pass to the platform APIs for a given algorithm.
            </summary>
            <param name="algorithm">The algorithm desired.</param>
            <returns>The platform-specific string to pass to OpenAlgorithm.</returns>
        </member>
        <member name="T:PCLCrypto.WinRTUtilities">
            <summary>
            Utilities common to an IronPigeon application targeting WinRT.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTUtilities.EmptyBuffer">
            <summary>
            An empty buffer.
            </summary>
        </member>
        <member name="M:PCLCrypto.WinRTUtilities.ToArray(Windows.Storage.Streams.IBuffer)">
            <summary>
            Converts a WinRT buffer to a .NET buffer.
            </summary>
            <param name="buffer">The WinRT buffer.</param>
            <returns>The .NET buffer. Null if <paramref name="buffer"/> was null.</returns>
        </member>
        <member name="M:PCLCrypto.WinRTUtilities.ToBuffer(System.Byte[])">
            <summary>
            Converts a .NET buffer to a WinRT buffer.
            </summary>
            <param name="array">The .NET buffer.</param>
            <returns>The WinRT buffer. Null if <paramref name="array"/> was null.</returns>
        </member>
        <member name="T:PCLCrypto.CryptoStream">
            <summary>
            Defines a stream that links data streams to cryptographic transformations.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.chainedStream">
            <summary>
            The stream that is read from or written to with each I/O operation.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.transform">
            <summary>
            The crypto transform to use for each block.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.mode">
            <summary>
            The read/write mode of this stream.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.inputBuffer">
            <summary>
            Data that has not yet been transformed.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.outputBuffer">
            <summary>
            Data that has been transformed but not flushed.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.inputBufferSize">
            <summary>
            The number of valid bytes in <see cref="F:PCLCrypto.CryptoStream.inputBuffer"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.outputBufferSize">
            <summary>
            The number of valid bytes in <see cref="F:PCLCrypto.CryptoStream.outputBuffer"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.outputBufferIndex">
            <summary>
            The index of the first valid byte in <see cref="F:PCLCrypto.CryptoStream.outputBuffer"/>.
            This advances when Read is called with a smaller buffer than we have bytes available.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptoStream.#ctor(System.IO.Stream,PCLCrypto.ICryptoTransform,PCLCrypto.CryptoStreamMode)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.CryptoStream"/> class.
            </summary>
            <param name="stream">The stream to write to or read from.</param>
            <param name="transform">The cryptographic operation to use for transforming data.</param>
            <param name="mode">The mode of operation.</param>
        </member>
        <member name="P:PCLCrypto.CryptoStream.HasFlushedFinalBlock">
            <summary>
            Gets a value indicating whether the final buffer block has been written to the underlying stream. 
            </summary>
        </member>
        <member name="P:PCLCrypto.CryptoStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptoStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptoStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptoStream.Length">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptoStream.Position">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.WriteTo(System.IO.Stream,PCLCrypto.ICryptoTransform[])">
            <summary>
            Creates a CryptoStream that can be used to write to the specified stream
            after passing through a series of transforms.
            </summary>
            <param name="stream">The ultimate stream to be written to.</param>
            <param name="transforms">The transformations to apply to the data before writing to <paramref name="stream"/>.</param>
            <returns>A CryptoStream instance.</returns>
        </member>
        <member name="M:PCLCrypto.CryptoStream.ReadFrom(System.IO.Stream,PCLCrypto.ICryptoTransform[])">
            <summary>
            Creates a CryptoStream that can be used to read from the specified stream,
            passing the retrieved data through a series of transforms before being read
            from this stream.
            </summary>
            <param name="stream">The ultimate stream to be read from.</param>
            <param name="transforms">The transformations to apply to the data after reading from <paramref name="stream"/>.</param>
            <returns>A CryptoStream instance.</returns>
        </member>
        <member name="M:PCLCrypto.CryptoStream.FlushFinalBlock">
            <summary>
            Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.
            </summary>
            <remarks>
            Calling the Close method will call FlushFinalBlock. If you do not call Close, call FlushFinalBlock to complete flushing the buffer. Call FlushFinalBlock only when all stream activity is complete.
            </remarks>
        </member>
        <member name="M:PCLCrypto.CryptoStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Chain(System.IO.Stream,PCLCrypto.CryptoStreamMode,PCLCrypto.ICryptoTransform[])">
            <summary>
            Creates a CryptoStream chain of transforms.
            </summary>
            <param name="stream">The ultimate stream to be read from or written to.</param>
            <param name="cryptoStreamMode">Whether to prepare for read or write operations to trigger the operations.</param>
            <param name="transforms">The transforms to apply.</param>
            <returns>The start of the chain of CryptoStreams.</returns>
        </member>
        <member name="M:PCLCrypto.CryptoStream.ChainWrite(System.IO.Stream,System.Collections.Generic.IEnumerator{PCLCrypto.ICryptoTransform})">
            <summary>
            Creates a CryptoStream chain of transforms for writing streams.
            </summary>
            <param name="stream">The ultimate stream to be read from or written to.</param>
            <param name="transforms">An enumerator positioned just before the transform to create for the outer-most stream.</param>
            <returns>
            The start of the chain of CryptoStreams.
            </returns>
        </member>
        <member name="T:PCLCrypto.NetFxCrypto">
            <summary>
            Exposes cryptography using API familiar to .NET Framework developers.
            </summary>
        </member>
        <member name="F:PCLCrypto.NetFxCrypto.randomNumberGenerator">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IRandomNumberGenerator"/>.
            </summary>
        </member>
        <member name="P:PCLCrypto.NetFxCrypto.RandomNumberGenerator">
            <summary>
            Gets a cryptographically strong random number generator.
            </summary>
        </member>
        <member name="P:PCLCrypto.NetFxCrypto.DeriveBytes">
            <summary>
            Gets tools to derive a key from a password for buffer.
            </summary>
        </member>
        <member name="T:PCLCrypto.WinRTCrypto">
            <summary>
            Exposes cryptography using API familiar to WinRT developers.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.asymmetricKeyAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IAsymmetricKeyAlgorithmProvider"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.symmetricKeyAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.ISymmetricKeyAlgorithmProvider"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.hashAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IHashAlgorithmProviderFactory"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.macAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IMacAlgorithmProviderFactory"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.keyDerivationAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IKeyDerivationAlgorithmProviderFactory"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.keyDerivationParametersFactory">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IKeyDerivationParametersFactory"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.cryptographicEngine">
            <summary>
            Backing field for the CryptographicEngine property.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.cryptographicBuffer">
            <summary>
            Backing field for the CryptographicBuffer property.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.AsymmetricKeyAlgorithmProvider">
            <summary>
            Gets the asymmetric key algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.SymmetricKeyAlgorithmProvider">
            <summary>
            Gets the symmetric key algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.HashAlgorithmProvider">
            <summary>
            Gets the hash algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.MacAlgorithmProvider">
            <summary>
            Gets the MAC algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.KeyDerivationAlgorithmProvider">
            <summary>
            Gets the key derivation algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.KeyDerivationParameters">
            <summary>
            Gets the key derivation parameters factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.CryptographicEngine">
            <summary>
            Gets the service for signatures and encryption.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.CryptographicBuffer">
            <summary>
            Gets the service for buffers.
            </summary>
        </member>
        <member name="T:PCLCrypto.CryptoUtilities">
            <summary>
            An assortment of crypto utilities.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptoUtilities.BufferEquals(System.Byte[],System.Byte[])">
            <summary>
            Performs a constant time comparison between two buffers.
            </summary>
            <param name="buffer1">The first buffer.</param>
            <param name="buffer2">The second buffer.</param>
            <returns><c>true</c> if the buffers have exactly the same contents; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:PCLCrypto.HashAlgorithmProviderFactory">
            <summary>
            A WinRT implementation of <see cref="T:PCLCrypto.IHashAlgorithmProviderFactory"/>.
            </summary>
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.HashAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProviderFactory.GetHashAlgorithmName(PCLCrypto.HashAlgorithm)">
            <summary>
            Gets the name for a given hash algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>A non-empty string.</returns>
        </member>
    </members>
</doc>
