<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XLabs.Forms</name>
    </assembly>
    <members>
        <member name="T:XLabs.Forms.Behaviors.GestureCollection">
            <summary>
            Container class for Gesture Interests
            </summary>
        </member>
        <member name="T:XLabs.Forms.Behaviors.GestureInterest">
            <summary>
            Attaches an interest in a gesture to a View
            <see cref="T:XLabs.Forms.Behaviors.Gestures"/> and <see cref="T:XLabs.Forms.Controls.GesturesContentView"/>
            </summary>
        </member>
        <member name="F:XLabs.Forms.Behaviors.GestureInterest.NotifcationProperty">
            <summary>
            The property definition for <see cref="P:XLabs.Forms.Behaviors.GestureInterest.Notification"/>
            </summary>
        </member>
        <member name="F:XLabs.Forms.Behaviors.GestureInterest.GestureTypeProperty">
            <summary>
            The property defintion for <see cref="P:XLabs.Forms.Behaviors.GestureInterest.GestureType"/>
            </summary>
        </member>
        <member name="F:XLabs.Forms.Behaviors.GestureInterest.DirectionProperty">
            <summary>
            The property definitionf for <see cref="P:XLabs.Forms.Behaviors.GestureInterest.Direction"/>
            </summary>
        </member>
        <member name="F:XLabs.Forms.Behaviors.GestureInterest.GestureCommandProperty">
            <summary>
            The property definition for <see cref="P:XLabs.Forms.Behaviors.GestureInterest.GestureCommand"/>
            </summary>
        </member>
        <member name="F:XLabs.Forms.Behaviors.GestureInterest.GestureParameterProperty">
            <summary>
            The property definition for <see cref="P:XLabs.Forms.Behaviors.GestureInterest.GestureParameter"/>
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureInterest.Notification">
            <summary>
            The notification to use with this gesture
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureInterest.GestureType">
            <summary>
            The Gesture type you are interested in <see cref="P:XLabs.Forms.Behaviors.GestureInterest.GestureType"/>
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureInterest.Direction">
            <summary>
            The Direction (if appropiate) <see cref="T:XLabs.Forms.Controls.Directionality"/>
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureInterest.GestureCommand">
            <summary>
            The implementation of <see cref="T:XLabs.Forms.Behaviors.IGesture"/>
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureInterest.GestureParameter">
            <summary>
            An optional paramater passed to <see cref="M:XLabs.Forms.Behaviors.IGesture.ExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)"/>
            and <see cref="M:XLabs.Forms.Behaviors.IGesture.CanExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)"/>
            </summary>
        </member>
        <member name="T:XLabs.Forms.Behaviors.GestureResult">
            <summary>
            Geture result sent along with the Paramater for 
            in a Gesture Exectue call.
            Also the EventArgs type for OnGesture
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.GestureType">
            <summary>
            The gesture type
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.Direction">
            <summary>
            The direction (if any) of the direction
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.Origin">
            <summary>
            The point, relative to the start view where the 
            gesture started
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.Origin2">
            <summary>
            The point, relative to the start view where the second finger of the
            gesture is located (valid for GestureType.Pinch)
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.StartView">
            <summary>
            The view that the gesture started in
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.Length">
            <summary>
            The Vector Length of the gesture (if appropiate)
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.VerticalDistance">
            <summary>
            The Vertical distance the gesture travelled
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.HorizontalDistance">
            <summary>
            The horizontal distance the gesture travelled
            </summary>
        </member>
        <member name="P:XLabs.Forms.Behaviors.GestureResult.ViewStack">
            <summary>Gets or sets the view stack.</summary>
            <value>A list of all view elements containing the origin point.</value>
            Element created at 07/11/2014,11:54 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Behaviors.Gestures">
            <summary>
            Provides Gesture attached properties for the GesturesContentView
            This class has no involvement beyond setting up the interests
            It is here simply to make the users xaml a bit 
            more readable
            </summary>
        </member>
        <member name="F:XLabs.Forms.Behaviors.Gestures.InterestsProperty">
            <summary>
            Definition for the attachable Interests Property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Behaviors.Gestures.#ctor">
            <summary>
            ctor guarenttess that <see cref="P:XLabs.Forms.Behaviors.Gestures.Interests"/> is not null
            </summary>
        </member>
        <member name="M:XLabs.Forms.Behaviors.Gestures.FindContentViewParent(Xamarin.Forms.View,System.Boolean)">
            <summary>
            Utility function to find the first containing <see cref="T:XLabs.Forms.Controls.GesturesContentView"/>
            </summary>
            <param name="view">View to find the parent from.</param>
            <param name="throwException">True to throw an excpetion if the parent is not found</param>
            <returns></returns>
        </member>
        <member name="P:XLabs.Forms.Behaviors.Gestures.Interests">
            <summary>
            The set of interests for this view
            </summary>
        </member>
        <member name="T:XLabs.Forms.Behaviors.GridLayout">
            <summary>
            GridLayout provides attached properties to simplify
            the layout of Grids in Xaml
            </summary>
            <example>
            Move from this:
            <code>
            <![CDATA[
            <Grid HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="24"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="64"/>
                </Grid.ColumnDefinitions>
            </Grid>
            ]]>
            </code>
            To this:(where lb is the XLabs.Forms.Behavior namespace prefix
            
            <code>
            <![CDATA[
            <Grid HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand" lb:GridLayout.RowHeights="Auto,Auto,*,24" lb.GridLayout.ColumnWidths="Auto,*,2*,64">
            </Grid>
            ]]>
            </code>
            
            </example>
        </member>
        <member name="F:XLabs.Forms.Behaviors.GridLayout.RowHeightsProperty">
            <summary>
            The property definition of the RowHeights property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Behaviors.GridLayout.ColumnWidthsProperty">
            <summary>
            The property definition of the ColumnWidthProperty
            </summary>
        </member>
        <member name="M:XLabs.Forms.Behaviors.GridLayout.RowHeightsChanged(Xamarin.Forms.BindableObject,System.String,System.String)">
            <summary>
            This method is responsible for converting the RowHeights string
            into RowDefinitions.  The RowHeights string is a comma sepearated 
            string of height values.
            Auto,*,n*,and absolute values are supported ie:
            "Auto,*,2*,64" Will result in 4 row
            auto height, 1/3 of remaining height, 2/3 of remaining height and 64 height
            </summary>
            <param name="bo">The object the property was attached to. Must be a <see cref="T:Xamarin.Forms.Grid"/> or subclass</param>
            <param name="oldval">ignored</param>
            <param name="newval">the new height string</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.GridLayout.ColumnWidthsChanged(Xamarin.Forms.BindableObject,System.String,System.String)">
            <summary>
            This method is responsible for converting the ColumnWidths string
            into ColumnDefinitions.  The ColumnWidths string is a comma sepearated 
            string of width values.
            Auto,*,n*,and absolute values are supported ie:
            "Auto,*,2*,64" Will result in 4 columns
            auto width, 1/3 of remaining width, 2/3 of remaining width and 64 width
            </summary>
            <param name="bo">The object the property was attached to. Must be a <see cref="T:Xamarin.Forms.Grid"/> or subclass</param>
            <param name="oldval">ignored</param>
            <param name="newval">the new wdith string</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.GridLayout.LengthFromString(System.String)">
            <summary>
            Private utility function to 
            convert a string into a <see cref="T:Xamarin.Forms.GridLength"/>
            </summary>
            <param name="measure">The lenght string</param>
            <returns></returns>
        </member>
        <member name="T:XLabs.Forms.Behaviors.IGesture">
            <summary>
            Interface implmenented to consume gestures
            analagous to ICommand
            </summary>
        </member>
        <member name="M:XLabs.Forms.Behaviors.IGesture.ExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Execute the gesture
            </summary>
            <param name="result">The <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="param">the user supplied paramater</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.IGesture.CanExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Checks to see if the gesture should execute
            </summary>
            <param name="result">The <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="param">The user supplied parameter</param>
            <returns>True to execute the gesture, False otherwise</returns>
        </member>
        <member name="T:XLabs.Forms.Behaviors.RelayGesture`1">
            <summary>
            Syncronous Implmentation of the IGesture
            Paramater is a T type
            </summary>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGesture`1.#ctor(System.Action{XLabs.Forms.Behaviors.GestureResult,`0},System.Func{XLabs.Forms.Behaviors.GestureResult,`0,System.Boolean})">
            <summary>
            Builds the Rely Gesture
            </summary>
            <param name="execute">The action to execute when the gesture occures</param>
            <param name="predicate">A function to determine if the action should fire. If ommited the action is always available.</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGesture`1.ExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Excutes the action assoicated with the gesture
            </summary>
            <param name="result">The final <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="param">The Gesture Paramater cast to T before calling the action</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGesture`1.CanExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Tests to see if a gesture's action can execute
            </summary>
            <param name="result">The final <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="param">The Gesture Paramater cast to T before calling the function</param>
            <returns>true if the action can execute,false othewise</returns>
        </member>
        <member name="T:XLabs.Forms.Behaviors.RelayGesture">
            <summary>
            Syncronous Implmentation of the IGesture
            Paramater is a objet type
            </summary>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGesture.#ctor(System.Action{XLabs.Forms.Behaviors.GestureResult,System.Object},System.Func{XLabs.Forms.Behaviors.GestureResult,System.Object,System.Boolean})">
            <summary>
            Builds the Rely Gesture
            </summary>
            <param name="execute">The action to execute when the gesture occures</param>
            <param name="predicate">A function to determine if the action should fire. If ommited the action is always available.</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGesture.ExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Excutes the action assoicated with the gesture
            </summary>
            <param name="result">The final <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="annoyingbaseobjectthing">The Gesture Paramater</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGesture.CanExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Tests to see if a gesture's action can execute
            </summary>
            <param name="result">The final <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="annoyingbaseobjectthing">The Gesture Paramater</param>
            <returns>true if the action can execute,false othewise</returns>
        </member>
        <member name="T:XLabs.Forms.Behaviors.RelayGestureAsync`1">
            <summary>
            ASyncronous Implmenta tion of the IGesture
            The execute is asyncronous while the canexecute is syncronous
            Paramater is an T type
            </summary>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGestureAsync`1.#ctor(System.Func{XLabs.Forms.Behaviors.GestureResult,`0,System.Threading.Tasks.Task},System.Func{XLabs.Forms.Behaviors.GestureResult,`0,System.Boolean})">
            <summary>
            Builds the Rely Gesture
            </summary>
            <param name="execute">The asyncronous action to execute when the gesture occures</param>
            <param name="predicate">A function to determine if the action should fire. If ommited the action is always available.</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGestureAsync`1.ExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Excutes the asyncronous action assoicated with the gesture
            </summary>
            <param name="result">The final <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="param">The Gesture Paramater</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGestureAsync`1.CanExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Tests to see if a gesture's action can execute
            </summary>
            <param name="result">The final <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="annoyingbaseobjectthing">The Gesture Paramater</param>
            <returns>true if the action can execute,false othewise</returns>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGestureAsync`1.Execute(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Virtual aync funciton that the user can override to provide
            any custom functionality required.
            </summary>
            <param name="gesture"><see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="annoyingbaseobjectthing"></param>
            <returns></returns>
        </member>
        <member name="T:XLabs.Forms.Behaviors.RelayGestureAsync">
            <summary>
            ASyncronous Implmenta tion of the IGesture
            The execute is asyncronous while the canexecute is syncronous
            Paramater is an object type
            </summary>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGestureAsync.#ctor(System.Func{XLabs.Forms.Behaviors.GestureResult,System.Object,System.Threading.Tasks.Task},System.Func{XLabs.Forms.Behaviors.GestureResult,System.Object,System.Boolean})">
            <summary>
            Builds the Rely Gesture
            </summary>
            <param name="execute">The asyncronous action to execute when the gesture occures</param>
            <param name="predicate">A function to determine if the action should fire. If ommited the action is always available.</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGestureAsync.ExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Excutes the asyncronous action assoicated with the gesture
            </summary>
            <param name="result">The final <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="param">The Gesture Paramater</param>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGestureAsync.CanExecuteGesture(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Tests to see if a gesture's action can execute
            </summary>
            <param name="result">The final <see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="annoyingbaseobjectthing">The Gesture Paramater</param>
            <returns>true if the action can execute,false othewise</returns>
        </member>
        <member name="M:XLabs.Forms.Behaviors.RelayGestureAsync.Execute(XLabs.Forms.Behaviors.GestureResult,System.Object)">
            <summary>
            Virtual aync funciton that the user can override to provide
            any custom functionality required.
            </summary>
            <param name="gesture"><see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <param name="annoyingbaseobjectthing"></param>
            <returns></returns>
        </member>
        <member name="T:XLabs.Forms.Controls.AccessoryViewCell">
            <summary>
            Class AccessoryViewCell.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedTextCell">
            <summary>
            Class ExtendedTextCell.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTextCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ExtendedTextCell"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.DetailLocationProperty">
            <summary>
            The detail location property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.FontSizeProperty">
            <summary>
            The font size property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.FontNameAndroidProperty">
            <summary>
            The font name android property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.FontNameIosProperty">
            <summary>
            The font name ios property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.FontNameWpProperty">
            <summary>
            The font name wp property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.FontNameProperty">
            <summary>
            The font name property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.BackgroundColorProperty">
            <summary>
            The background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.SeparatorColorProperty">
            <summary>
            The separator color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.SeparatorPaddingProperty">
            <summary>
            The separator padding property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.ShowSeparatorProperty">
            <summary>
            The show separator property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.ShowDisclousureProperty">
            <summary>
            The show disclousure property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTextCell.DisclousureImageProperty">
            <summary>
            The disclousure image property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.DetailLocation">
            <summary>
            Gets or sets the detail location.
            </summary>
            <value>The detail location.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.FontNameAndroid">
            <summary>
            Gets or sets the font name android.
            </summary>
            <value>The font name android.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.FontNameIos">
            <summary>
            Gets or sets the font name ios.
            </summary>
            <value>The font name ios.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.FontNameWp">
            <summary>
            Gets or sets the font name wp.
            </summary>
            <value>The font name wp.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>The name of the font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.SeparatorColor">
            <summary>
            Gets or sets the color of the separator.
            </summary>
            <value>The color of the separator.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.SeparatorPadding">
            <summary>
            Gets or sets the separator padding.
            </summary>
            <value>The separator padding.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.ShowSeparator">
            <summary>
            Gets or sets a value indicating whether [show separator].
            </summary>
            <value><c>true</c> if [show separator]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.ShowDisclousure">
            <summary>
            Gets or sets a value indicating whether [show disclousure].
            </summary>
            <value><c>true</c> if [show disclousure]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTextCell.DisclousureImage">
            <summary>
            Gets or sets the disclousure image.
            </summary>
            <value>The disclousure image.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AccessoryViewCell.AccessoryView">
            <summary>
            Gets or sets the accessory view.
            </summary>
            <value>The accessory view.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.AutoCompleteView">
            <summary>
            Define the AutoCompleteView control.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.ExecuteOnSuggestionClickProperty">
            <summary>
            The execute on suggestion click property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.PlaceholderProperty">
            <summary>
            The placeholder property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchBackgroundColorProperty">
            <summary>
            The search background color property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchBorderColorProperty">
            <summary>
            The search border color property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchBorderRadiusProperty">
            <summary>
            The search border radius property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchBorderWidthProperty">
            <summary>
            The search border width property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchCommandProperty">
            <summary>
            The search command property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchHorizontalOptionsProperty">
            <summary>
            The search horizontal options property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchTextColorProperty">
            <summary>
            The search text color property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchTextProperty">
            <summary>
            The search text property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SearchVerticalOptionsProperty">
            <summary>
            The search vertical options property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SelectedCommandProperty">
            <summary>
            The selected command property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SelectedItemProperty">
            <summary>
            The selected item property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.ShowSearchProperty">
            <summary>
            The show search property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SuggestionBackgroundColorProperty">
            <summary>
            The suggestion background color property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SuggestionItemDataTemplateProperty">
            <summary>
            The suggestion item data template property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SuggestionsHeightRequestProperty">
            <summary>
            The suggestion height request property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.SuggestionsProperty">
            <summary>
            The suggestions property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.TextBackgroundColorProperty">
            <summary>
            The text background color property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.TextColorProperty">
            <summary>
            The text color property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.TextHorizontalOptionsProperty">
            <summary>
            The text horizontal options property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.TextProperty">
            <summary>
            The text property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.AutoCompleteView.TextVerticalOptionsProperty">
            <summary>
            The text vertical options property.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.AutoCompleteView"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.PlaceHolderChanged(Xamarin.Forms.BindableObject,System.String,System.String)">
            <summary>
            Places the holder changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldPlaceHolderValue">The old place holder value.</param>
            <param name="newPlaceHolderValue">The new place holder value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SearchBackgroundColorChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Searches the background color changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SearchBorderColorChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Searches the border color changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SearchBorderRadiusChanged(Xamarin.Forms.BindableObject,System.Int32,System.Int32)">
            <summary>
            Searches the border radius changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SearchBorderWidthChanged(Xamarin.Forms.BindableObject,System.Int32,System.Int32)">
            <summary>
            Searches the border width changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SearchHorizontalOptionsChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.LayoutOptions,Xamarin.Forms.LayoutOptions)">
            <summary>
            Searches the horizontal options changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SearchTextChanged(Xamarin.Forms.BindableObject,System.String,System.String)">
            <summary>
            Searches the text changed.
            </summary>
            <param name="obj">The bindable.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SearchTextColorChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Searches the text color color changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SearchVerticalOptionsChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.LayoutOptions,Xamarin.Forms.LayoutOptions)">
            <summary>
            Searches the vertical options changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.ShowSearchChanged(Xamarin.Forms.BindableObject,System.Boolean,System.Boolean)">
            <summary>
            Shows the search changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldShowSearchValue">if set to <c>true</c> [old show search value].</param>
            <param name="newShowSearchValue">if set to <c>true</c> [new show search value].</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SuggestionBackgroundColorChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Suggestions the background color changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SuggestionHeightRequestChanged(Xamarin.Forms.BindableObject,System.Double,System.Double)">
            <summary>
            Suggestions the height changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.SuggestionItemDataTemplateChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.DataTemplate,Xamarin.Forms.DataTemplate)">
            <summary>
            Suggestions the item data template changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldShowSearchValue">The old show search value.</param>
            <param name="newShowSearchValue">The new show search value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.TestVerticalOptionsChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.LayoutOptions,Xamarin.Forms.LayoutOptions)">
            <summary>
            Tests the vertical options changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.TextBackgroundColorChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Texts the background color changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.TextColorChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Texts the color changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.TextHorizontalOptionsChanged(Xamarin.Forms.BindableObject,Xamarin.Forms.LayoutOptions,Xamarin.Forms.LayoutOptions)">
            <summary>
            Texts the horizontal options changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.TextValueChanged(Xamarin.Forms.BindableObject,System.String,System.String)">
            <summary>
            Texts the changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="oldPlaceHolderValue">The old place holder value.</param>
            <param name="newPlaceHolderValue">The new place holder value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.OnSelectedItemChanged(System.Object)">
            <summary>
            Called when [selected item changed].
            </summary>
            <param name="selectedItem">The selected item.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.OnTextChanged(Xamarin.Forms.TextChangedEventArgs)">
            <summary>
            Handles the <see cref="E:TextChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Xamarin.Forms.TextChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.AutoCompleteView.ShowHideListbox(System.Boolean)">
            <summary>
            Shows the hide listbox.
            </summary>
            <param name="show">if set to <c>true</c> [show].</param>
        </member>
        <member name="E:XLabs.Forms.Controls.AutoCompleteView.SelectedItemChanged">
            <summary>
            Occurs when [selected item changed].
            </summary>
        </member>
        <member name="E:XLabs.Forms.Controls.AutoCompleteView.TextChanged">
            <summary>
            Occurs when [text changed].
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.AvailableSuggestions">
            <summary>
            Gets the available Suggestions.
            </summary>
            <value>The available Suggestions.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.ExecuteOnSuggestionClick">
            <summary>
            Gets or sets a value indicating whether [execute on sugestion click].
            </summary>
            <value><c>true</c> if [execute on sugestion click]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.Placeholder">
            <summary>
            Gets or sets the placeholder.
            </summary>
            <value>The placeholder.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchBackgroundColor">
            <summary>
            Gets or sets the color of the search background.
            </summary>
            <value>The color of the search background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchBorderColor">
            <summary>
            Gets or sets the search border color.
            </summary>
            <value>The search border brush.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchBorderRadius">
            <summary>
            Gets or sets the search border radius.
            </summary>
            <value>The search border radius.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchBorderWidth">
            <summary>
            Gets or sets the width of the search border.
            </summary>
            <value>The width of the search border.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchCommand">
            <summary>
            Gets or sets the search command.
            </summary>
            <value>The search command.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchHorizontalOptions">
            <summary>
            Gets or sets the search horizontal options.
            </summary>
            <value>The search horizontal options.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchText">
            <summary>
            Gets or sets the search text.
            </summary>
            <value>The search text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchTextColor">
            <summary>
            Gets or sets the color of the search text button.
            </summary>
            <value>The color of the search text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SearchVerticalOptions">
            <summary>
            Gets or sets the search vertical options.
            </summary>
            <value>The search vertical options.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SelectedCommand">
            <summary>
            Gets or sets the selected command.
            </summary>
            <value>The selected command.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.ShowSearchButton">
            <summary>
            Gets or sets a value indicating whether [show search button].
            </summary>
            <value><c>true</c> if [show search button]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SuggestionBackgroundColor">
            <summary>
            Gets or sets the color of the sugestion background.
            </summary>
            <value>The color of the sugestion background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SuggestionItemDataTemplate">
            <summary>
            Gets or sets the suggestion item data template.
            </summary>
            <value>The sugestion item data template.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.Suggestions">
            <summary>
            Gets or sets the Suggestions.
            </summary>
            <value>The Suggestions.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.SuggestionsHeightRequest">
            <summary>
            Gets or sets the height of the suggestion.
            </summary>
            <value>The height of the suggestion.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.TextBackgroundColor">
            <summary>
            Gets or sets the color of the text background.
            </summary>
            <value>The color of the text background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.TextHorizontalOptions">
            <summary>
            Gets or sets the text horizontal options.
            </summary>
            <value>The text horizontal options.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.AutoCompleteView.TextVerticalOptions">
            <summary>
            Gets or sets the text vertical options.
            </summary>
            <value>The text vertical options.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.BindablePicker">
            <summary>
            Class BindablePicker.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindablePicker.HasBorderProperty">
            <summary>
            The HasBorder property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindablePicker.TitleProperty">
            <summary>
            The title property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindablePicker.SelectedIndexProperty">
            <summary>
            The selected index property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.BindablePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.BindablePicker"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindablePicker.ItemsSourceProperty">
            <summary>
            The items source property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindablePicker.SelectedItemProperty">
            <summary>
            The selected item property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.BindablePicker.OnItemsSourceChanged(Xamarin.Forms.BindableObject,System.Collections.IList,System.Collections.IList)">
            <summary>
            Called when [items source changed].
            </summary>
            <param name="bindable">The bindable.</param>
            <param name="oldvalue">The oldvalue.</param>
            <param name="newvalue">The newvalue.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.BindablePicker.OnSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:SelectedIndexChanged"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.BindablePicker.OnSelectedItemChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            Called when [selected item changed].
            </summary>
            <param name="bindable">The bindable.</param>
            <param name="oldvalue">The oldvalue.</param>
            <param name="newvalue">The newvalue.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.BindablePicker.CoerceSelectedIndex(Xamarin.Forms.BindableObject,System.Int32)">
            <summary>
            Coerces the index of the selected.
            </summary>
            <param name="bindable">The bindable.</param>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.BindablePicker.OnItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the <see cref="E:ItemsCollectionChanged"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:XLabs.Forms.Controls.BindablePicker.SelectedIndexChanged">
            <summary>
            Occurs when [selected index changed].
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.BindablePicker.SourceItemLabelConverter">
            <summary>
            Gets or sets the souce item label converter.
            </summary>
            <value>The souce item label converter.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindablePicker.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindablePicker.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindablePicker.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindablePicker.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindablePicker.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindablePicker.HasBorder">
            <summary>
            Gets or sets if the border should be shown or not
            </summary>
            <value><c>true</c> if this instance has border; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ButtonGroup">
            <summary>
            Class ButtonGroup.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.SPACING">
            <summary>
            The spacing
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.PADDING">
            <summary>
            The padding
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.BUTTON_BORDER_WIDTH">
            <summary>
            The button border width
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.FRAME_PADDING">
            <summary>
            The frame padding
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.BUTTON_BORDER_RADIUS">
            <summary>
            The button border radius
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.BUTTON_HEIGHT">
            <summary>
            The button height
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.BUTTON_HEIGHT_WP">
            <summary>
            The button height wp
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.BUTTON_HALF_HEIGHT">
            <summary>
            The button half height
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.BUTTON_HALF_HEIGHT_WP">
            <summary>
            The button half height wp
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.OutlineColorProperty">
            <summary>
            The outline color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.ViewBackgroundColorProperty">
            <summary>
            The view background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.BackgroundColorProperty">
            <summary>
            The background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.SelectedBackgroundColorProperty">
            <summary>
            The selected background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.TextColorProperty">
            <summary>
            The text color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.SelectedTextColorProperty">
            <summary>
            The selected text color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.BorderColorProperty">
            <summary>
            The border color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.SelectedBorderColorProperty">
            <summary>
            The selected border color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.SelectedFrameBackgroundColorProperty">
            <summary>
            The selected frame background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.SelectedIndexProperty">
            <summary>
            The selected index property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.ItemsPropertyProperty">
            <summary>
            The items property property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.FontProperty">
            <summary>
            The font property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.RoundedProperty">
            <summary>
            The rounded property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup.IsNumberProperty">
            <summary>
            The is number property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup._buttonLayout">
            <summary>
            The button layout
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ButtonGroup._clickedCommand">
            <summary>
            The clicked command
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ButtonGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ButtonGroup"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ButtonGroup.AddButton(System.String)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.ButtonGroup.SetSelectedButton(System.Object)">
            <summary>
            Sets the selected button.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.ButtonGroup.SetSelectedState(System.Int32,System.Boolean)">
            <summary>
            Sets the state of the selected.
            </summary>
            <param name="index">The index.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.OutlineColor">
            <summary>
            Gets or sets the color of the outline.
            </summary>
            <value>The color of the outline.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.ViewBackgroundColor">
            <summary>
            Gets or sets the color of the view background.
            </summary>
            <value>The color of the view background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.BackgroundColor">
            <summary>
            Gets or sets the color which will fill the background of a VisualElement. This is a bindable property.
            </summary>
            <value>The color that is used to fill the background of a VisualElement. The default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.SelectedBackgroundColor">
            <summary>
            Gets or sets the color of the selected background.
            </summary>
            <value>The color of the selected background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.SelectedTextColor">
            <summary>
            Gets or sets the color of the selected text.
            </summary>
            <value>The color of the selected text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.SelectedBorderColor">
            <summary>
            Gets or sets the color of the selected border.
            </summary>
            <value>The color of the selected border.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.SelectedFrameBackgroundColor">
            <summary>
            Gets or sets the color of the selected frame background.
            </summary>
            <value>The color of the selected frame background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.Rounded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XLabs.Forms.Controls.ButtonGroup"/> is rounded.
            </summary>
            <value><c>true</c> if rounded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ButtonGroup.IsNumber">
            <summary>
            Gets or sets a value indicating whether this instance is number.
            </summary>
            <value><c>true</c> if this instance is number; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.CalendarView">
            <summary>
            Class CalendarView.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.MinDateProperty">
            SelectedDate property
            <summary>
            The minimum date property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.MaxDateProperty">
            <summary>
            The maximum date property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CalendarView.FirstDayOfMonth(System.DateTime)">
            <summary>
            Firsts the day of month.
            </summary>
            <param name="date">The date.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.CalendarView.LastDayOfMonth(System.DateTime)">
            <summary>
            Lasts the day of month.
            </summary>
            <param name="date">The date.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.SelectedDateProperty">
            SelectedDate property
            <summary>
            The selected date property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.DisplayedMonthProperty">
            Displayed date property
            <summary>
            The displayed month property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.DateLabelFontProperty">
            DateLabelFont property
            <summary>
            The date label font property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.MonthTitleFontProperty">
            Font property
            <summary>
            The month title font property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.TextColorProperty">
            TextColorProperty property
            <summary>
            The text color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.TodayDateForegroundColorProperty">
            TodayDateForegroundColorProperty property
            <summary>
            The today date foreground color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.TodayDateBackgroundColorProperty">
            TodayDateBackgroundColorProperty property
            <summary>
            The today date background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.DateForegroundColorProperty">
            DateForegroundColorProperty property
            <summary>
            The date foreground color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.DateBackgroundColorProperty">
            DateBackgroundColorProperty property
            <summary>
            The date background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.InactiveDateForegroundColorProperty">
            InactiveDateForegroundColorProperty property
            <summary>
            The inactive date foreground color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.InactiveDateBackgroundColorProperty">
            InactiveDateBackgroundColorProperty property
            <summary>
            The inactive date background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.HighlightedDateForegroundColorProperty">
            HighlightedDateForegroundColorProperty property
            <summary>
            The highlighted date foreground color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.HighlightedDateBackgroundColorProperty">
            HighlightedDateBackgroundColor property
            <summary>
            The highlighted date background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.TodayBackgroundStyleProperty">
            TodayBackgroundStyle property
            <summary>
            The today background style property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.SelectionBackgroundStyleProperty">
            SelectionBackgroundStyle property
            <summary>
            The selection background style property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.SelectedDateForegroundColorProperty">
            SelectedDateForegroundColorProperty property
            <summary>
            The selected date foreground color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.SelectedDateBackgroundColorProperty">
            DateBackgroundColorProperty property
            <summary>
            The selected date background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.DayOfWeekLabelForegroundColorProperty">
            DayOfWeekLabelForegroundColorProperty property
            <summary>
            The day of week label foreground color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.DayOfWeekLabelBackgroundColorProperty">
            DayOfWeekLabelForegroundColorProperty property
            <summary>
            The day of week label background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.MonthTitleForegroundColorProperty">
            DayOfWeekLabelForegroundColorProperty property
            <summary>
            The month title foreground color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.MonthTitleBackgroundColorProperty">
            DayOfWeekLabelForegroundColorProperty property
            <summary>
            The month title background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.DateSeparatorColorProperty">
            DateSeparatorColorProperty property
            <summary>
            The date separator color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.ShowNavigationArrowsProperty">
            ShowNavigationArrowsProperty property
            <summary>
            The show navigation arrows property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.NavigationArrowsColorProperty">
            NavigationArrowsColorProperty property
            <summary>
            The navigation arrows color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.ShouldHighlightDaysOfWeekLabelsProperty">
            ShouldHighlightDaysOfWeekLabelsProperty property
            <summary>
            The should highlight days of week labels property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.HighlightedDaysOfWeekProperty">
            HighlightedDaysOfWeekProperty property
            <summary>
            The highlighted days of week property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CalendarView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.CalendarView"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CalendarView.NotifyDisplayedMonthChanged(System.DateTime)">
            <summary>
            Notifies the displayed month changed.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CalendarView.NotifyDateSelected(System.DateTime)">
            <summary>
            Notifies the date selected.
            </summary>
            <param name="dateSelected">The date selected.</param>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.MinDate">
            <summary>
            Gets or sets the minimum date.
            </summary>
            <value>The minimum date.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.MaxDate">
            <summary>
            Gets or sets the maximum date.
            </summary>
            <value>The maximum date.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.SelectedDate">
            <summary>
            Gets or sets the selected date.
            </summary>
            <value>The selected date.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.DisplayedMonth">
            <summary>
            Gets or sets the displayed month.
            </summary>
            <value>The displayed month.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.DateLabelFont">
            Font used by the calendar dates and day labels
            <summary>
            Gets or sets the date label font.
            </summary>
            <value>The date label font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.MonthTitleFont">
            Font used by the month title
            <summary>
            Gets or sets the month title font.
            </summary>
            <value>The month title font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.TextColor">
            Overall text color property. Default color is platform specific.
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.TodayDateForegroundColor">
            Foreground color of today date. Default color is platform specific.
            <summary>
            Gets or sets the color of the today date foreground.
            </summary>
            <value>The color of the today date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.TodayDateBackgroundColor">
            Background color of today date. Default color is platform specific.
            <summary>
            Gets or sets the color of the today date background.
            </summary>
            <value>The color of the today date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.DateForegroundColor">
            Foreground color of date in the calendar. Default color is platform specific.
            <summary>
            Gets or sets the color of the date foreground.
            </summary>
            <value>The color of the date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.DateBackgroundColor">
            Background color of date in the calendar. Default color is platform specific.
            <summary>
            Gets or sets the color of the date background.
            </summary>
            <value>The color of the date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.InactiveDateForegroundColor">
            Foreground color of date in the calendar which is outside of the current month. Default color is platform specific.
            <summary>
            Gets or sets the color of the inactive date foreground.
            </summary>
            <value>The color of the inactive date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.InactiveDateBackgroundColor">
            Background color of date in the calendar  which is outside of the current month. Default color is platform specific.
            <summary>
            Gets or sets the color of the inactive date background.
            </summary>
            <value>The color of the inactive date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.HighlightedDateForegroundColor">
            Foreground color of highlighted date in the calendar. Default color is platform specific.
            <summary>
            Gets or sets the color of the highlighted date foreground.
            </summary>
            <value>The color of the highlighted date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.HighlightedDateBackgroundColor">
            Background color of selected date in the calendar. Default color is platform specific.
            <summary>
            Gets or sets the color of the highlighted date background.
            </summary>
            <value>The color of the highlighted date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.TodayBackgroundStyle">
            Background style for today cell. It is only respected on iOS for now.
            <summary>
            Gets or sets the today background style.
            </summary>
            <value>The today background style.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.SelectionBackgroundStyle">
            Background style for selecting the cells. It is only respected on iOS for now.
            <summary>
            Gets or sets the selection background style.
            </summary>
            <value>The selection background style.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.SelectedDateForegroundColor">
            Foreground color of selected date in the calendar. Default color is platform specific.
            <summary>
            Gets or sets the color of the selected date foreground.
            </summary>
            <value>The color of the selected date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.SelectedDateBackgroundColor">
            Background color of selected date in the calendar. Default color is platform specific.
            <summary>
            Gets or sets the color of the selected date background.
            </summary>
            <value>The color of the selected date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.DayOfWeekLabelForegroundColor">
            Foreground color of week day labels in the month header. Default color is platform specific.
            <summary>
            Gets or sets the color of the day of week label foreground.
            </summary>
            <value>The color of the day of week label foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.DayOfWeekLabelBackgroundColor">
            Background color of week day labels in the month header. Default color is platform specific.
            <summary>
            Gets or sets the color of the day of week label background.
            </summary>
            <value>The color of the day of week label background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.MonthTitleForegroundColor">
            Foreground color of week day labels in the month header. Default color is platform specific.
            <summary>
            Gets or sets the color of the month title foreground.
            </summary>
            <value>The color of the month title foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.MonthTitleBackgroundColor">
            Background color of week day labels in the month header. Default color is platform specific.
            <summary>
            Gets or sets the color of the month title background.
            </summary>
            <value>The color of the month title background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.DateSeparatorColor">
            Color of separator between dates. Default color is platform specific.
            <summary>
            Gets or sets the color of the date separator.
            </summary>
            <value>The color of the date separator.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ShowNavigationArrows">
            Whether to show navigation arrows for going through months. The navigation arrows 
            <summary>
            Gets or sets a value indicating whether [show navigation arrows].
            </summary>
            <value><c>true</c> if [show navigation arrows]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.NavigationArrowsColor">
            Color of the navigation colors (if shown). Default color is platform specific
            <summary>
            Gets or sets the color of the navigation arrows.
            </summary>
            <value>The color of the navigation arrows.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ShouldHighlightDaysOfWeekLabels">
            Whether to highlight also the labels of week days when the entire column is highlighted.
            <summary>
            Gets or sets a value indicating whether [should highlight days of week labels].
            </summary>
            <value><c>true</c> if [should highlight days of week labels]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.HighlightedDaysOfWeek">
            Background color of selected date in the calendar. Default color is platform specific.
            <summary>
            Gets or sets the highlighted days of week.
            </summary>
            <value>The highlighted days of week.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualDateBackgroundColor">
            <summary>
            Gets the actual color of the date background.
            </summary>
            <value>The actual color of the date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualDateForegroundColor">
            <summary>
            Gets the actual color of the date foreground.
            </summary>
            <value>The actual color of the date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualInactiveDateBackgroundColor">
            <summary>
            Gets the actual color of the inactive date background.
            </summary>
            <value>The actual color of the inactive date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualInactiveDateForegroundColor">
            <summary>
            Gets the actual color of the inactive date foreground.
            </summary>
            <value>The actual color of the inactive date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualTodayDateForegroundColor">
            <summary>
            Gets the actual color of the today date foreground.
            </summary>
            <value>The actual color of the today date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualTodayDateBackgroundColor">
            <summary>
            Gets the actual color of the today date background.
            </summary>
            <value>The actual color of the today date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualSelectedDateForegroundColor">
            <summary>
            Gets the actual color of the selected date foreground.
            </summary>
            <value>The actual color of the selected date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualSelectedDateBackgroundColor">
            <summary>
            Gets the actual color of the selected date background.
            </summary>
            <value>The actual color of the selected date background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualMonthTitleForegroundColor">
            <summary>
            Gets the actual color of the month title foreground.
            </summary>
            <value>The actual color of the month title foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualMonthTitleBackgroundColor">
            <summary>
            Gets the actual color of the month title background.
            </summary>
            <value>The actual color of the month title background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualDayOfWeekLabelForegroundColor">
            <summary>
            Gets the actual color of the day of week label foreground.
            </summary>
            <value>The actual color of the day of week label foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualDayOfWeekLabelBackroundColor">
            <summary>
            Gets the actual color of the day of week label backround.
            </summary>
            <value>The actual color of the day of week label backround.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualNavigationArrowsColor">
            <summary>
            Gets the actual color of the navigation arrows.
            </summary>
            <value>The actual color of the navigation arrows.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualHighlightedDateForegroundColor">
            <summary>
            Gets the actual color of the highlighted date foreground.
            </summary>
            <value>The actual color of the highlighted date foreground.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CalendarView.ActualHighlightedDateBackgroundColor">
            <summary>
            Gets the actual color of the highlighted date background.
            </summary>
            <value>The actual color of the highlighted date background.</value>
        </member>
        <member name="E:XLabs.Forms.Controls.CalendarView.MonthChanged">
            <summary>
            Occurs when [month changed].
            </summary>
        </member>
        <member name="E:XLabs.Forms.Controls.CalendarView.DateSelected">
            <summary>
            Occurs when [date selected].
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.CalendarView.BackgroundStyle">
            <summary>
            Enum BackgroundStyle
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.BackgroundStyle.Fill">
            <summary>
            The fill
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.BackgroundStyle.CircleFill">
            <summary>
            The circle fill
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CalendarView.BackgroundStyle.CircleOutline">
            <summary>
            The circle outline
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.CameraView">
            <summary>
            Class CameraView.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CameraView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.CameraView"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CameraView.CameraProperty">
            <summary>
            The camera device to use.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.CameraView.Camera">
            <summary>
            Gets or sets the camera device to use.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.CarouselView`1">
            <summary>
            Provides a View that uses swipe left and swipe right to change between displays
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.gestureView">
            <summary>
            The _gesture view
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.contentView">
            <summary>
            The _content view
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.interests">
            <summary>
            The _interests
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.myGrid">
            <summary>
            The _my grid
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.marker">
            <summary>
            The _my grid
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.#ctor">
            <summary>
            Constructs the Carousel view and sets defaults
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.ViewModelsProperty">
            <summary>
            Property defnition for the <see cref="P:XLabs.Forms.Controls.CarouselView`1.ViewModels"/> property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.TemplateSelectorProperty">
            <summary>
            Property definition for the <see cref="P:XLabs.Forms.Controls.CarouselView`1.TemplateSelector"/> property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.TickColorProperty">
            <summary>
            Property definition for the <see cref="P:XLabs.Forms.Controls.CarouselView`1.TickColor"/> property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.ShowTickProperty">
            <summary>
            Property definition for the <see cref="P:XLabs.Forms.Controls.CarouselView`1.ShowTick"/>
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CarouselView`1.ItemTemplateSelectorProperty">
            <summary>
            The item template selector property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.OnDataTemplateSelectorChanged(Xamarin.Forms.BindableObject,XLabs.Forms.Controls.DataTemplateSelector,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Called when [data template selector changed].
            </summary>
            <param name="bindable">The bindable.</param>
            <param name="oldvalue">The oldvalue.</param>
            <param name="newvalue">The newvalue.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.OnDataTemplateSelectorChanged(XLabs.Forms.Controls.DataTemplateSelector,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Called when [data template selector changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.OnBindingContextChanged">
            <summary>
            Invoked whenever the binding context of the <see cref="T:Xamarin.Forms.View" /> changes. Override this method to add class handling for this event.
            </summary>
            <remarks>Overriders must call the base method.</remarks>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.SetupTickBoard">
            <summary>
            Setups the tick board.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.SwitchView(System.Boolean)">
            <summary>
            Switches the view.
            </summary>
            <param name="increment">if set to <c>true</c> [increment].</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.ShowTickChanged(System.Boolean)">
            <summary>
            Shows the tick changed.
            </summary>
            <param name="newval">if set to <c>true</c> [newval].</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.SelectorChanged(XLabs.Forms.Controls.TemplateSelector)">
            <summary>
            Selectors the changed.
            </summary>
            <param name="newval">The newval.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.ViewModelsChanged(System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Views the models changed.
            </summary>
            <param name="oldval">The oldval.</param>
            <param name="newval">The newval.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.ViewModelCollectionContentsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Views the model collection contents changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.ShowTickchanged(Xamarin.Forms.BindableObject,System.Boolean,System.Boolean)">
            <summary>
            Shows the tickchanged.
            </summary>
            <param name="bo">The bo.</param>
            <param name="oldval">if set to <c>true</c> [oldval].</param>
            <param name="newval">if set to <c>true</c> [newval].</param>
            <exception cref="T:XLabs.Forms.Exceptions.InvalidBindableException"></exception>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.ViewModelsChanged(Xamarin.Forms.BindableObject,System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Views the models changed.
            </summary>
            <param name="bo">The bo.</param>
            <param name="oldval">The oldval.</param>
            <param name="newval">The newval.</param>
            <exception cref="T:XLabs.Forms.Exceptions.InvalidBindableException"></exception>
        </member>
        <member name="M:XLabs.Forms.Controls.CarouselView`1.TemplateSelectorChanged(Xamarin.Forms.BindableObject,XLabs.Forms.Controls.TemplateSelector,XLabs.Forms.Controls.TemplateSelector)">
            <summary>
            Templates the selector changed.
            </summary>
            <param name="bo">The bo.</param>
            <param name="oldval">The oldval.</param>
            <param name="newval">The newval.</param>
            <exception cref="T:XLabs.Forms.Exceptions.InvalidBindableException"></exception>
        </member>
        <member name="P:XLabs.Forms.Controls.CarouselView`1.ItemTemplateSelector">
            <summary>
            Gets or sets the item template selector.
            </summary>
            <value>The item template selector.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CarouselView`1.ShowTick">
            <summary>
            Show the tickboard.  The tickboard takes up 8dp vertically when shown.
            </summary>
            <value><c>true</c> if [show tick]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CarouselView`1.TickColor">
            <summary>
            The color for the Ticks
            </summary>
            <value>The color of the tick.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CarouselView`1.ViewModels">
            <summary>
            The collection of viewmodels to display in the carousel
            </summary>
            <value>The view models.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CarouselView`1.TemplateSelector">
            <summary>
            Used to match a type with a datatemplate
            <see cref="P:XLabs.Forms.Controls.CarouselView`1.TemplateSelector"/>
            </summary>
            <value>The template selector.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.CheckBox">
            <summary>
            The check box.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckBox.CheckedProperty">
            <summary>
            The checked state property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckBox.CheckedTextProperty">
            <summary>
            The checked text property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckBox.UncheckedTextProperty">
            <summary>
            The unchecked text property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckBox.DefaultTextProperty">
            <summary>
            The default text property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckBox.TextColorProperty">
            <summary>
            Identifies the TextColor bindable property.
            </summary>
            
            <remarks/>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckBox.FontSizeProperty">
            <summary>
            The font size property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckBox.FontNameProperty">
            <summary>
            The font name property.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CheckBox.OnCheckedPropertyChanged(Xamarin.Forms.BindableObject,System.Boolean,System.Boolean)">
            <summary>
            Called when [checked property changed].
            </summary>
            <param name="bindable">The bindable.</param>
            <param name="oldvalue">if set to <c>true</c> [oldvalue].</param>
            <param name="newvalue">if set to <c>true</c> [newvalue].</param>
        </member>
        <member name="E:XLabs.Forms.Controls.CheckBox.CheckedChanged">
            <summary>
            The checked changed event.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckBox.Checked">
            <summary>
            Gets or sets a value indicating whether the control is checked.
            </summary>
            <value>The checked state.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckBox.CheckedText">
            <summary>
            Gets or sets a value indicating the checked text.
            </summary>
            <value>The checked state.</value>
            <remarks>
            Overwrites the default text property if set when checkbox is checked.
            </remarks>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckBox.UncheckedText">
            <summary>
            Gets or sets a value indicating whether the control is checked.
            </summary>
            <value>The checked state.</value>
            <remarks>
            Overwrites the default text property if set when checkbox is checked.
            </remarks>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckBox.DefaultText">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckBox.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckBox.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckBox.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>The name of the font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckBox.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.CheckboxCell">
            <summary>
            Class CheckboxCell.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckboxCell.CheckedChanged">
            <summary>
            The checked changed
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckboxCell.CheckedProperty">
            <summary>
            The checked property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CheckboxCell._turnOnOnly">
            <summary>
            The turn on only
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CheckboxCell.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.CheckboxCell"/> class.
            </summary>
            <param name="turnOnOnly">if set to <c>true</c> [turn on only].</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CheckboxCell.HandleTapped(System.Object,System.EventArgs)">
            <summary>
            Handles the tapped.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CheckboxCell.RaiseCheckedChanged(System.Boolean)">
            <summary>
            Raises the checked changed.
            </summary>
            <param name="val">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:XLabs.Forms.Controls.CheckboxCell.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XLabs.Forms.Controls.CheckboxCell"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.CircleImage">
            <summary>
            Renders the supplied image in the source as a circle (or oval).
            Respects the aspect that is set on the view.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.CollectionChangedHandle`2">
            <summary>
            Small utility class that takes
            gyuwon's idea to it's logical 
            conclusion.
            The code in the ItemsCollectionChanged methods
            rarely changes.  The only real change is projecting 
            from source type T to targeted type TSyncType which
            is then inserted into the target collection
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CollectionChangedHandle`2.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0},System.Action{`0,`1,System.Int32},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.CollectionChangedHandle`2"/> class.
            </summary>
            <param name="target">The collection to be kept in sync with source</param>
            <param name="source">The original collection</param>
            <param name="projector">A function that returns {TSyncType} for a {T}</param>
            <param name="postadd">A functino called right after insertion into the synced collection</param>
            <param name="cleanup">A function that performs any needed cleanup when {TSyncType} is removed from the target</param>
        </member>
        <member name="M:XLabs.Forms.Controls.CollectionChangedHandle`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.CollectionChangedHandle`2.CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Keeps <see cref="F:XLabs.Forms.Controls.CollectionChangedHandle`2._target"/> in sync with <see cref="F:XLabs.Forms.Controls.CollectionChangedHandle`2._sourceCollection"/>.</summary>
            <param name="sender">The sender, completely ignored.</param>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            Element created at 15/11/2014,2:57 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.CollectionChangedHandle`2.InitialPopulation">
            <summary>Initials the population.</summary>
            Element created at 15/11/2014,2:53 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Controls.ContentControl">
            <summary>
            A view that renders its content based on a data template. Typical usage is to either set an explicit 
            <see cref="P:Xamarin.Forms.BindableObject.BindingContext"/> on this element or use an inhereted one, then set a display.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ContentControl.ContentTemplateProperty">
            <summary>
            The content template property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ContentControl.ContentTemplate">
            <summary>
            A <see cref="T:Xamarin.Forms.DataTemplate"/> used to render the view. This property is bindable.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.DataTemplateSelector">
            <summary>
            Class DataTemplateSelector.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.DataTemplateSelector.SelectTemplate(System.Object,Xamarin.Forms.BindableObject)">
            <summary>
            Selects the template.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The container.</param>
            <returns>DataTemplate.</returns>
        </member>
        <member name="T:XLabs.Forms.Controls.DataTemplateSelectorExtensions">
            <summary>
            Class DataTemplateSelectorExtensions.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.DataTemplateSelectorExtensions.CellFor(Xamarin.Forms.BindableObject,System.Object,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Cells for.
            </summary>
            <param name="This">The this.</param>
            <param name="item">The item.</param>
            <param name="selector">The selector.</param>
            <returns>Cell.</returns>
            <exception cref="T:System.InvalidOperationException">DataTemplate must be either a Cell or a View</exception>
        </member>
        <member name="M:XLabs.Forms.Controls.DataTemplateSelectorExtensions.ViewFor(Xamarin.Forms.BindableObject,System.Object,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Views for.
            </summary>
            <param name="This">The this.</param>
            <param name="item">The item.</param>
            <param name="selector">The selector.</param>
            <returns>View.</returns>
            <exception cref="T:System.InvalidOperationException">DataTemplate must be a View</exception>
        </member>
        <member name="T:XLabs.Forms.Controls.DragContentView">
            <summary>
            Class DragContentView.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.DynamicListView`1">
            <summary>
            The dynamic native list view.
            </summary>
            <typeparam name="T">
            Type of items in the list view
            </typeparam>
        </member>
        <member name="F:XLabs.Forms.Controls.DynamicListView`1._data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.DynamicListView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.DynamicListView`1"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.DynamicListView`1.Add(`0)">
            <summary>
            Add items to data collection.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:XLabs.Forms.Controls.DynamicListView`1.Replace(`0,`0)">
            <summary>
            Replaces an object in collection.
            </summary>
            <param name="original">
            The original object.
            </param>
            <param name="replacement">
            The replacement object.
            </param>
            <returns>
            <see cref="T:System.Boolean"/>, true if replacement was successful, false if original object was not found.
            </returns>
        </member>
        <member name="M:XLabs.Forms.Controls.DynamicListView`1.Remove(`0)">
            <summary>
            The remove item method.
            </summary>
            <param name="item">
            The item to remove.
            </param>
        </member>
        <member name="M:XLabs.Forms.Controls.DynamicListView`1.InvokeItemSelectedEvent(System.Object,`0)">
            <summary>
            Invokes the item selected event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="item">
            Item that was selected.
            </param>
        </member>
        <member name="E:XLabs.Forms.Controls.DynamicListView`1.OnSelected">
            <summary>
            Occurs when item is selected.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.DynamicListView`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.EditableListView`1">
            <summary>
            Class EditableListView.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XLabs.Forms.Controls.EditableListView`1.SourceProperty">
            <summary>
            The source property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.EditableListView`1.AddRowCommandProperty">
            <summary>
            The add row command property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.EditableListView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.EditableListView`1"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.EditableListView`1.ExecuteAddRow">
            <summary>
            Executes the add row.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.EditableListView`1.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.EditableListView`1.AddRowCommand">
            <summary>
            Gets or sets the add row command.
            </summary>
            <value>The add row command.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.EditableListView`1.CellHeight">
            <summary>
            Gets or sets the height of the cell.
            </summary>
            <value>The height of the cell.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.EditableListView`1.ViewType">
            <summary>
            Gets or sets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedButton">
            <summary>
            Extends <see cref="T:Xamarin.Forms.Button"/>.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedButton.VerticalContentAlignmentProperty">
            <summary>
            Bindable property for button content vertical alignment.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedButton.HorizontalContentAlignmentProperty">
            <summary>
            Bindable property for button content horizontal alignment.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedButton.VerticalContentAlignment">
            <summary>
            Gets or sets the content vertical alignment.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedButton.HorizontalContentAlignment">
            <summary>
            Gets or sets the content horizontal alignment.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedContentView">
            <summary>
            Extended content view.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedContentView.WidthRequestInInchesProperty">
            <summary>
            The width request in inches property.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedContentView.WidthRequestInInches">
            <summary>
            Gets or sets the width request in inches.
            </summary>
            <value>The width request in inches.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedContentView.HeightRequestInInches">
            <summary>
            Gets or sets the height request in inches.
            </summary>
            <value>The height request in inches.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedDatePicker">
            <summary>
            Class ExtendedDatePicker.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedDatePicker.HasBorderProperty">
            <summary>
            The HasBorder property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedDatePicker.HasBorder">
            <summary>
            Gets or sets if the border should be shown or not
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedEditor">
            <summary>
            Class ExtendedEditor.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ExtendedEditor"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEditor.FontProperty">
            <summary>
            The font property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEditor.LeftSwipe">
            <summary>
            The left swipe
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEditor.RightSwipe">
            <summary>
            The right swipe
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedEditor.OnLeftSwipe(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:LeftSwipe"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedEditor.OnRightSwipe(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:RightSwipe"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedEditor.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedEntry">
            <summary>
            An extended entry control that allows the Font and text X alignment to be set
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEntry.FontProperty">
            <summary>
            The font property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEntry.XAlignProperty">
            <summary>
            The XAlign property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEntry.HasBorderProperty">
            <summary>
            The HasBorder property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEntry.PlaceholderTextColorProperty">
            <summary>
            The PlaceholderTextColor property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEntry.MaxLengthProperty">
            <summary>
            The MaxLength property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEntry.LeftSwipe">
            <summary>
            The left swipe
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEntry.RightSwipe">
            <summary>
            The right swipe
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedEntry.MaxLength">
            <summary>
            Gets or sets the MaxLength
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedEntry.Font">
            <summary>
            Gets or sets the Font
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedEntry.XAlign">
            <summary>
            Gets or sets the X alignment of the text
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedEntry.HasBorder">
            <summary>
            Gets or sets if the border should be shown or not
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedEntry.PlaceholderTextColor">
            <summary>
            Sets color for placeholder text
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedEntryCell">
            <summary>
            An extended entry cell control that allows set IsPassword
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedEntryCell.IsPasswordProperty">
            <summary>
            The IsPassword property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedEntryCell.IsPassword">
            <summary>
            Gets or sets IsPassword 
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedLabel">
            <summary>
            Class ExtendedLabel.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ExtendedLabel"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.FontNameAndroidProperty">
            <summary>
            The font name android property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.FontNameIosProperty">
            <summary>
            The font name ios property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.FontNameProperty">
            <summary>
            The font name property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.FriendlyFontNameProperty">
            <summary>
            The friendly font name property. This can be found on the first line of the font or in the font preview. 
            This is only required on Windows Phone. If not given then the file name excl. the extension is used.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.IsUnderlineProperty">
            <summary>
            The is underlined property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.IsStrikeThroughProperty">
            <summary>
            The is underlined property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.IsDropShadowProperty">
            <summary>
            This is the drop shadow property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.DropShadowColorProperty">
            <summary>
            This is the drop shadow color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.PlaceholderProperty">
            <summary>
            The placeholder property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedLabel.FormattedPlaceholderProperty">
            <summary>
            The formatted placeholder property.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.FontNameAndroid">
            <summary>
            Gets or sets the font name android.
            </summary>
            <value>The font name android.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.FontNameIOS">
            <summary>
            Gets or sets the font name ios.
            </summary>
            <value>The font name ios.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.FontName">
            <summary>
            Gets or sets the name of the font file including extension. If no extension given then ttf is assumed.
            Fonts need to be included in projects accoring to the documentation.
            </summary>
            <value>The full name of the font file including extension.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.FriendlyFontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>The name of the font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.IsUnderline">
            <summary>
            Gets or sets a value indicating whether the text in the label is underlined.
            </summary>
            <value>A <see cref="T:System.Boolean"/> indicating if the text in the label should be underlined.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.IsStrikeThrough">
            <summary>
            Gets or sets a value indicating whether the text in the label is underlined.
            </summary>
            <value>A <see cref="T:System.Boolean"/> indicating if the text in the label should be underlined.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.IsDropShadow">
            <summary>
            Gets or sets a value indicating whether this instance is drop shadow.
            </summary>
            <value><c>true</c> if this instance is drop shadow; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.DropShadowColor">
            <summary>
            Gets or sets the color of the drop shadow.
            </summary>
            <value>The color of the drop shadow.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.Placeholder">
            <summary>
            Gets or sets the string value that is used when the label's Text property is empty.
            </summary>
            <value>The placeholder string.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedLabel.FormattedPlaceholder">
            <summary>
            Gets or sets the FormattedString value that is used when the label's Text property is empty.
            </summary>
            <value>The placeholder FormattedString.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedListView">
            <summary>
            Class ExtendedListView.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedListView.ItemTemplateSelectorProperty">
            <summary>
            The item template selector property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedListView.OnDataTemplateSelectorChanged(Xamarin.Forms.BindableObject,XLabs.Forms.Controls.DataTemplateSelector,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Called when [data template selector changed].
            </summary>
            <param name="bindable">The bindable.</param>
            <param name="oldvalue">The oldvalue.</param>
            <param name="newvalue">The newvalue.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedListView.OnDataTemplateSelectorChanged(XLabs.Forms.Controls.DataTemplateSelector,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Called when [data template selector changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <exception cref="T:System.ArgumentException">Cannot set both ItemTemplate and ItemTemplateSelector;ItemTemplateSelector</exception>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedListView.CreateDefault(System.Object)">
            <summary>
            Creates the default.
            </summary>
            <param name="item">The item.</param>
            <returns>Cell.</returns>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedListView.ItemTemplateSelector">
            <summary>
            Gets or sets the item template selector.
            </summary>
            <value>The item template selector.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedScrollView">
            <summary>
            Class ExtendedScrollView.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedScrollView.UpdateBounds(Xamarin.Forms.Rectangle)">
            <summary>
            Updates the bounds.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedScrollView.PositionProperty">
            <summary>
            The position property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedScrollView.AnimateScrollProperty">
            <summary>
            The animate scroll property
            </summary>
        </member>
        <member name="E:XLabs.Forms.Controls.ExtendedScrollView.Scrolled">
            <summary>
            Occurs when [scrolled].
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedScrollView.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedScrollView.AnimateScroll">
            <summary>
            Gets or sets a value indicating whether [animate scroll].
            </summary>
            <value><c>true</c> if [animate scroll]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedSlider">
            <summary>
            Class ExtendedSlider.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedSlider.CurrentStepValueProperty">
            <summary>
            The current step value property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedSlider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ExtendedSlider"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedSlider.OnSliderValueChanged(System.Object,Xamarin.Forms.ValueChangedEventArgs)">
            <summary>
            Handles the <see cref="E:SliderValueChanged"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.ValueChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedSlider.StepValue">
            <summary>
            Gets or sets the step value.
            </summary>
            <value>The step value.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedSwitch">
            <summary>
                Class ExtendedSwitch.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedSwitch.TintColorProperty">
            <summary>
                Identifies the Switch tint color bindable property.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedSwitch.TintColor">
            <summary>
                Gets or sets the color of the tint.
            </summary>
            <value>The color of the tint.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.CurrentPageChangingEventHandler">
            <summary>
                Delegate CurrentPageChangingEventHandler.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.CurrentPageChangedEventHandler">
            <summary>
            Delegate CurrentPageChangedEventHandler.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.SwipeLeftEventHandler">
            <summary>
            Delegate SwipeLeftEventHandler
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.SwipeRightEventHandler">
            <summary>
            Delegate SwipeRightEventHandler
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedTabbedPage">
            <summary>
                Class ExtendedTabbedPage.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTabbedPage.TintColorProperty">
            <summary>
            The tint color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTabbedPage.BarTintColorProperty">
            <summary>
            The bar tint color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTabbedPage.BadgesProperty">
            <summary>
            The badges property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTabbedPage.TabBarSelectedImageProperty">
            <summary>
            The tab bar selected image property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTabbedPage.TabBarBackgroundImageProperty">
            <summary>
            The tab bar background image property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTabbedPage.ItemTemplateSelectorProperty">
            <summary>
            The item template selector property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.OnDataTemplateSelectorChanged(XLabs.Forms.Controls.DataTemplateSelector,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Called when [data template selector changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <exception cref="T:System.ArgumentException">Cannot set both ItemTemplate and ItemTemplateSelector;ItemTemplateSelector</exception>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ExtendedTabbedPage"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.InvokeSwipeRightEvent(System.Object,System.Object)">
            <summary>
            Invokes the item SwipeRight event.
            </summary>
            <param name="sender"></param>
            <param name="item">Item.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.InvokeSwipeLeftEvent(System.Object,System.Object)">
            <summary>
            Invokes the SwipeLeft event.
            </summary>
            <param name="sender"></param>
            <param name="item">Item.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.OnPropertyChanging(System.Object,Xamarin.Forms.PropertyChangingEventArgs)">
            <summary>
            Handles the <see cref="E:PropertyChanging"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                Handles the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.SwipeLeft(System.Object,System.EventArgs)">
            <summary>
            Move to the previous Tabbed Page
            </summary>
            <param name="a"></param>
            <param name="e"></param>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.SwipeRight(System.Object,System.EventArgs)">
            <summary>
            Move to the next Tabbed Page
            </summary>
            <param name="a"></param>
            <param name="e"></param>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.RaiseCurrentPageChanging">
            <summary>
                Raises the current page changing.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.RaiseCurrentPageChanged">
            <summary>
                Raises the current page changed.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.NextPage">
            <summary>
            Move to the next page.
            Restart at the first page should you try 
            to move past the last page.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.PreviousPage">
            <summary>
            Move to the previous page.
            If you are on the first page then return 
            the last page in the list
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTabbedPage.CreateDefault(System.Object)">
            <summary>
            Creates the default.
            </summary>
            <param name="item">The item.</param>
            <returns>Page.</returns>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTabbedPage.ItemTemplateSelector">
            <summary>
            Gets or sets the item template selector.
            </summary>
            <value>The item template selector.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTabbedPage.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>The color of the tint.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTabbedPage.BarTintColor">
            <summary>
            Gets or sets the color of the bar tint.
            </summary>
            <value>The color of the bar tint.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTabbedPage.Badges">
            <summary>
            Gets or sets the badges.
            </summary>
            <value>The badges.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTabbedPage.TabBarSelectedImage">
            <summary>
            Gets or sets the tab bar selected image.
            </summary>
            <value>The tab bar selected image.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTabbedPage.TabBarBackgroundImage">
            <summary>
            Gets or sets the tab bar background image.
            </summary>
            <value>The tab bar background image.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTabbedPage.SwipeEnabled">
            <summary>
            Gets or sets a value indicating whether [swipe enabled].
            </summary>
            <value><c>true</c> if [swipe enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:XLabs.Forms.Controls.ExtendedTabbedPage.CurrentPageChanging">
            <summary>
                Occurs when [current page changing].
            </summary>
        </member>
        <member name="E:XLabs.Forms.Controls.ExtendedTabbedPage.CurrentPageChanged">
            <summary>
            Occurs when [current page changed].
            </summary>
        </member>
        <member name="E:XLabs.Forms.Controls.ExtendedTabbedPage.OnSwipeRight">
            <summary>
            Occurs when the TabbedPage is swipped Right
            </summary>
        </member>
        <member name="E:XLabs.Forms.Controls.ExtendedTabbedPage.OnSwipeLeft">
            <summary>
            Occurs when the TabbedPage is swipped Left
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedTableView">
            <summary>
            Class ExtendedTableView.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTableView.OnDataChanged">
            <summary>
            Called when [data changed].
            </summary>
        </member>
        <member name="E:XLabs.Forms.Controls.ExtendedTableView.DataChanged">
            <summary>
            Occurs when [data changed].
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedTimePicker">
            <summary>
            Class ExtendedTimePicker.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedTimePicker.HasBorderProperty">
            <summary>
            The HasBorder property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedTimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ExtendedTimePicker"/> class.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedTimePicker.HasBorder">
            <summary>
            Gets or sets if the border should be shown or not
            </summary>
            <value><c>true</c> if this instance has border; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedViewCell">
            <summary>
            Class ExtendedViewCell.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedViewCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ExtendedViewCell"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedViewCell.BackgroundColorProperty">
            <summary>
            The background color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedViewCell.SeparatorColorProperty">
            <summary>
            The separator color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedViewCell.SeparatorPaddingProperty">
            <summary>
            The separator padding property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedViewCell.ShowSeparatorProperty">
            <summary>
            The show separator property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedViewCell.ShowDisclousureProperty">
            <summary>
            The show disclousure property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedViewCell.DisclousureImageProperty">
            <summary>
            The disclousure image property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedViewCell.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedViewCell.SeparatorColor">
            <summary>
            Gets or sets the color of the separator.
            </summary>
            <value>The color of the separator.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedViewCell.SeparatorPadding">
            <summary>
            Gets or sets the separator padding.
            </summary>
            <value>The separator padding.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedViewCell.ShowSeparator">
            <summary>
            Gets or sets a value indicating whether [show separator].
            </summary>
            <value><c>true</c> if [show separator]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedViewCell.ShowDisclousure">
            <summary>
            Gets or sets a value indicating whether [show disclousure].
            </summary>
            <value><c>true</c> if [show disclousure]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedViewCell.DisclousureImage">
            <summary>
            Gets or sets the disclousure image.
            </summary>
            <value>The disclousure image.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.GesturesContentView">
            <summary>
            Uses attached properties to
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GesturesContentView.AccuracyProperty">
            <summary>
            Property Definition for the <see cref="P:XLabs.Forms.Controls.GesturesContentView.Accuracy"/> Property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GesturesContentView.MinimumSwipeLengthProperty">
            <summary>
            Property Definition for the Bindable <see cref="P:XLabs.Forms.Controls.GesturesContentView.MinimumSwipeLength"/> property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GesturesContentView.ExcludeChildrenProperty">
            <summary>
            Property Definition for the exclude children property
            </summary>
            Element created at 08/11/2014,12:45 AM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.GesturesContentView.RegisterInterests(Xamarin.Forms.View,System.Collections.Generic.IEnumerable{XLabs.Forms.Behaviors.GestureInterest})">
            <summary>
            Utility function to locate a specific interest
            </summary>
            <param name="view">The view that has the interest</param>
            <param name="interestedin">The collection of <see cref="T:XLabs.Forms.Behaviors.GestureInterest"/></param>
            <returns>A <see cref="T:XLabs.Forms.Controls.GesturesContentView.ViewInterest"/></returns>
        </member>
        <member name="M:XLabs.Forms.Controls.GesturesContentView.ProcessGesture(XLabs.Forms.Behaviors.GestureResult)">
            <summary>
            Used by <see cref="T:XLabs.Forms.Controls.GesturesContentView"/>.
            </summary>
            <param name="gesture">The resulting gesture<see cref="T:XLabs.Forms.Behaviors.GestureResult"/></param>
            <returns>True if the gesture was handled,false otherwise</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.GesturesContentView.InterestedView(Xamarin.Forms.Point)">
            <summary>
            For now only consider the origin point.
            Once the kinks are worked out switch to a
            closest approach based on nearest point intersection
            ordering by area on the presumption that the smallest
            view will be the innermost
            </summary>
            <param name="point">The origin point of the gesture</param>
            <returns></returns>
        </member>
        <member name="P:XLabs.Forms.Controls.GesturesContentView.ExcludeChildren">
            <summary>
            Gets or sets a value indicating whether or not to exclude children views.
            If set then children views cannot be the source of a gesture.
            If not set than all children views can be the source of a gesture
            ie: The gesture will bubble up
            </summary>
            <value><c>true</c> if [exclude children]; otherwise, <c>false</c>.</value>
            Element created at 08/11/2014,12:46 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Controls.GesturesContentView.MinimumSwipeLength">
            <summary>
            The minimum gesture length to be considered a valid swipe
            Default value is 25
            Minimum value is 10 there is no predefined maximum
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.GesturesContentView.Accuracy">
            <summary>
            The maximum distance a gesture origin point can be from
            an interested view.  ie: How close the user must be to the view
            Minimum value is 5 maximum is 25
            </summary>
        </member>
        <member name="E:XLabs.Forms.Controls.GesturesContentView.GestureRecognized">
            <summary>
            Event that can be hooked from codebehind files.
            When invoked the sender is the view where the gesture originated.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.GesturesContentView.ViewInterest">
            <summary>
            Class used to record a view's interest in a gesture
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.GestureNotification">
            <summary>
            How should the user be notified that a
            gesture has been recognized
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureNotification.None">
            <summary>
            No notification
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureNotification.Vibrate">
            <summary>
            A short vibration of
            the device
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.Directionality">
            <summary>
            For swipe gestures determines the general
            direction of the swipe
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Directionality.None">
            <summary>
            No direction
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Directionality.Left">
            <summary>
            Swiping from Right to Left
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Directionality.Right">
            <summary>
            Swiping from Left to Right
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Directionality.Up">
            <summary>
            Swiping from Bottom to Top
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Directionality.Down">
            <summary>
            Swiping from Top to Bottom
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Directionality.HorizontalMask">
            <summary>
            Mask to isolate the Horizontal component
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Directionality.VerticalMask">
            <summary>
            Mask to isolate the Vertical component
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.GestureType">
            <summary>
            The base supported gestures
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.Unknown">
            <summary>
            No Gesture
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.SingleTap">
            <summary>
            Single tap
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.DoubleTap">
            <summary>
            Double Tap
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.LongPress">
            <summary>
            LongPress
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.Swipe">
            <summary>
            Swipe, Swipe is combined with Directionality to support:
            SwipeLeft
            SwipeRight
            SwipeUp
            SwipeDown
            It is very possible for a single swipe action to trigger two Swipe events:
            ie:  SwipeUp and SwipeLeft
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.Pinch">
            <summary>
            2 finger pinch.  Origin2 will contain the location of the second finger.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.Move">
            <summary>
            1 finger move
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.Up">
            <summary>
            All up events send this geture.  It can be ignored except for when you want to detect the end of a Pinch or Move.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GestureType.Down">
            <summary>
            All down events send this geture.  It can be ignored except for when you want to detect when the user start touching the screen.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.GradientOrientation">
            <summary>
            Enum GradientOrientation
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GradientOrientation.Vertical">
            <summary>
            The vertical
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GradientOrientation.Horizontal">
            <summary>
            The horizontal
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.GradientContentView">
            <summary>
            ContentView that allows you to have a Gradient for
            the background. Let there be Gradients!
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GradientContentView.OrientationProperty">
            <summary>
            The orientation property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GradientContentView.StartColorProperty">
            <summary>
            Using a BindableProperty as the backing store for StartColor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GradientContentView.EndColorProperty">
            <summary>
            Using a BindableProperty as the backing store for EndColor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.GradientContentView.Orientation">
            <summary>
            Start color of the gradient
            Defaults to White
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.GradientContentView.StartColor">
            <summary>
            Start color of the gradient
            Defaults to White
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.GradientContentView.EndColor">
            <summary>
            End color of the gradient
            Defaults to Black
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.GridView">
            <summary>
            Class GridView.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.GridView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.GridView"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GridView.ItemsSourceProperty">
            <summary>
            The items source property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GridView.ItemTemplateProperty">
            <summary>
            The item template property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GridView.RowSpacingProperty">
            <summary>
            The row spacing property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GridView.ColumnSpacingProperty">
            <summary>
            The column spacing property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GridView.ItemWidthProperty">
            <summary>
            The item width property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.GridView.ItemHeightProperty">
            <summary>
            The item height property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.GridView.InvokeItemSelectedEvent(System.Object,System.Object)">
            <summary>
            Invokes the item selected event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="item">Item.</param>
        </member>
        <member name="P:XLabs.Forms.Controls.GridView.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.GridView.ItemTemplate">
            <summary>
            Gets or sets the item template.
            </summary>
            <value>The item template.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.GridView.RowSpacing">
            <summary>
            Gets or sets the row spacing.
            </summary>
            <value>The row spacing.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.GridView.ColumnSpacing">
            <summary>
            Gets or sets the column spacing.
            </summary>
            <value>The column spacing.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.GridView.ItemWidth">
            <summary>
            Gets or sets the width of the item.
            </summary>
            <value>The width of the item.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.GridView.ItemHeight">
            <summary>
            Gets or sets the height of the item.
            </summary>
            <value>The height of the item.</value>
        </member>
        <member name="E:XLabs.Forms.Controls.GridView.ItemSelected">
            <summary>
            Occurs when item is selected.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.GridView.SelectionEnabled">
            <summary>
            Gets or sets a value indicating whether [selection enabled].
            </summary>
            <value><c>true</c> if [selection enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.HybridWebView">
            <summary>
            The hybrid web view.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.UriProperty">
            <summary>
            The uri property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.SourceProperty">
            <summary>
            The source property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.CleanupProperty">
            <summary>
            Boolean to indicate cleanup has been called.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.JavaScriptLoadRequested">
            <summary>
            The java script load requested
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.LeftSwipe">
            <summary>
            The left swipe
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.LoadContentRequested">
            <summary>
            The load content requested
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.LoadFinished">
            <summary>
            The load finished
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.LoadFromContentRequested">
            <summary>
            The load from content requested
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.Navigating">
            <summary>
            The navigating
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.RightSwipe">
            <summary>
            The right swipe
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.injectLock">
            <summary>
            The inject lock.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.jsonSerializer">
            <summary>
            The JSON serializer.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.registeredActions">
            <summary>
            The registered actions.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HybridWebView.registeredFunctions">
            <summary>
            The registered actions.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.HybridWebView"/> class.
            </summary>
            <exception cref="T:System.Exception">Exception when there is no <see cref="T:XLabs.Serialization.IJsonSerializer"/> implementation registered.</exception>
            <remarks>HybridWebView will use <see cref="T:XLabs.Serialization.IJsonSerializer"/> configured
            with <see cref="T:XLabs.Ioc.Resolver"/> or <see cref="T:Xamarin.Forms.DependencyService"/>. System JSON serializer was removed due to Xamarin
            requirement of having a business license or higher.</remarks>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.#ctor(XLabs.Serialization.IJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.HybridWebView"/> class.
            </summary>
            <param name="jsonSerializer">The JSON serializer.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.RegisterCallback(System.String,System.Action{System.String})">
            <summary>
            Registers a native callback.
            </summary>
            <param name="name">The name.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.RemoveCallback(System.String)">
            <summary>
            Removes a native callback.
            </summary>
            <param name="name">The name of the callback.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.RegisterNativeFunction(System.String,System.Func{System.String,System.Object[]})">
            <summary>
            Registers a native callback and returns data to closure.
            </summary>
            <param name="name">The name.</param>
            <param name="func">The function.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.RegisterNativeFunction(System.String)">
            <summary>
            Removes a native callback function.
            </summary>
            <param name="name">The name of the callback.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.LoadFromContent(System.String,System.String)">
            <summary>
            Loads from file.
            </summary>
            <param name="contentFullName">Full name of the content.</param>
            <param name="baseUri">Optional base Uri to use for resources.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.LoadContent(System.String,System.String)">
            <summary>
            Loads the content from string content.
            </summary>
            <param name="content">The content.</param>
            <param name="baseUri">Optional base Uri to use for resources.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.InjectJavaScript(System.String)">
            <summary>
            Injects the java script.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.CallJsFunction(System.String,System.Object[])">
            <summary>
            Calls the js function.
            </summary>
            <param name="funcName">Name of the function.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.TryGetAction(System.String,System.Action{System.String}@)">
            <summary>
            Tries the get action.
            </summary>
            <param name="name">The name.</param>
            <param name="action">The action.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.TryGetFunc(System.String,System.Func{System.String,System.Object[]}@)">
            <summary>
            Tries the get function.
            </summary>
            <param name="name">The name.</param>
            <param name="func">The function.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.OnLoadFinished(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:LoadFinished"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.OnLeftSwipe(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:LeftSwipe"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.OnRightSwipe(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:RightSwipe"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.OnNavigating(System.Uri)">
            <summary>
            Called when [navigating].
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.RemoveAllCallbacks">
            <summary>
            Remove all Callbacks from this view
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.RemoveAllFunctions">
            <summary>
            Remove all Functions from this view
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.HybridWebView.Cleanup">
            <summary>
             Called to immediately free the native web view and 
            disconnect all callbacks
            Note that this web view object will no longer be usable 
            after this call!
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.HybridWebView.Uri">
            <summary>
            Gets or sets the uri.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.HybridWebView.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.HybridWebView.CleanupCalled">
            <summary>
            Gets or sets the cleanup called flag.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.HybridWebView.Message">
            <summary>
            Message class for transporting JSON objects.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.HyperLinkLabel">
            <summary>
            Class HyperLinkLabel.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HyperLinkLabel.SubjectProperty">
            <summary>
            The subject property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.HyperLinkLabel.NavigateUriProperty">
            <summary>
            The navigate URI property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.HyperLinkLabel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:XLabs.Forms.Controls.HyperLinkLabel"/> class.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.HyperLinkLabel.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.HyperLinkLabel.NavigateUri">
            <summary>
            Gets or sets the navigate URI.
            </summary>
            <value>The navigate URI.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.IAutoCompleteSearchObject">
            <summary>
            Define the interface AutoCompleteSearchObject.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.IAutoCompleteSearchObject.StringToSearchBy">
            <summary>
            Strings to search by.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:XLabs.Forms.Controls.ICarouselView">
            <summary>
            An interface carousel views can
            implement to receive
            lifetime event notifications
            </summary>
            Element created at 15/11/2014,3:36 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.ICarouselView.Showing">
            <summary>The view is about to be shown</summary>
            Element created at 15/11/2014,3:36 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.ICarouselView.Shown">
            <summary>The view has been shown</summary>
            Element created at 15/11/2014,3:37 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.ICarouselView.Hiding">
            <summary>The view is about to be hiden</summary>
            Element created at 15/11/2014,3:37 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.ICarouselView.Hiden">
            <summary>The view has been hiden</summary>
            Element created at 15/11/2014,3:37 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Controls.IconButton">
            <summary>
            Creates a button with text and a FontAwesome icon
            The icon can be on the left, above, on the right or below the text.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconButton.TextAlignementProperty">
            <summary>
            Backing field for the orientation property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconButton.OrientationProperty">
            <summary>
            Backing field for the orientation property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconButton.IconProperty">
            <summary>
            Backing field for the icon property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconButton.ShowIconSeparatorProperty">
            <summary>
            Backing field for the ShowIconSeparator property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconButton.IconColorProperty">
            <summary>
            Backing field for the icon color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconButton.IconSizeProperty">
            <summary>
            Backing field for the icon size property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconButton.IconFontNameProperty">
            <summary>
            Backing field for the icon font name property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.IconButton.TextAlignement">
            <summary>
            Gets or sets The TextAlignment of both icon and text relative to container.
            </summary> 
            <value>
            The Orientation property gets/sets the value of the backing field, OrientationProperty.
            </value> 
        </member>
        <member name="P:XLabs.Forms.Controls.IconButton.Orientation">
            <summary>
            Gets or sets The orientation of the image relative to the text.
            </summary> 
            <remarks>
            On iOS only left and right are supported
            </remarks>
            <value>
            The Orientation property gets/sets the value of the backing field, OrientationProperty.
            </value> 
        </member>
        <member name="P:XLabs.Forms.Controls.IconButton.Icon">
            <summary>
            Gets or sets the icon. A set of FontAwesome icons have been included in <see cref="T:XLabs.Icons"/>, and
            more can be added from the FontAwesome cheatsheet (http://fortawesome.github.io/Font-Awesome/cheatsheet/)
            </summary>
            <remarks>
            The icon string should be this form : "\uf242"
            </remarks>
            <value>
            The Icon property gets/sets the value of the backing field, IconProperty
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.IconButton.ShowIconSeparator">
            <summary>
            Indicate if | separator must be place between the icon and the text
            </summary>
            <value>
            
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.IconButton.IconColor">
            <summary>
            Gets or sets the icon's color
            </summary>
            <value>
            The IconColor property gets/sets the value of the backing field, IconColorProperty
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.IconButton.IconSize">
            <summary>
            Gets or set's the font size of the icon
            </summary>
            <value>
            The IconSize property gets/sets the value of the backing field, IconSizeProperty
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.IconButton.IconFontName">
            <summary>
            Gets or set's the font name for the icon - currently this will default to using the FontAwesome font (http://fortawesome.github.io/Font-Awesome/cheatsheet/).
            Be sure that the fontawesome-webfont.ttf is in your iOS project's Resources folder, and that the build action for it is set to Bundle Resource and Copy Always to Output.
            Also, an entry to your iOS's info.plist must be made. If you are using Visual Studio 2013, this can be done manually by editing the info.plist as XML. Simply add an entry
            like this inside of the <dict></dict> element:
            
            <key>UIAppFonts</key>
            <array>
                <string>Fonts/Roboto-Light.ttf</string> <!-- Inside the Resources/Fonts folder -->
                <string>Fonts/fontawesome-webfont.ttf</string> <!-- Inside the Resources/Fonts folder -->
                <string>AnotherFont.ttf</string> <!-- Inside the Resources folder -->
            </array>
            
            </summary>
            <value>
            The IconFontName property gets/sets the value of the backing field, IconFontNameProperty
            </value>
        </member>
        <member name="F:XLabs.Forms.Controls.IconLabel.TextAlignementProperty">
            <summary>
            Backing field for the orientation property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconLabel.OrientationProperty">
            <summary>
            Backing field for the orientation property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconLabel.IconProperty">
            <summary>
            Backing field for the icon property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconLabel.ShowIconSeparatorProperty">
            <summary>
            Backing field for the ShowIconSeparator property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconLabel.IconColorProperty">
            <summary>
            Backing field for the icon color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconLabel.IconSizeProperty">
            <summary>
            Backing field for the icon size property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.IconLabel.IconFontNameProperty">
            <summary>
            Backing field for the icon font name property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.IconLabel.TextAlignement">
            <summary>
            Gets or sets The TextAlignment of both icon and text relative to container.
            </summary> 
            <value>
            The TextAlignment property gets/sets the value of the backing field, OrientationProperty.
            </value> 
        </member>
        <member name="P:XLabs.Forms.Controls.IconLabel.Orientation">
            <summary>
            Gets or sets The orientation of the icon relative to the text.
            </summary> 
            <remarks>
            On iOS only left and right are supported
            </remarks>
            <value>
            The Orientation property gets/sets the value of the backing field, OrientationProperty.
            </value> 
        </member>
        <member name="P:XLabs.Forms.Controls.IconLabel.Icon">
            <summary>
            Gets or sets the icon. A set of FontAwesome icons have been included in <see cref="T:XLabs.Icons"/>, and
            more can be added from the FontAwesome cheatsheet (http://fortawesome.github.io/Font-Awesome/cheatsheet/)
            </summary>
            <remarks>
            The icon string should be this form : "\uf242"
            </remarks>
            <value>
            The Icon property gets/sets the value of the backing field, IconProperty
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.IconLabel.ShowIconSeparator">
            <summary>
            Indicate if | separator must be place between the icon and the text
            </summary>
            <value>
            
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.IconLabel.IconColor">
            <summary>
            Gets or sets the icon's color
            </summary>
            <value>
            The IconColor property gets/sets the value of the backing field, IconColorProperty
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.IconLabel.IconSize">
            <summary>
            Gets or set's the font size of the icon
            </summary>
            <value>
            The IconSize property gets/sets the value of the backing field, IconSizeProperty
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.IconLabel.IconFontName">
            <summary>
            Gets or set's the font name for the icon - currently this will default to using the FontAwesome font (http://fortawesome.github.io/Font-Awesome/cheatsheet/).
            Be sure that the fontawesome-webfont.ttf is in your iOS project's Resources folder, and that the build action for it is set to Bundle Resource and Copy Always to Output.
            Also, an entry to your iOS's info.plist must be made. If you are using Visual Studio 2013, this can be done manually by editing the info.plist as XML. Simply add an entry
            like this inside of the <dict></dict> element:
            
            <key>UIAppFonts</key>
            <array>
                <string>Fonts/Roboto-Light.ttf</string> <!-- Inside the Resources/Fonts folder -->
                <string>Fonts/fontawesome-webfont.ttf</string> <!-- Inside the Resources/Fonts folder -->
                <string>AnotherFont.ttf</string> <!-- Inside the Resources folder -->
            </array>
            
            </summary>
            <value>
            The IconFontName property gets/sets the value of the backing field, IconFontNameProperty
            </value>
        </member>
        <member name="T:XLabs.Forms.Controls.ImageButton">
            <summary>
            Creates a button with text and an image.
            The image can be on the left, above, on the right or below the text.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageButton.SourceProperty">
            <summary>
            Backing field for the Image property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageButton.DisabledSourceProperty">
            <summary>
            Backing field for the Image property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageButton.ImageWidthRequestProperty">
            <summary>
            Backing field for the image width property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageButton.ImageHeightRequestProperty">
            <summary>
            Backing field for the image height property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageButton.OrientationProperty">
            <summary>
            Backing field for the orientation property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageButton.ImageTintColorProperty">
            <summary>
            Backing field for the tint color property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageButton.DisabledImageTintColorProperty">
            <summary>
            Backing field for the disbaled tint color property.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ImageButton.Source">
            <summary>
            Gets or sets the ImageSource to use with the control.
            </summary>
            <value>
            The Source property gets/sets the value of the backing field, SourceProperty.
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.ImageButton.DisabledSource">
            <summary>
            Gets or sets the ImageSource to use with the control.
            </summary>
            <value>
            The Source property gets/sets the value of the backing field, SourceProperty.
            </value>
        </member>
        <member name="P:XLabs.Forms.Controls.ImageButton.Orientation">
            <summary>
            Gets or sets The orientation of the image relative to the text.
            </summary> 
            <value>
            The Orientation property gets/sets the value of the backing field, OrientationProperty.
            </value> 
        </member>
        <member name="P:XLabs.Forms.Controls.ImageButton.ImageHeightRequest">
            <summary>
            Gets or sets the requested height of the image.  If less than or equal to zero than a 
            height of 50 will be used.
            </summary>
            <value>
            The ImageHeightRequest property gets/sets the value of the backing field, ImageHeightRequestProperty.
            </value> 
        </member>
        <member name="P:XLabs.Forms.Controls.ImageButton.ImageWidthRequest">
            <summary>
            Gets or sets the requested width of the image.  If less than or equal to zero than a 
            width of 50 will be used.
            </summary>
            <value>
            The ImageHeightRequest property gets/sets the value of the backing field, ImageHeightRequestProperty.
            </value> 
        </member>
        <member name="P:XLabs.Forms.Controls.ImageButton.ImageTintColor">
            <summary>
            Gets or sets the tint color of the image 
            </summary>
            <value>
            The ImageTintColor property gets/sets the value of the backing field, ImageTintColorProperty.
            </value> 
        </member>
        <member name="P:XLabs.Forms.Controls.ImageButton.DisabledImageTintColor">
            <summary>
            Gets or sets the tint color of the image when the button is disabled
            </summary>
            <value>
            The DisabledImageTintColor property gets/sets the value of the backing field, DisabledImageTintColorProperty.
            </value> 
        </member>
        <member name="T:XLabs.Forms.Controls.ImageSourceConverter">
            <summary>
            Creates an <see cref="T:Xamarin.Forms.ImageSource"/> from the a string
            that is either a file or a URI.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ImageSourceConverter.CanConvertFrom(System.Type)">
            <summary>
            Checks to see if the type attempted to be converted from is a string.
            </summary>
            <param name="sourceType">The type that is attempting to be converted.</param>
            <returns>Returns true if the sourceType is a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.ImageSourceConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the string value into a <see cref="T:Xamarin.Forms.ImageSource"/> either from a file or URI.
            </summary>
            <param name="culture">The current culture being used.</param>
            <param name="value">The string value to convert.</param>
            <returns>Returns a <see cref="T:Xamarin.Forms.ImageSource"/> loaded from the value.</returns>
        </member>
        <member name="T:XLabs.Forms.Controls.ImageGallery">
            <summary>
            Class ImageGallery.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ImageGallery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.ImageGallery"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageGallery.ItemsSourceProperty">
            <summary>
            The items source property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ImageGallery.ItemTemplateProperty">
            <summary>
            The item template property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ImageGallery.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ImageGallery.ItemTemplate">
            <summary>
            Gets or sets the item template.
            </summary>
            <value>The item template.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.PopupLayout">
            <summary>
                Class PopupLayout.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.PopupLayout.content">
            <summary>
            The content
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.PopupLayout.popup">
            <summary>
            The popup
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.PopupLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.PopupLayout"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.PopupLayout.ShowPopup(Xamarin.Forms.View)">
            <summary>
            Shows the popup centered to the parent view.
            </summary>
            <param name="popupView">The popup view.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.PopupLayout.ShowPopup(Xamarin.Forms.View,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint)">
            <summary>
            Shows the popup with constraints.
            </summary>
            <param name="popupView">The popup view.</param>
            <param name="xConstraint">X constraint.</param>
            <param name="yConstraint">Y constraint.</param>
            <param name="widthConstraint">Optional width constraint.</param>
            <param name="heightConstraint">Optional height constraint.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.PopupLayout.ShowPopup(Xamarin.Forms.View,Xamarin.Forms.View,XLabs.Forms.Controls.PopupLayout.PopupLocation,System.Single,System.Single)">
            <summary>
            Shows the popup.
            </summary>
            <param name="popupView">The popup view.</param>
            <param name="presenter">The presenter.</param>
            <param name="location">The location.</param>
            <param name="paddingX">The padding x.</param>
            <param name="paddingY">The padding y.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.PopupLayout.DismissPopup">
            <summary>
            Dismisses the popup.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.PopupLayout.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.PopupLayout.IsPopupActive">
            <summary>
            Gets a value indicating whether this instance is popup active.
            </summary>
            <value><c>true</c> if this instance is popup active; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.PopupLayout.PopupLocation">
            <summary>
            Popup location options when relative to another view
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.PopupLayout.PopupLocation.Top">
            <summary>
                Will show popup on top of the specified view
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.PopupLayout.PopupLocation.Bottom">
            <summary>
                Will show popup below of the specified view
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.BindableRadioGroup">
            <summary>
            Class BindableRadioGroup.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindableRadioGroup.Items">
            <summary>
            The items
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.BindableRadioGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.BindableRadioGroup"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindableRadioGroup.ItemsSourceProperty">
            <summary>
            The items source property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindableRadioGroup.SelectedIndexProperty">
            <summary>
            The selected index property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindableRadioGroup.TextColorProperty">
            <summary>
            The text color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindableRadioGroup.FontSizeProperty">
            <summary>
            The font size property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.BindableRadioGroup.FontNameProperty">
            <summary>
            The font name property.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.BindableRadioGroup.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindableRadioGroup.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindableRadioGroup.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindableRadioGroup.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.BindableRadioGroup.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>The name of the font.</value>
        </member>
        <member name="E:XLabs.Forms.Controls.BindableRadioGroup.CheckedChanged">
            <summary>
            Occurs when [checked changed].
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.CustomRadioButton">
            <summary>
            Class CustomRadioButton.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CustomRadioButton.CheckedProperty">
            <summary>
            The checked property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CustomRadioButton.TextProperty">
            <summary>
                The default text property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CustomRadioButton.TextColorProperty">
            <summary>
                The default text property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CustomRadioButton.FontSizeProperty">
            <summary>
            The font size property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CustomRadioButton.FontNameProperty">
            <summary>
            The font name property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.CustomRadioButton.CheckedChanged">
            <summary>
                The checked changed event.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.CustomRadioButton.Checked">
            <summary>
                Gets or sets a value indicating whether the control is checked.
            </summary>
            <value>The checked state.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CustomRadioButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CustomRadioButton.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CustomRadioButton.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CustomRadioButton.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>The name of the font.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.CustomRadioButton.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.RepeaterView`1">
            <summary>
            Low cost control to display a set of clickable items
            </summary>
            <typeparam name="T">The Type of viewmodel</typeparam>
        </member>
        <member name="F:XLabs.Forms.Controls.RepeaterView`1.ItemTemplateProperty">
            <summary>
            Definition for <see cref="P:XLabs.Forms.Controls.RepeaterView`1.ItemTemplate"/>
            </summary>
            Element created at 15/11/2014,3:11 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Controls.RepeaterView`1.ItemsSourceProperty">
            <summary>
            Definition for <see cref="P:XLabs.Forms.Controls.RepeaterView`1.ItemsSource"/>
            </summary>
            Element created at 15/11/2014,3:11 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Controls.RepeaterView`1.ItemClickCommandProperty">
            <summary>
            Definition for <see cref="P:XLabs.Forms.Controls.RepeaterView`1.ItemClickCommand"/>
            </summary>
            Element created at 15/11/2014,3:11 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Controls.RepeaterView`1.TemplateSelectorProperty">
            <summary>
            Definition for <see cref="P:XLabs.Forms.Controls.RepeaterView`1.TemplateSelector"/>
            </summary>
            Element created at 15/11/2014,3:12 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Controls.RepeaterView`1.ItemTemplateSelectorProperty">
            <summary>
            The item template selector property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.RepeaterView`1.OnDataTemplateSelectorChanged(XLabs.Forms.Controls.DataTemplateSelector,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Called when [data template selector changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <exception cref="T:System.ArgumentException">Cannot set both ItemTemplate and ItemTemplateSelector;ItemTemplateSelector</exception>
        </member>
        <member name="F:XLabs.Forms.Controls.RepeaterView`1._collectionChangedHandle">
            <summary>
            The Collection changed handler
            </summary>
            Element created at 15/11/2014,3:13 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.RepeaterView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.RepeaterView`1"/> class.
            </summary>
            Element created at 15/11/2014,3:13 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.RepeaterView`1.NotifyItemAdded(Xamarin.Forms.View,`0)">
            <summary>
            Gives codebehind a chance to play with the
            newly created view object :D
            </summary>
            <param name="view">The visual view object</param>
            <param name="model">The item being added</param>
        </member>
        <member name="M:XLabs.Forms.Controls.RepeaterView`1.GetTemplateFor(System.Type)">
            <summary>
            Select a datatemplate dynamically
            Prefer the TemplateSelector then the DataTemplate
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XLabs.Forms.Controls.RepeaterView`1.ViewFor(`0)">
             <summary>
             Creates a view based on the items type
             While we do have T, T could very well be
             a common superclass or an interface by
             using the items actual type we support
             both inheritance based polymorphism
             and shape based polymorphism
            
             </summary>
             <param name="item"></param>
             <returns>A <see cref="T:Xamarin.Forms.View"/> item as it's BindingContext</returns>
             <exception cref="T:XLabs.Exceptions.InvalidVisualObjectException"></exception>Thrown when the matched datatemplate inflates to an object not derived from either
             <see cref="T:Xamarin.Forms.View"/> or <see cref="T:Xamarin.Forms.ViewCell"/>
        </member>
        <member name="M:XLabs.Forms.Controls.RepeaterView`1.ItemsChanged(Xamarin.Forms.BindableObject,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Reset the collection of bound objects
            Remove the old collection changed eventhandler (if any)
            Create new cells for each new item
            </summary>
            <param name="bindable">The control</param>
            <param name="oldValue">Previous bound collection</param>
            <param name="newValue">New bound collection</param>
        </member>
        <member name="P:XLabs.Forms.Controls.RepeaterView`1.ItemTemplateSelector">
            <summary>
            Gets or sets the item template selector.
            </summary>
            <value>The item template selector.</value>
        </member>
        <member name="E:XLabs.Forms.Controls.RepeaterView`1.ItemCreated">
            <summary>Occurs when a view has been created.</summary>
            Element created at 15/11/2014,3:13 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Controls.RepeaterView`1.ItemsSource">
            <summary>Gets or sets the items source.</summary>
            <value>The items source.</value>
            Element created at 15/11/2014,3:13 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Controls.RepeaterView`1.TemplateSelector">
            <summary>Gets or sets the template selector.</summary>
            <value>The template selector.</value>
            Element created at 15/11/2014,3:13 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Controls.RepeaterView`1.ItemClickCommand">
            <summary>Gets or sets the item click command.</summary>
            <value>The item click command.</value>
            Element created at 15/11/2014,3:13 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Controls.RepeaterView`1.ItemTemplate">
            <summary>
            The item template property
            This can be used on it's own or in combination with 
            the <see cref="P:XLabs.Forms.Controls.RepeaterView`1.TemplateSelector"/>
            </summary>
            Element created at 15/11/2014,3:10 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Controls.RepeaterView`1.RepeaterViewItemAddedEventHandler">
            <summary>
            Event delegate definition fo the <see cref="E:XLabs.Forms.Controls.RepeaterView`1.ItemCreated"/> event
            </summary>
            <param name="sender">The sender(this).</param>
            <param name="args">The <see cref="T:XLabs.Forms.Controls.RepeaterViewItemAddedEventArgs"/> instance containing the event data.</param>
            Element created at 15/11/2014,3:12 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Controls.RepeaterViewItemAddedEventArgs">
            <summary>
            Argument for the <see cref="E:XLabs.Forms.Controls.RepeaterView`1.ItemCreated"/> event
            </summary>
            Element created at 15/11/2014,3:13 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Controls.RepeaterViewItemAddedEventArgs.#ctor(Xamarin.Forms.View,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.RepeaterViewItemAddedEventArgs"/> class.
            </summary>
            <param name="view">The view.</param>
            <param name="model">The model.</param>
            Element created at 15/11/2014,3:14 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Controls.RepeaterViewItemAddedEventArgs.View">
            <summary>Gets or sets the view.</summary>
            <value>The visual element.</value>
            Element created at 15/11/2014,3:14 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Controls.RepeaterViewItemAddedEventArgs.Model">
            <summary>Gets or sets the model.</summary>
            <value>The original viewmodel.</value>
            Element created at 15/11/2014,3:14 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Controls.SegmentControl">
            <summary>
            Class SegmentControl.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SegmentControl._layout">
            <summary>
            The layout
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SegmentControl._tintColor">
            <summary>
            The tint color
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SegmentControl._selectedSegment">
            <summary>
            The selected segment
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SegmentControl._clickedCommand">
            <summary>
            The clicked command
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.SegmentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.SegmentControl"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.SegmentControl.AddSegment(System.String)">
            <summary>
            Adds the segment.
            </summary>
            <param name="segmentText">The segment text.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.SegmentControl.SetSelectedSegment(System.Object)">
            <summary>
            Sets the selected segment.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.SegmentControl.SetSegmentText(System.Int32,System.String)">
            <summary>
            Sets the segment text.
            </summary>
            <param name="iSegment">The i segment.</param>
            <param name="segmentText">The segment text.</param>
            <exception cref="T:System.IndexOutOfRangeException">SetSegmentText: Attempted to change segment text for a segment doesn't exist.</exception>
        </member>
        <member name="M:XLabs.Forms.Controls.SegmentControl.SetSelectedState(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the state of the selected.
            </summary>
            <param name="indexer">The indexer.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="setBorderColor">if set to <c>true</c> [set border color].</param>
        </member>
        <member name="P:XLabs.Forms.Controls.SegmentControl.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>The color of the tint.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.SegmentControl.SelectedSegment">
            <summary>
            Gets or sets the selected segment.
            </summary>
            <value>The selected segment.</value>
        </member>
        <member name="E:XLabs.Forms.Controls.SegmentControl.SelectedSegmentChanged">
            <summary>
            Occurs when [selected segment changed].
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.SegmentedControlView">
            <summary>
            Class SegmentedControlView.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SegmentedControlView.SelectedItemProperty">
            <summary>
            The selected item property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SegmentedControlView.SegmentsItensProperty">
            <summary>
            The segments itens property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SegmentedControlView.TintColorProperty">
            <summary>
            The tint color property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.SegmentedControlView.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.SegmentedControlView.SegmentsItens">
            <summary>
            Gets or sets the segments itens.
            </summary>
            <value>The segments itens.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.SegmentedControlView.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>The color of the tint.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.SelectCell">
            <summary>
            Class SelectCell.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SelectCell.ItemsProperty">
            <summary>
            The items property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SelectCell.SelectedItemProperty">
            <summary>
            The selected item property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SelectCell._cells">
            <summary>
            The cells
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SelectCell._selectionTableView">
            <summary>
            The selection table view
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.SelectCell.#ctor(System.Func{Xamarin.Forms.INavigation})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.SelectCell"/> class.
            </summary>
            <param name="navigation">The navigation.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.SelectCell.CreatePage">
            <summary>
            Creates the page.
            </summary>
            <returns>ContentPage.</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.SelectCell.CheckboxChanged(System.Object,XLabs.EventArgs{System.Boolean})">
            <summary>
            Checkboxes the changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.SelectCell.HandleTapped(System.Object,System.EventArgs)">
            <summary>
            Handles the tapped.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:XLabs.Forms.Controls.SelectCell.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.SelectCell.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.SelectCell.Navigation">
            <summary>
            Gets or sets the navigation.
            </summary>
            <value>The navigation.</value>
        </member>
        <member name="E:XLabs.Forms.Controls.SelectCell.SelectedItemChanged">
            <summary>
            Occurs when [selected item changed].
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.SensorBar.SensorBarView">
            <summary>
            Class SensorBarView.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.SensorBar.SensorBarView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.SensorBar.SensorBarView"/> class.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SensorBar.SensorBarView.PositiveColorProperty">
            <summary>
            The positive color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SensorBar.SensorBarView.NegativeColorProperty">
            <summary>
            The negative color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SensorBar.SensorBarView.CurrentValueProperty">
            <summary>
            The current value property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SensorBar.SensorBarView.LimitProperty">
            <summary>
            The limit property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.SensorBar.SensorBarView.CurrentValue">
            <summary>
            Gets or sets the current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.SensorBar.SensorBarView.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.SensorBar.SensorBarView.PositiveColor">
            <summary>
            Gets or sets the color of the positive.
            </summary>
            <value>The color of the positive.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.SensorBar.SensorBarView.NegativeColor">
            <summary>
            Gets or sets the color of the negative.
            </summary>
            <value>The color of the negative.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.StrokeType">
            <summary>
            Enum StrokeType
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.StrokeType.Solid">
            <summary>
            The solid
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.StrokeType.Dotted">
            <summary>
            The dotted
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.StrokeType.Dashed">
            <summary>
            The dashed
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.SeparatorOrientation">
            <summary>
            Enum SeparatorOrientation
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SeparatorOrientation.Vertical">
            <summary>
            The vertical
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.SeparatorOrientation.Horizontal">
            <summary>
            The horizontal
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.Separator">
            <summary>
            Class Separator.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Separator.OrientationProperty">
            Orientation property
            <summary>
            The orientation property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Separator.ColorProperty">
            Color property
            <summary>
            The color property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Separator.SpacingBeforeProperty">
            <summary>
            The spacing before property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Separator.SpacingAfterProperty">
            Spacing After property
            <summary>
            The spacing after property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Separator.ThicknessProperty">
            Thickness property
            <summary>
            The thickness property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.Separator.StrokeTypeProperty">
            Stroke type property
            <summary>
            The stroke type property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.Separator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Controls.Separator"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.Separator.OnPropertyChanged(System.String)">
            <summary>
            Call this method from a child class to notify that a change happened on a property.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <remarks>A <see cref="T:Xamarin.Forms.BindableProperty" /> triggers this by itself. An inheritor only needs to call this for properties without <see cref="T:Xamarin.Forms.BindableProperty" /> as the backend store.</remarks>
        </member>
        <member name="M:XLabs.Forms.Controls.Separator.UpdateRequestedSize">
            <summary>
            Updates the size of the requested.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.Separator.Orientation">
            Orientation of the separator. Only
            <summary>
            Gets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.Separator.Color">
            Color of the separator. Black is a default color
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.Separator.SpacingBefore">
            Padding before the separator. Default is 1.
            <summary>
            Gets or sets the spacing before.
            </summary>
            <value>The spacing before.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.Separator.SpacingAfter">
            Padding after the separator. Default is 1.
            <summary>
            Gets or sets the spacing after.
            </summary>
            <value>The spacing after.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.Separator.Thickness">
            <summary>
            Gets or sets the thickness.
            </summary>
            <value>The thickness.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.Separator.StrokeType">
            Stroke style of the separator. Default is Solid.
            <summary>
            Gets or sets the type of the stroke.
            </summary>
            <value>The type of the stroke.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.TemplateContentView`1">
            <summary>
            Class TemplateContentView.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XLabs.Forms.Controls.TemplateContentView`1.TemplateSelectorProperty">
            <summary>
            Property definition for the <see cref="P:XLabs.Forms.Controls.TemplateContentView`1.TemplateSelector"/> Property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.TemplateContentView`1.ViewModelProperty">
            <summary>
            Property definition for the <see cref="P:XLabs.Forms.Controls.TemplateContentView`1.ViewModel"/> Property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.TemplateContentView`1.ItemTemplateSelectorProperty">
            <summary>
            The item template selector property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateContentView`1.OnDataTemplateSelectorChanged(XLabs.Forms.Controls.DataTemplateSelector,XLabs.Forms.Controls.DataTemplateSelector)">
            <summary>
            Called when [data template selector changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateContentView`1.ViewModelChanged(Xamarin.Forms.BindableObject,`0,`0)">
            <summary>
            Call down to the actual controls Implmentation
            <see cref="M:XLabs.Forms.Controls.TemplateContentView`1.ViewModelChangedImpl(`0)"/>
            </summary>
            <param name="bindable">The TemplateContentView<typeparam name="T"></typeparam></param>
            <param name="oldValue">Ignored</param>
            <param name="newValue">Passed down to <see cref="M:XLabs.Forms.Controls.TemplateContentView`1.ViewModelChangedImpl(`0)"/></param>
            <exception cref="T:XLabs.Forms.Exceptions.InvalidBindableException"></exception>Thrown if bindable is not in fact a TemplateContentView<typeparam name="T"></typeparam>
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateContentView`1.ViewModelChangedImpl(`0)">
            <summary>
            Clears the old Children
            Creates the new View and adds it to the Children, and Invalidates the Layout
            </summary>
            <param name="newvalue"></param>
        </member>
        <member name="P:XLabs.Forms.Controls.TemplateContentView`1.ItemTemplateSelector">
            <summary>
            Gets or sets the item template selector.
            </summary>
            <value>The item template selector.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.TemplateContentView`1.TemplateSelector">
            <summary>
            Used to match a type with a datatemplate
            <see cref="P:XLabs.Forms.Controls.TemplateContentView`1.TemplateSelector"/>
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.TemplateContentView`1.ViewModel">
            <summary>
            There is an argument to use 'object' rather than T
            however you can specify T as object.  In addition
            T allows the use of marker interfaces to enable
            things like Ux Widgets while maintaining 
            some typesafety
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.TemplateSelector">
            <summary>
            Class TemplateSelector.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.TemplateSelector.TemplatesProperty">
            <summary>
            Property definition for the <see cref="P:XLabs.Forms.Controls.TemplateSelector.Templates"/> Bindable Property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.TemplateSelector.SelectorFunctionProperty">
            <summary>
            Property definition for the <see cref="P:XLabs.Forms.Controls.TemplateSelector.SelectorFunction"/> Bindable Property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.TemplateSelector.ExceptionOnNoMatchProperty">
            <summary>
            Property definition for the <see cref="P:XLabs.Forms.Controls.TemplateSelector.ExceptionOnNoMatch"/> Bindable Property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateSelector.#ctor">
            <summary>
            Initialize the TemplateCollections so that each 
            instance gets it's own collection
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateSelector.TemplatesChanged(Xamarin.Forms.BindableObject,XLabs.Forms.Controls.DataTemplateCollection,XLabs.Forms.Controls.DataTemplateCollection)">
            <summary>
             Clears the cache when the set of templates change
            </summary>
            <param name="bo"></param>
            <param name="oldval"></param>
            <param name="newval"></param>
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateSelector.TemplateSetChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Clear the cache on any template set change
            If needed this could be optimized to care about the specific
            change but I doubt it would be worthwhile.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateSelector.TemplateFor(System.Type)">
            <summary>
            Matches a type with a datatemplate
            Order of matching=&gt;
                SelectorFunction, 
                Cache, 
                SpecificTypeMatch,
                InterfaceMatch,
                BaseTypeMatch 
                DefaultTempalte
            </summary>
            <param name="type">Type object type that needs a datatemplate</param>
            <returns>The DataTemplate from the WrappedDataTemplates Collection that closest matches 
            the type paramater.</returns>
            <exception cref="T:XLabs.Exceptions.NoDataTemplateMatchException"></exception>Thrown if there is no datatemplate that matches the supplied type
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateSelector.TemplateForImpl(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Interal implementation of <see cref="M:XLabs.Forms.Controls.TemplateSelector.TemplateFor(System.Type)"/>.
            </summary>
            <param name="type">The type to match on</param>
            <param name="examined">A list of all types examined during the matching process</param>
            <returns>A DataTemplate or null</returns>
        </member>
        <member name="M:XLabs.Forms.Controls.TemplateSelector.ViewFor(System.Object)">
            <summary>
            Finds a template for the type of the passed in item (<code>item.GetType()</code>)
            and creates the content and sets the Binding context of the View
            Currently the root of the DataTemplate must be a ViewCell.
            </summary>
            <param name="item">The item to instantiate a DataTemplate for</param>
            <returns>a View with it's binding context set</returns>
            <exception cref="T:XLabs.Exceptions.InvalidVisualObjectException"></exception>Thrown when the matched datatemplate inflates to an object not derived from either 
            <see cref="T:Xamarin.Forms.View"/> or <see cref="T:Xamarin.Forms.ViewCell"/>
        </member>
        <member name="P:XLabs.Forms.Controls.TemplateSelector.Cache">
            <summary>
            Private cache of matched types with datatemplates
            The cache is reset on any change to <see cref="P:XLabs.Forms.Controls.TemplateSelector.Templates"/>
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.TemplateSelector.ExceptionOnNoMatch">
            <summary>
            Bindable property that allows the user to 
            determine if a <see cref="T:XLabs.Exceptions.NoDataTemplateMatchException"/> is thrown when 
            there is no matching template found
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.TemplateSelector.Templates">
            <summary>
            The collection of DataTemplates
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.TemplateSelector.SelectorFunction">
            <summary>
            A user supplied function of type
            <code>Func<typeparamname name="Type"></typeparamname>,<typeparamname name="DataTemplate"></typeparamname></code>
            If this function has been supplied it is always called first in the match 
            process.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.IDataTemplateWrapper">
            <summary>
            Interface to enable DataTemplateCollection to hold
            typesafe instances of DataTemplateWrapper
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.IDataTemplateWrapper.IsDefault">
            <summary>
            Gets or sets a value indicating whether this instance is default.
            </summary>
            <value><c>true</c> if this instance is default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.IDataTemplateWrapper.WrappedTemplate">
            <summary>
            Gets or sets the wrapped template.
            </summary>
            <value>The wrapped template.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.IDataTemplateWrapper.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.DataTemplateWrapper`1">
            <summary>
            Wrapper for a DataTemplate.
            Unfortunately the default constructor for DataTemplate is internal
            so I had to wrap the DataTemplate instead of inheriting it.
            </summary>
            <typeparam name="T">The object type that this DataTemplateWrapper matches</typeparam>
        </member>
        <member name="F:XLabs.Forms.Controls.DataTemplateWrapper`1.WrappedTemplateProperty">
            <summary>
            The wrapped template property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.DataTemplateWrapper`1.IsDefaultProperty">
            <summary>
            The is default property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.DataTemplateWrapper`1.IsDefault">
            <summary>
            Gets or sets a value indicating whether this instance is default.
            </summary>
            <value><c>true</c> if this instance is default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.DataTemplateWrapper`1.WrappedTemplate">
            <summary>
            Gets or sets the wrapped template.
            </summary>
            <value>The wrapped template.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.DataTemplateWrapper`1.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:XLabs.Forms.Controls.DataTemplateCollection">
            <summary>
            Collection class of IDataTemplateWrapper
            Enables xaml definitions of collections.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.WebImage">
            <summary>
            Class WebImage.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.WebImage.ImageUrlProperty">
            <summary>
            The image URL property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.WebImage.DefaultImageProperty">
            <summary>
            The default image property
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.WebImage.ImageUrl">
            <summary>
            The URL of the image to display from the web
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.WebImage.DefaultImage">
            <summary>
            The path to the local image to display if the <c>ImageUrl</c> can't be loaded
            </summary>
        </member>
        <member name="T:XLabs.Forms.Controls.WrapLayout">
            <summary>
            Simple Layout panel which performs wrapping on the boundaries.
            Original Source:
            https://github.com/conceptdev/xamarin-forms-samples/blob/master/Evolve13/Evolve13/Controls/WrapLayout.cs
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.WrapLayout.OrientationProperty">
            <summary>
            Backing Storage for the Orientation property
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.WrapLayout.SpacingProperty">
            <summary>
            Backing Storage for the Spacing property
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.WrapLayout.OnSizeChanged">
            <summary>
            This is called when the spacing or orientation properties are changed - it forces
            the control to go back through a layout pass.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.WrapLayout.OnSizeRequest(System.Double,System.Double)">
            <summary>
            This method is called during the measure pass of a layout cycle to get the desired size of an element.
            </summary>
            <param name="widthConstraint">The available width for the element to use.</param>
            <param name="heightConstraint">The available height for the element to use.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.WrapLayout.DoVerticalMeasure(System.Double,System.Double)">
            <summary>
            Does the vertical measure.
            </summary>
            <returns>The vertical measure.</returns>
            <param name="widthConstraint">Width constraint.</param>
            <param name="heightConstraint">Height constraint.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.WrapLayout.DoHorizontalMeasure(System.Double,System.Double)">
            <summary>
            Does the horizontal measure.
            </summary>
            <returns>The horizontal measure.</returns>
            <param name="widthConstraint">Width constraint.</param>
            <param name="heightConstraint">Height constraint.</param>
        </member>
        <member name="M:XLabs.Forms.Controls.WrapLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Positions and sizes the children of a Layout.
            </summary>
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the width of the child region bounding box.</param>
            <param name="height">A value representing the height of the child region bounding box.</param>
        </member>
        <member name="P:XLabs.Forms.Controls.WrapLayout.Orientation">
            <summary>
            Orientation (Horizontal or Vertical)
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.WrapLayout.Spacing">
            <summary>
            Spacing added between elements (both directions)
            </summary>
            <value>The spacing.</value>
        </member>
        <member name="T:XLabs.Forms.Converter.CollectionEmptyToBool">
            <summary>
            Inverts a boolean value
            </summary>    
            <remarks>Removed unneeded default ctor</remarks>
        </member>
        <member name="M:XLabs.Forms.Converter.CollectionEmptyToBool.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a boolean to it's negated value/>.
            </summary>
            <param name="value">The boolean to negate.</param>
            <param name="targetType">not used.</param>
            <param name="parameter">not used.</param>
            <param name="culture">not used.</param>
            <returns>Negated boolean value.</returns>
        </member>
        <member name="M:XLabs.Forms.Converter.CollectionEmptyToBool.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a negated value back to it's non negated value....silly I know
            </summary>
            <param name="value">The value to be un negated.</param>
            <param name="targetType">not used.</param>
            <param name="parameter">not used.</param>
            <param name="culture">not used.</param>
            <returns>The original unnegated value.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:XLabs.Forms.Converter.CollectionEmptyToBool.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified en is empty.
            </summary>
            <param name="en">The en.</param>
            <returns><c>true</c> if the specified en is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:XLabs.Forms.Converter.HeightToMillimeters">
            <summary>
            Class HeightToMillimeters.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Converter.HeightToMillimeters.MILLIMETERS_IN_INCH">
            <summary>
            The millimeters in inch
            </summary>
        </member>
        <member name="F:XLabs.Forms.Converter.HeightToMillimeters._display">
            <summary>
            The display
            </summary>
        </member>
        <member name="M:XLabs.Forms.Converter.HeightToMillimeters.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value" /> to <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.
            </summary>
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:XLabs.Forms.Converter.HeightToMillimeters.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value"/> back from <paramref name="targetType"/> by using <paramref name="parameter"/> and <paramref name="culture"/>.
            </summary>
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <returns>To be added.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:XLabs.Forms.Converter.HeightToMillimeters.ToMillimeters(System.Double)">
            <summary>
            To the millimeters.
            </summary>
            <param name="inches">The inches.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="P:XLabs.Forms.Converter.HeightToMillimeters.Display">
            <summary>
            Gets the display.
            </summary>
            <value>The display.</value>
            <exception cref="T:System.InvalidOperationException">Unable to resolve display. Please set the IDevice implementation on your IoC container.</exception>
        </member>
        <member name="T:XLabs.Forms.Converter.InverseBooleanConverter">
            <summary>
            Inverts a boolean value
            </summary>    
            <remarks>Removed unneeded default ctor</remarks>
        </member>
        <member name="M:XLabs.Forms.Converter.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a boolean to it's negated value/>.
            </summary>
            <param name="value">The boolean to negate.</param>
            <param name="targetType">not used.</param>
            <param name="parameter">not used.</param>
            <param name="culture">not used.</param>
            <returns>Negated boolean value.</returns>
        </member>
        <member name="M:XLabs.Forms.Converter.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a negated value back to it's non negated value....silly I know
            </summary>
            <param name="value">The value to be un negated.</param>
            <param name="targetType">not used.</param>
            <param name="parameter">not used.</param>
            <param name="culture">not used.</param>
            <returns>The original unnegated value.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:XLabs.Forms.Converter.ObjectRefToBooleanConverter">
            <summary>
            Converts an objectreference to a boolean
            </summary>
            Element created at 05/11/2014,9:08 AM by Charles
        </member>
        <member name="M:XLabs.Forms.Converter.ObjectRefToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an objectreferene to a boolean/&gt;.
            </summary>
            <param name="value">An objectreference</param>
            <param name="targetType">boolean</param>
            <param name="parameter">not used</param>
            <param name="culture">not used</param>
            <returns>True if the <see cref="T:System.Object"/> is not null, false otherwise</returns>
            Element created at 05/11/2014,9:09 AM by Charles
            <remarks>To be added.</remarks>
        </member>
        <member name="M:XLabs.Forms.Converter.ObjectRefToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implmented, this is a one way converter
            </summary>
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <returns>To be added.</returns>
            Element created at 05/11/2014,9:11 AM by Charles
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:XLabs.Forms.Exceptions.InvalidBindableException">
            <summary>
            Thrown when an invalid bindable object has been passed to a callback
            </summary>
        </member>
        <member name="M:XLabs.Forms.Exceptions.InvalidBindableException.#ctor">
            <summary>
            Hide any possible default constructor
            Redundant I know, but it costs nothing
            and communicates the design intent to
            other developers.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Exceptions.InvalidBindableException.#ctor(Xamarin.Forms.BindableObject,System.Type,System.String)">
            <summary>
            Constructs the exception and passes a meaningful
            message to the base Exception
            </summary>
            <param name="bindable">The bindable object that was passed</param>
            <param name="expected">The expected type</param>
            <param name="name">The calling methods name, uses [CallerMemberName]</param>
        </member>
        <member name="P:XLabs.Forms.Exceptions.InvalidBindableException.IncorrectBindableObject">
            <summary>
            The bindable object that was passed
            </summary>
        </member>
        <member name="P:XLabs.Forms.Exceptions.InvalidBindableException.ExpectedType">
            <summary>
            The expected type of the bindable object
            </summary>
        </member>
        <member name="T:XLabs.Forms.BindableObjectExtensions">
            <summary>
            Class BindableObjectExtensions.
            </summary>
        </member>
        <member name="M:XLabs.Forms.BindableObjectExtensions.GetValue``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bindableObject">The bindable object.</param>
            <param name="property">The property.</param>
            <returns>T.</returns>
        </member>
        <member name="T:XLabs.Forms.CollectionTypeExtension">
            <summary>
            Markup extension making it simpler to declare generic list types
            </summary>
            Element created at 09/11/2014,9:33 AM by Charles
        </member>
        <member name="M:XLabs.Forms.CollectionTypeExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.CollectionTypeExtension"/> class 
            to return a ObservableCollection(string)
            </summary>
            Element created at 09/11/2014,10:03 AM by Charles
        </member>
        <member name="M:XLabs.Forms.CollectionTypeExtension.ProvideValue(System.IServiceProvider)">
            <summary>Returns the object created from the markup extension.</summary>
            <param name="serviceProvider"><see cref="T:System.IServiceProvider"/></param>
            <returns>The Type of the desired collection</returns>
            Element created at 09/11/2014,9:35 AM by Charles
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:XLabs.Forms.CollectionTypeExtension.Collection">
            <summary>Gets or sets the collection.</summary>
            <value>The Type of collection type to return.</value>
            Element created at 09/11/2014,9:35 AM by Charles
            
        </member>
        <member name="P:XLabs.Forms.CollectionTypeExtension.InstanceType">
            <summary>Gets or sets the type of the instance.</summary>
            <value>The type to be contained in the collection type</value>
            Element created at 09/11/2014,9:35 AM by Charles
        </member>
        <member name="T:XLabs.Forms.CollectionTypes">
            <summary>The collection type to return</summary>
            Element created at 09/11/2014,9:31 AM by Charles
        </member>
        <member name="F:XLabs.Forms.CollectionTypes.None">
            <summary>None, Invalid</summary>
            Element created at 09/11/2014,9:31 AM by Charles
        </member>
        <member name="F:XLabs.Forms.CollectionTypes.ObservableCollection">
            <summary>
            The observable collection type ObservableCollection(T)
            </summary>
            Element created at 09/11/2014,9:31 AM by Charles
        </member>
        <member name="F:XLabs.Forms.CollectionTypes.GenericList">
            <summary>The Generic list type List(T)</summary>
            Element created at 09/11/2014,9:32 AM by Charles
        </member>
        <member name="T:XLabs.Forms.OnPlatformList`1">
            <summary>
            Class OnPlatformList.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XLabs.Forms.OnPlatformList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.OnPlatformList`1"/> class.
            </summary>
        </member>
        <member name="P:XLabs.Forms.OnPlatformList`1.iOS">
            <summary>
            Gets the i os.
            </summary>
            <value>The i os.</value>
        </member>
        <member name="P:XLabs.Forms.OnPlatformList`1.Android">
            <summary>
            Gets the android.
            </summary>
            <value>The android.</value>
        </member>
        <member name="P:XLabs.Forms.OnPlatformList`1.WinPhone">
            <summary>
            Gets the win phone.
            </summary>
            <value>The win phone.</value>
        </member>
        <member name="T:XLabs.Forms.ViewExtensions">
            <summary>
            Class ViewExtensions.
            </summary>
        </member>
        <member name="F:XLabs.Forms.ViewExtensions._widthInInches">
            <summary>
            The width in inches
            </summary>
        </member>
        <member name="F:XLabs.Forms.ViewExtensions._heightInInches">
            <summary>
            The height in inches
            </summary>
        </member>
        <member name="M:XLabs.Forms.ViewExtensions.GetWidthRequestInInches(Xamarin.Forms.View)">
            <summary>
            Gets the width request in inches.
            </summary>
            <param name="view">The view.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:XLabs.Forms.ViewExtensions.SetWidthRequestInInches(Xamarin.Forms.View,System.Double)">
            <summary>
            Sets the width request in inches.
            </summary>
            <param name="view">The view.</param>
            <param name="inches">The inches.</param>
        </member>
        <member name="M:XLabs.Forms.ViewExtensions.GetHeightRequestInInches(Xamarin.Forms.View)">
            <summary>
            Gets the height request in inches.
            </summary>
            <param name="view">The view.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:XLabs.Forms.ViewExtensions.SetHeightRequestInInches(Xamarin.Forms.View,System.Double)">
            <summary>
            Sets the height request in inches.
            </summary>
            <param name="view">The view.</param>
            <param name="inches">The inches.</param>
        </member>
        <member name="P:XLabs.Forms.ViewExtensions.Display">
            <summary>
            Gets the display.
            </summary>
            <value>The display.</value>
        </member>
        <member name="P:XLabs.Forms.ViewExtensions.WidthInInches">
            <summary>
            Gets the width in inches.
            </summary>
            <value>The width in inches.</value>
        </member>
        <member name="P:XLabs.Forms.ViewExtensions.HeightInInches">
            <summary>
            Gets the height in inches.
            </summary>
            <value>The height in inches.</value>
        </member>
        <member name="T:XLabs.Forms.Mvvm.NavigationConverter">
            <summary>
            Converts the Xamarin Forms page navigation to our <see cref="T:XLabs.Forms.Mvvm.ViewModelNavigation"/> instance.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value"/> to <paramref name="targetType"/> by using <paramref name="parameter"/> and <paramref name="culture"/>.
            </summary>
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <returns>To be added.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value" /> back from <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.
            </summary>
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:XLabs.Forms.Mvvm.BaseView">
            <summary>
            Class BaseView.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.BaseView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Mvvm.BaseView"/> class.
            Binds the Navigation and IsBusy property.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.BaseView.OnAppearing">
            <summary>
            Passes the event of the view appearing through to the view model.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.BaseView.OnDisappearing">
            <summary>
            Passes the event of the view disappearing through to the view model.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Mvvm.INavigationAware">
            <summary>
            Interface INavigationAware
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.INavigationAware.OnNavigatingTo(Xamarin.Forms.Page)">
            <summary>
            Called when being navigated to.
            </summary>
            <remarks>
            Can be implemented on either viewmodel or view.
            </remarks>
            <param name="previousView">The view being navigated away from.</param>
        </member>
        <member name="M:XLabs.Forms.Mvvm.INavigationAware.OnNavigatingFrom(Xamarin.Forms.Page)">
            <summary>
            Called when being navigated away from.
            </summary>
            <remarks>
            Can be implemented on either viewmodel or view.
            </remarks>
            <param name="nextView">The view being navigated to.</param>
        </member>
        <member name="T:XLabs.Forms.Mvvm.IPage">
            <summary>
            Interface IPage
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.IPage.NavigatingTo(XLabs.Forms.Mvvm.IPage,System.Object)">
            <summary>
            Navigatings to.
            </summary>
            <param name="previousPage">The previous page.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:XLabs.Forms.Mvvm.IPage.NavigatingFrom(XLabs.Forms.Mvvm.IPage)">
            <summary>
            Navigatings from.
            </summary>
            <param name="nextPage">The next page.</param>
        </member>
        <member name="M:XLabs.Forms.Mvvm.IPage.ToNativePage">
            <summary>
            To the native page.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="P:XLabs.Forms.Mvvm.IPage.Navigation">
            <summary>
            Gets or sets the navigation.
            </summary>
            <value>The navigation.</value>
        </member>
        <member name="P:XLabs.Forms.Mvvm.IPage.BindingContext">
            <summary>
            Gets or sets the binding context.
            </summary>
            <value>The binding context.</value>
        </member>
        <member name="T:XLabs.Forms.Mvvm.IViewModel">
            <summary>
            Interface IViewModel
            </summary>
        </member>
        <member name="P:XLabs.Forms.Mvvm.IViewModel.NavigationService">
            <summary>
            Gets or sets the navigation service.
            </summary>
            <value>The navigation.</value>
        </member>
        <member name="P:XLabs.Forms.Mvvm.IViewModel.Navigation">
            <summary>
            Gets or sets the navigation.
            </summary>
            <value>The Forms navigation.</value>
        </member>
        <member name="P:XLabs.Forms.Mvvm.IViewModel.IsBusy">
            <summary>
            Gets or sets a value indicating whether this instance is busy.
            </summary>
            <value>
              <c>true</c> if this instance is busy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:XLabs.Forms.Mvvm.NavigationAwareViewModel">
            <summary>
            Class NavigationAwareViewModel.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Mvvm.ViewModel">
            <summary>
            View model base class.
            </summary>
            <example>
            To implement observable property:
            private object propertyBackField;
            public object Property
            {
            get { return this.propertyBackField; }
            set
            {
            this.ChangeAndNotify(ref this.propertyBackField, value);
            }
            </example>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModel.OnViewAppearing">
            <summary>
            Called when the view appears.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModel.OnViewDisappearing">
            <summary>
            Called when the view disappears.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModel.ChangeAndNotify``1(``0@,``0,System.String)">
            <summary>
            Changes the property if the value is different and invokes PropertyChangedEventHandler.
            </summary>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <param name="property">Property.</param>
            <param name="value">Value.</param>
            <param name="propertyName">Property name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:XLabs.Forms.Mvvm.ViewModel.NavigationService">
            <summary>
            Gets or sets the navigation service.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="P:XLabs.Forms.Mvvm.ViewModel.Navigation">
            <summary>
            Gets or sets the forms navigation.
            </summary>
            <value>The forms navigation.</value>
        </member>
        <member name="P:XLabs.Forms.Mvvm.ViewModel.IsBusy">
            <summary>
            Gets or sets a value indicating whether this instance is busy.
            </summary>
            <value>
              <c>true</c> if this instance is busy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationAwareViewModel.OnNavigatingTo(Xamarin.Forms.Page)">
            <summary>
            Called when being navigated to.
            </summary>
            <param name="previousView">The view being navigated away from.</param>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationAwareViewModel.OnNavigatingFrom(Xamarin.Forms.Page)">
            <summary>
            Called when being navigated away from.
            </summary>
            <param name="nextView">The view being navigated to.</param>
        </member>
        <member name="T:XLabs.Forms.Mvvm.NavigationView">
            <summary>
            Class NavigationView.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Mvvm.NavigationView.CURRENT_PAGE_PROPERTY_NAME">
            <summary>
            The current page property name
            </summary>
        </member>
        <member name="F:XLabs.Forms.Mvvm.NavigationView._previousPage">
            <summary>
            The _previous page
            </summary>
        </member>
        <member name="F:XLabs.Forms.Mvvm.NavigationView._mainPage">
            <summary>
            The _main page
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Mvvm.NavigationView"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationView.#ctor(Xamarin.Forms.Page)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Mvvm.NavigationView"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationView.OnChildAdded(Xamarin.Forms.Element)">
            <summary>
            Invoked whenever the <see cref="E:Xamarin.Forms.Element.ChildAdded" /> event needs to be emitted. Implement this method to add class handling for this event.
            </summary>
            <param name="child">The element that was added.</param>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationView.OnChildRemoved(Xamarin.Forms.Element)">
            <summary>
            Invoked whenever the <see cref="E:Xamarin.Forms.Element.ChildRemoved" /> event needs to be emitted. Implement this method to add class handling for this event.
            </summary>
            <param name="child">The element that was removed.</param>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationView.OnPropertyChanging(System.String)">
            <summary>
            Call this method from a child class to notify that a change is going to happen on a property.
            </summary>
            <param name="propertyName">The name of the property that is changing.</param>
            <remarks>A <see cref="T:Xamarin.Forms.BindableProperty" /> triggers this by itself. An inheritor only needs to call this for properties without <see cref="T:Xamarin.Forms.BindableProperty" /> as the backend store.</remarks>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationView.AsNavigationAware(Xamarin.Forms.VisualElement)">
            <summary>
            Ases the navigation aware.
            </summary>
            <param name="element">The element.</param>
            <returns>INavigationAware.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationView.OnNavigatingTo(Xamarin.Forms.Page,Xamarin.Forms.Page)">
            <summary>
            Called when [navigating to].
            </summary>
            <param name="targetView">The target view.</param>
            <param name="previousView">The previous view.</param>
        </member>
        <member name="M:XLabs.Forms.Mvvm.NavigationView.OnNavigatingFrom(Xamarin.Forms.Page,Xamarin.Forms.Page)">
            <summary>
            Called when [navigating from].
            </summary>
            <param name="targetView">The target view.</param>
            <param name="nextView">The next view.</param>
        </member>
        <member name="T:XLabs.Forms.Mvvm.ViewTypeAttribute">
            <summary>
            Class ViewTypeAttribute.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Mvvm.ViewTypeAttribute"/> class.
            </summary>
            <param name="viewType">Type of the view.</param>
        </member>
        <member name="P:XLabs.Forms.Mvvm.ViewTypeAttribute.ViewType">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="T:XLabs.Forms.Mvvm.ViewFactory">
            <summary>
            Class ViewFactory.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Mvvm.ViewFactory.TypeDictionary">
            <summary>
            The type dictionary.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Mvvm.ViewFactory.PageCache">
            <summary>
            The page cache.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewFactory.Register``2(System.Func{XLabs.Ioc.IResolver,``1})">
            <summary>
            Registers this instance.
            </summary>
            <typeparam name="TView">The type of the t view.</typeparam>
            <typeparam name="TViewModel">The type of the t view model.</typeparam>
            <param name="func">Function which returns an instance of the t view model.</param>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewFactory.CreatePage(System.Type,System.Action{System.Object,System.Object},System.Object[])">
            <summary>
            Creates the page.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="initialiser">The initialiser.</param>
            <param name="args">The arguments.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">Unknown View for ViewModel</exception>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewFactory.CreatePage``2(System.Action{``0,``1},System.Object[])">
            <summary>
            Creates the page.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <typeparam name="TPage">The type of the t page.</typeparam>
            <param name="initialiser">The create action.</param>
            <param name="args">The arguments.</param>
            <returns>Page for the ViewModel.</returns>
            <exception cref="T:System.InvalidOperationException">Unknown View for ViewModel.</exception>
        </member>
        <member name="P:XLabs.Forms.Mvvm.ViewFactory.EnableCache">
            <summary>
            Gets or sets a value indicating whether [enable cache].
            </summary>
            <value><c>true</c> if [enable cache]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Mvvm.ViewModelNavigation">
            <summary>
            Class ViewModelNavigation.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Mvvm.ViewModelNavigation._implementor">
            <summary>
            The _implementor
            </summary>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.#ctor(Xamarin.Forms.INavigation)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Mvvm.ViewModelNavigation"/> class.
            </summary>
            <param name="implementor">The implementor.</param>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PushAsync(Xamarin.Forms.Page,System.Boolean)">
            <summary>
            Pushes the asynchronous.
            </summary>
            <param name="page">The page.</param>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PushAsync``1(System.Boolean)">
            <summary>
            Pushes the asynchronous.
            </summary>
            <typeparam name="TViewModel">The type of the t view model.</typeparam>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PushAsync``1(System.Action{``0,Xamarin.Forms.Page},System.Boolean)">
            <summary>
            Pushes the asynchronous.
            </summary>
            <typeparam name="TViewModel">The type of the t view model.</typeparam>
            <param name="activateAction">The activate action.</param>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PopAsync(System.Boolean)">
            <summary>
            Pops the asynchronous.
            </summary>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PopToRootAsync(System.Boolean)">
            <summary>
            Pops to root asynchronous.
            </summary>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PushModalAsync(Xamarin.Forms.Page,System.Boolean)">
            <summary>
            Pushes the modal asynchronous.
            </summary>
            <param name="page">The page.</param>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PushModalAsync``1(System.Boolean)">
            <summary>
            Pushes the modal asynchronous.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns></returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PushModalAsync``1(System.Action{``0,Xamarin.Forms.Page},System.Boolean)">
            <summary>
            Pushes the modal asynchronous.
            </summary>
            <typeparam name="TViewModel">The type of the t view model.</typeparam>
            <param name="activateAction">The create action.</param>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.PopModalAsync(System.Boolean)">
            <summary>
            Pops the modal asynchronous.
            </summary>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Forms.Mvvm.ViewModelNavigation.RemoveAsync``1(``0,System.Boolean)">
            <summary>
            Removes the specified view model.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="viewModel">The view model.</param>
            <param name="animated">If set to <c>true</c> the navigation is animated.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:XLabs.Forms.Pages.ExtendedMasterDetailPage">
            <summary>
            Class ExtendedMasterDetailPage.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Pages.ExtendedMasterDetailPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Pages.ExtendedMasterDetailPage"/> class.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Pages.ModalHost`2">
            <summary>
            A callback based modal page host
            usage:
            <code>
            <![CDATA[
            IModal<T> adds a property of type IModalHost<T> to your page class
            //Assuming you wanted your modal to return a string you would implement IModal<string> on your page class
            When your modal is complete call Host.ModalSuccess(T result) or Host.ModalCancel()
            Calling Host.ModalSuccess(T result) will call the function that you supplied as the
            success parem to the ModalHost.  Calling Modal.ModalCancel will call the cancel callback(if any).
            Suppose you had a modal that needed to return a string....
            
            
            class myModalPage : IModal<string>
            {
              public IModalHost<string> Host{get;set;}//The Host will be set by the ModalHost<T> class before showing the dialog
            
             .....at some future point your dialog completes and you call Host.ModalSucess(T result) 
            
            }
            var host = new ModalHost<string,myModalPage>(this.Navigation,new myModalPage(),(x)=>{ ... your success code},()=>{...your cancel code});
            host.show();
            
            
            ]]>
            </code>
            </summary>
            <typeparam name="T">The type that the dialog is expected to produce</typeparam>
            <typeparam name="TPage">The Dialog Page type</typeparam>
            Element created at 05/11/2014,9:39 AM by Charles
        </member>
        <member name="T:XLabs.Forms.Pages.IModalHost`1">
            <summary>
            Supplies callbacks to modal dialogs
            </summary>
            <typeparam name="T">The result type of the dialog</typeparam>
            Element created at 06/11/2014,10:40 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Pages.IModalHost`1.ModalSuccess(`0)">
            <summary>Calls the suppliced success callback.</summary>
            <param name="returnvalue">The resultvalue.</param>
            Element created at 06/11/2014,10:41 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Pages.IModalHost`1.ModalCancel">
            <summary>calls the supplied cancel.</summary>
            Element created at 06/11/2014,10:41 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Pages.ModalHost`2.#ctor(Xamarin.Forms.INavigation,`1,System.Action{`0},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Pages.ModalHost`2"/> class.
            </summary>
            <param name="navigation">The navigation object from the host page.</param>
            <param name="page">The page to display.</param>
            <param name="success">The success callback.</param>
            <param name="cancel">The cancel callback.</param>
            Element created at 06/11/2014,10:32 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Pages.ModalHost`2.Show">
            <summary>Shows the dialog.</summary>
            Element created at 06/11/2014,10:33 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Pages.ModalHost`2.ModalSuccess(`0)">
            <summary>Closes the dialog and calls the success callback.</summary>
            <param name="result">The dialog result</param>
            Element created at 05/11/2014,9:46 AM by Charles
        </member>
        <member name="M:XLabs.Forms.Pages.ModalHost`2.ModalCancel">
            <summary>Closes the dialog and calls the cancel callback(if any)</summary>
            Element created at 05/11/2014,9:46 AM by Charles
        </member>
        <member name="M:XLabs.Forms.Pages.ModalHost`2.Close(System.Action)">
            <summary>Closes the dialog and calls the supplied action.</summary>
            <param name="resultAction">The result action.</param>
            Element created at 06/11/2014,10:35 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Pages.IModal`1">
            <summary>
            Implemented by dialog pages to allow
            the ModalHost to inject a Host param
            for the dialog page to use
            </summary>
            <typeparam name="T">The result type for the dialog</typeparam>
            Element created at 06/11/2014,10:36 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Pages.IModal`1.Host">
            <summary>Gets or sets the host.</summary>
            <value>An implmentation of IModalHost</value>
            Element created at 06/11/2014,10:37 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Services.IFontManager">
            <summary>
            Interface IFontManager
            </summary>
        </member>
        <member name="M:XLabs.Forms.Services.IFontManager.GetHeight(Xamarin.Forms.Font)">
            <summary>
            Gets height for the font.
            </summary>
            <param name="font">Font whose height is calculated.</param>
            <returns>Height of the font in inches.</returns>
        </member>
        <member name="M:XLabs.Forms.Services.IFontManager.FindClosest(System.String,System.Double)">
            <summary>
            Finds the closest font to the desired height.
            </summary>
            <param name="name">Name of the font.</param>
            <param name="desiredHeight">Desired height in inches.</param>
            <returns></returns>
        </member>
        <member name="P:XLabs.Forms.Services.IFontManager.AvailableFonts">
            <summary>
            Gets all available system fonts.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Services.NavigationService">
            <summary>
            Class NavigationService.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Services.NavigationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Services.NavigationService"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Services.NavigationService.#ctor(Xamarin.Forms.INavigation)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Services.NavigationService"/> class.
            </summary>
            <param name="nav">The nav.</param>
        </member>
        <member name="F:XLabs.Forms.Services.NavigationService._pageLookup">
            <summary>
            The _page lookup
            </summary>
        </member>
        <member name="M:XLabs.Forms.Services.NavigationService.RegisterPage(System.String,System.Type)">
            <summary>
            Registers the page (this must be called if you want to use Navigation by pageKey).
            </summary>
            <param name="pageKey">The page key.</param>
            <param name="pageType">Type of the page.</param>
            <exception cref="T:System.ArgumentException">That pagekey is already registered;pageKey</exception>
        </member>
        <member name="M:XLabs.Forms.Services.NavigationService.NavigateTo(System.String,System.Boolean,System.Object[])">
            <summary>
            Navigates to.
            </summary>
            <param name="pageKey">The page key.</param>
            <param name="animated">if set to <c>true</c> [animated].</param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentException">That pagekey is not registered;pageKey</exception>
        </member>
        <member name="M:XLabs.Forms.Services.NavigationService.NavigateTo(System.Type,System.Boolean,System.Object[])">
            <summary>
            Navigates to.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="animated">if set to <c>true</c> [animated].</param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentException">Argument must be derived from type Xamarin.Forms.Page;pageType</exception>
        </member>
        <member name="M:XLabs.Forms.Services.NavigationService.NavigateTo``1(System.Boolean,System.Object[])">
            <summary>
            Navigates to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="animated">if set to <c>true</c> [animated].</param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentException">Page Type must be based on Xamarin.Forms.Page</exception>
        </member>
        <member name="M:XLabs.Forms.Services.NavigationService.GoBack">
            <summary>
            Goes back.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Services.NavigationService.GoForward">
            <summary>
            Goes forward.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:XLabs.Forms.Validation.Action">
            <summary>
                Defines an action to be taken after validation
            </summary>
            Element created at 07/11/2014,4:03 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Action.SettersProperty">
            <summary>Definition for <see cref="P:XLabs.Forms.Validation.Action.Setters"/></summary>
            Element created at 08/11/2014,4:01 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Action.ElementProperty">
            <summary>Property Definition for <see cref="P:XLabs.Forms.Validation.Action.Element"/></summary>
            Element created at 07/11/2014,6:15 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Action.InvalidValueProperty">
            <summary>Property Defintion for <see cref="P:XLabs.Forms.Validation.Action.InvalidValue"/></summary>
            Element created at 07/11/2014,6:16 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Action.PropertyProperty">
            <summary>Property definition for <see cref="P:XLabs.Forms.Validation.Action.Property"/></summary>
            Element created at 07/11/2014,6:15 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Action.ValidValueProperty">
            <summary>Property Definition for <see cref="P:XLabs.Forms.Validation.Action.ValidValue"/> </summary>
            Element created at 07/11/2014,6:15 AM by Charles
        </member>
        <member name="M:XLabs.Forms.Validation.Action.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.Action"/> class.
            </summary>
            Element created at 08/11/2014,4:03 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Validation.Action.ApplyResult(System.Boolean,Xamarin.Forms.BindableObject)">
            <summary>
                Applies the result of the validation, valid if result is true, invalid otherwise
            </summary>
            <param name="result">Flag indicating the state of the RuleSet</param>
            <param name="sourceElement">If this action has no target target this 
            instead (The source from the rule)</param>
            Element created at 07/11/2014,6:17 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Action.Setters">
            <summary>Gets or sets the setters.</summary>
            <value>The setters to apply to the Element identified by the Action element.</value>
            Element created at 08/11/2014,4:02 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Action.Element">
            <summary>Gets or sets the element to be modified.</summary>
            <value>The element.</value>
            Element created at 07/11/2014,6:16 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Action.InvalidValue">
            <summary>Gets or sets the invalid value.</summary>
            <value>The valud to be applied to the property when the RuleSet is invalid value.</value>
            Element created at 07/11/2014,6:17 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Action.Property">
            <summary>Gets or sets the property.</summary>
            <value>The property to be modified.</value>
            Element created at 07/11/2014,6:16 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Action.ValidValue">
            <summary>Gets or sets the valid value.</summary>
            <value>The value to be applied to the property when the RuleSet is valid.</value>
            Element created at 07/11/2014,6:16 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Action.PropertyInfo">
            <summary>Gets the property information.</summary>
            <value>The property information.</value>
            Element created at 07/11/2014,6:18 AM by Charles
            <exception cref="T:XLabs.Exceptions.PropertyNotFoundException"></exception>
        </member>
        <member name="T:XLabs.Forms.Validation.Actions">
            <summary>
                A collection of Actions
            </summary>
            Element created at 07/11/2014,3:46 AM by Charles
        </member>
        <member name="T:XLabs.Forms.Validation.PredicatePriority">
            <summary>
            The order that predicates are evaluated in
            </summary>
            Element created at 08/11/2014,2:37 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.PredicatePriority.High">
            <summary>High Priority, No type conversion or processing required</summary>
            Element created at 08/11/2014,2:37 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.PredicatePriority.Medium">
            <summary>Medium Priority Type conversions and evaluation</summary>
            Element created at 08/11/2014,2:37 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.PredicatePriority.Low">
            <summary>
            Low priority anything with regular expressions
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.PredicatePriority.User">
            <summary>
            User Priority Callback and Pattern
            </summary>
        </member>
        <member name="T:XLabs.Forms.Validation.PropertySetter">
            <summary>Defines one property to set during validation</summary>
            Element created at 08/11/2014,3:54 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.PropertySetter.PropertyProperty">
            <summary>Definition for <see cref="P:XLabs.Forms.Validation.PropertySetter.Property"/></summary>
            Element created at 08/11/2014,3:54 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.PropertySetter.ValidValueProperty">
            <summary>
            Definition for <see cref="P:XLabs.Forms.Validation.PropertySetter.ValidValue"/>
            </summary>
            Element created at 08/11/2014,3:54 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.PropertySetter.InvalidValueProperty">
            <summary>
            Definition for <see cref="P:XLabs.Forms.Validation.PropertySetter.InvalidValue"/>
            </summary>
            Element created at 08/11/2014,3:55 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.PropertySetter.Property">
            <summary>Gets or sets the property name.</summary>
            <value>The property.</value>
            Element created at 08/11/2014,3:55 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.PropertySetter.ValidValue">
            <summary>The value to set when the rule is valid property</summary>
            <value>The valid value.</value>
            Element created at 08/11/2014,3:55 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.PropertySetter.InvalidValue">
            <summary>
            The value to set when the rule is invalid
            </summary>
            <value>The in valid value.</value>
            Element created at 08/11/2014,3:56 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Validation.PropertySetters">
            <summary>
            Collection of <see cref="T:XLabs.Forms.Validation.PropertySetter"/>
            </summary>
            Element created at 08/11/2014,3:58 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Validation.Rule">
            <summary>
            Defines a single validation rule
            A validation rule consists of an Element, a property on that element(must be a bindable property)
            and a set of validation rules
            </summary>
            Element created at 07/11/2014,3:06 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.UserDefinedProperty">
            <summary>
            Definition for the <see cref="P:XLabs.Forms.Validation.Rule.UserDefined"/> property
            </summary>
            Element created at 08/11/2014,2:54 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.ActionsProperty">
            <summary>
            Actions to run when this Validation rule evaluates
            </summary>
            Element created at 08/11/2014,12:43 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.CallbackProperty">
            <summary>
            Property definition for <see cref="P:XLabs.Forms.Validation.Rule.Callback"/>
            </summary>
            Element created at 07/11/2014,10:48 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.ElementProperty">
            <summary>
            Property Definition for <see cref="P:XLabs.Forms.Validation.Rule.Element"/>
            </summary>
            Element created at 07/11/2014,2:54 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.MaximumLengthProperty">
            <summary>
            The maximum length property
            </summary>
            Element created at 08/11/2014,2:46 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.MaximumProperty">
            <summary>
            Property Definition for <see cref="P:XLabs.Forms.Validation.Rule.Maximum"/>
            </summary>
            Element created at 07/11/2014,3:02 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.MinimumLengthProperty">
            <summary>
            The minimum length property
            </summary>
            Element created at 07/11/2014,4:00 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.MinimumProperty">
            <summary>
            Property Definition for <see cref="P:XLabs.Forms.Validation.Rule.Minimum"/>
            </summary>
            Element created at 07/11/2014,3:01 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.PropertyProperty">
            <summary>
            Property definition for <see cref="P:XLabs.Forms.Validation.Rule.Property"/>
            </summary>
            Element created at 07/11/2014,4:45 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.RegexProperty">
            <summary>
            Property Definition for <see cref="P:XLabs.Forms.Validation.Rule.Regex"/>
            </summary>
            Element created at 07/11/2014,3:03 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.ResultCallbackProperty">
            <summary>
            Property definition for <see cref="P:XLabs.Forms.Validation.Rule.ResultCallback"/>
            </summary>
            Element created at 07/11/2014,11:49 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.RuleNameProperty">
            <summary>
            Property definition for <see cref="P:XLabs.Forms.Validation.Rule.RuleName"/>
            </summary>
            Element created at 07/11/2014,11:49 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.ValidatorsProperty">
            <summary>
            Property Definition for <see cref="P:XLabs.Forms.Validation.Rule.Validators"/>
            </summary>
            Element created at 07/11/2014,2:54 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.UserValidatorPredicates">
            <summary>
            The user validator predicates
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.Rule.AvailablePredicates">
            <summary>
            The available predicates
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.Rule._predicates">
            <summary>
            The _predicates
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.Rule._pi">
            <summary>
            The _pi
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.Rule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.Rule"/> class.
            </summary>
            Element created at 08/11/2014,1:11 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Validation.Rule.AddValidator(System.String,System.Func{XLabs.Forms.Validation.Rule,System.String,System.Boolean})">
            <summary>
            Adds a user supplied validator to the list of availble validators.
            </summary>
            <param name="name">The name.</param>
            <param name="predicate">The predicate.</param>
            Element created at 08/11/2014,2:47 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Validation.Rule.Connect(XLabs.Forms.Validation.RuleSet)">
            <summary>
            Connects this Rule to it's property.
            </summary>
            <param name="vs">The parent <see cref="T:XLabs.Forms.Validation.RuleSet"/>.</param>
            Element created at 07/11/2014,6:19 AM by Charles
        </member>
        <member name="M:XLabs.Forms.Validation.Rule.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.Rule.IsSatisfied">
            <summary>
            Determines whether this instance is satisfied.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.Rule.ElementPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Elements the property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.UserDefined">
            <summary>
            Gets or sets the user defined validators to use.
            If there is more than one use a comma separated list
            </summary>
            <value>The user defined validators.</value>
            Element created at 08/11/2014,2:55 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Actions">
            <summary>
            Gets or sets the actions to run when this rule is evaluated.
            </summary>
            <value>The actions.</value>
            Element created at 08/11/2014,12:44 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Callback">
            <summary>
            Gets or sets the user predicate.
            </summary>
            <value>The predicate.</value>
            Element created at 07/11/2014,10:48 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Element">
            <summary>
            Gets or sets the element the element to be validated.
            The validated element must be a bindable object
            </summary>
            <value>The element.</value>
            Element created at 07/11/2014,2:54 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum value for numeric comparsions.</value>
            Element created at 07/11/2014,6:18 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.MaximumLength">
            <summary>
            Gets or sets the maximum string length.
            </summary>
            <value>The maximum length.</value>
            Element created at 07/11/2014,4:01 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum value for numeric comparsions.</value>
            Element created at 07/11/2014,6:18 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.MinimumLength">
            <summary>
            Gets or sets the minimum string length.
            </summary>
            <value>The minimum length.</value>
            Element created at 07/11/2014,4:01 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Property">
            <summary>
            Gets or sets the property.
            </summary>
            <value>The property whose value is being validated.</value>
            Element created at 07/11/2014,6:19 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Regex">
            <summary>
            Gets or sets the regular expression to match against
            </summary>
            <value>The regular expression <see cref="P:XLabs.Forms.Validation.Rule.Regex"/></value>
            Element created at 07/11/2014,3:04 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.ResultCallback">
            <summary>
            Gets or sets the result callback.
            The result callback, if present, is called everytime this rule is evaluated
            </summary>
            <value>The result callback.</value>
            Element created at 07/11/2014,11:50 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.RuleName">
            <summary>
            Gets or sets the name of the rule, this value is passed into the ResultCallback.
            </summary>
            <value>The name of the rule.</value>
            Element created at 07/11/2014,11:50 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Validators">
            <summary>
            Gets or sets the set of validators to exectue.
            </summary>
            <value><see cref="P:XLabs.Forms.Validation.Rule.Validators"/></value>
            Element created at 07/11/2014,2:55 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
            <value>The property information.</value>
            <exception cref="T:XLabs.Exceptions.PropertyNotFoundException"></exception>
            <exception cref="T:XLabs.Exceptions.PropertyNotFoundException">Thrown if the specified property cannot be found</exception>
            Element created at 07/11/2014,12:01 PM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:XLabs.Forms.Validation.Rule.LastResult">
            <summary>
            Gets or sets a value indicating whether [last result].
            </summary>
            <value><c>null</c> if [last result] contains no value, <c>true</c> if [last result]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Forms.Validation.RuleResult">
            <summary>
            The result of a validation (a single rule or an entire validationset)
            </summary>
            Element created at 08/11/2014,12:57 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.RuleResult.Unknown">
            <summary>Empty value, we should never see it in the wild</summary>
            Element created at 08/11/2014,12:57 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.RuleResult.ValidationSuccess">
            <summary>The validation was successful</summary>
            Element created at 08/11/2014,12:58 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.RuleResult.ValidationFailure">
            <summary>The validation failed</summary>
            Element created at 08/11/2014,12:58 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.RuleResult.ValidationNoChange">
            <summary>
            There was no change from the last validation attempt
            </summary>
            Element created at 08/11/2014,12:58 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Validation.Rules">
            <summary>
                A collection of Rule
            </summary>
            Element created at 07/11/2014,3:07 AM by Charles
        </member>
        <member name="T:XLabs.Forms.Validation.RuleSet">
            <summary>
                A set of validation elements
                When all of the contained Rules are
                satisified the RuleSet signals Valid via the
                <see cref="P:XLabs.Forms.Validation.RuleSet.IsValid"/> bindable property /&gt;
            </summary>
            Element created at 07/11/2014,3:08 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.RuleSet.ActionsProperty">
            <summary>Property Defintion for <see cref="P:XLabs.Forms.Validation.RuleSet.Actions"/></summary>
            Element created at 07/11/2014,6:12 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.RuleSet.IsValidProperty">
            <summary>Property Definition for <see cref="P:XLabs.Forms.Validation.RuleSet.IsValid"/></summary>
            Element created at 07/11/2014,6:12 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.RuleSet.RulesProperty">
            <summary>Property Definition for <see cref="P:XLabs.Forms.Validation.RuleSet.Rules"/></summary>
            Element created at 07/11/2014,6:13 AM by Charles
        </member>
        <member name="M:XLabs.Forms.Validation.RuleSet.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.RuleSet"/> class.
            </summary>
            Element created at 07/11/2014,6:13 AM by Charles
        </member>
        <member name="M:XLabs.Forms.Validation.RuleSet.CheckState">
            <summary>
                Checks the state on each property change.
                Actions are applied from the least specific
                to the most specific:
                Generic Validation set actions
                Targeted Validation set actions
                Actions owned by a rule
            </summary>
            Element created at 08/11/2014,3:02 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.RuleSet.Actions">
            <summary>Gets or sets the actions.</summary>
            <value>The actions.</value>
            Element created at 07/11/2014,6:14 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.RuleSet.IsValid">
            <summary>
                Gets or sets a value indicating whether this RuleSet is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
            Element created at 07/11/2014,6:13 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.RuleSet.Rules">
            <summary>Gets or sets the rules.</summary>
            <value>The rules.</value>
            Element created at 07/11/2014,6:14 AM by Charles
        </member>
        <member name="T:XLabs.Forms.Validation.UserValidator">
            <summary>
            Class UserValidator.
            </summary>
        </member>
        <member name="T:XLabs.Forms.Validation.ValidatorPredicate">
            <summary>
            Class ValidatorPredicate.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.ValidatorPredicate._evaluator">
            <summary>
            The _evaluator
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.ValidatorPredicate._id">
            <summary>
            The _id
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidatorPredicate.#ctor(XLabs.Forms.Validation.Validators,XLabs.Forms.Validation.PredicatePriority,System.Func{XLabs.Forms.Validation.Rule,System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.ValidatorPredicate"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="priority">The priority.</param>
            <param name="eval">The eval.</param>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidatorPredicate.IsA(XLabs.Forms.Validation.Validators)">
            <summary>
            Determines whether the specified identifier is a.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns><c>true</c> if the specified identifier is a; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:XLabs.Forms.Validation.ValidatorPredicate.Predicate">
            <summary>
            Gets the predicate.
            </summary>
            <value>The predicate.</value>
        </member>
        <member name="P:XLabs.Forms.Validation.ValidatorPredicate.ValidatorType">
            <summary>
            Gets the type of the validator.
            </summary>
            <value>The type of the validator.</value>
        </member>
        <member name="P:XLabs.Forms.Validation.ValidatorPredicate.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:XLabs.Forms.Validation.UserValidator.#ctor(XLabs.Forms.Validation.Validators,XLabs.Forms.Validation.PredicatePriority,System.Func{XLabs.Forms.Validation.Rule,System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.ValidatorPredicate"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="priority">The priority.</param>
            <param name="eval">The eval.</param>
        </member>
        <member name="P:XLabs.Forms.Validation.UserValidator.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="T:XLabs.Forms.Validation.ValidateAlphaNumeric">
            <summary>
            Class ValidateAlphaNumeric.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.ValidateAlphaNumeric.AlphaNumeric">
            <summary>
            The alpha numeric
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateAlphaNumeric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.ValidateAlphaNumeric"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateAlphaNumeric.IsAlphaNumeric(XLabs.Forms.Validation.Rule,System.String)">
            <summary>
            Determines whether [is alpha numeric] [the specified rule].
            </summary>
            <param name="rule">The rule.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is alpha numeric] [the specified rule]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:XLabs.Forms.Validation.ValidateAlphaOnly">
            <summary>
            Class ValidateAlphaOnly.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.ValidateAlphaOnly.AlphaOnly">
            <summary>
            The alpha only
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateAlphaOnly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.ValidateAlphaOnly"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateAlphaOnly.IsAlphaOnly(XLabs.Forms.Validation.Rule,System.String)">
            <summary>
            Determines whether [is alpha only] [the specified rule].
            </summary>
            <param name="rule">The rule.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is alpha only] [the specified rule]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:XLabs.Forms.Validation.ValidateDateTime">
            <summary>
            Class ValidateDateTime.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.ValidateDateTime.LongDate">
            <summary>
            The long date
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.ValidateDateTime.ShortDate">
            <summary>
            The short date
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateDateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.ValidateDateTime"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateDateTime.IsDateTime(XLabs.Forms.Validation.Rule,System.String)">
            <summary>
            Determines whether [is date time] [the specified rule].
            </summary>
            <param name="rule">The rule.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is date time] [the specified rule]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:XLabs.Forms.Validation.ValidateEmailAddress">
            <summary>
            Class ValidateEmailAddress.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.ValidateEmailAddress.EmailAddress">
            <summary>
            The email address
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateEmailAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.ValidateEmailAddress"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateEmailAddress.IsEmailAddress(XLabs.Forms.Validation.Rule,System.String)">
            <summary>
            Determines whether [is email address] [the specified rule].
            </summary>
            <param name="rule">The rule.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is email address] [the specified rule]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:XLabs.Forms.Validation.ValidateNumericOnly">
            <summary>
            Class ValidateNumericOnly.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Validation.ValidateNumericOnly.Numeric">
            <summary>
            The numeric
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateNumericOnly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.ValidateNumericOnly"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Forms.Validation.ValidateNumericOnly.IsAlphaNumeric(XLabs.Forms.Validation.Rule,System.String)">
            <summary>
            Determines whether [is alpha numeric] [the specified rule].
            </summary>
            <param name="rule">The rule.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is alpha numeric] [the specified rule]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:XLabs.Forms.Validation.ValidationSets">
            <summary>
                A Validation Set succeds or fails entirely
                If it succeeds then all Valid properties from
                the actions are applied.  If it fails
                then all InValid properties are applied
            </summary>
            Element created at 07/11/2014,6:11 AM by Charles
        </member>
        <member name="T:XLabs.Forms.Validation.Validator">
            <summary>
                A bindable object that performs validation and
                allows the setting of properties based on
                validation results.
                A Validator must be put in the ResourceDictionary
                As it does not inherit form VisualElement.
            </summary>
            Element created at 07/11/2014,6:09 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validator.SetsProperty">
            <summary>The Set of Validations</summary>
            Element created at 07/11/2014,12:00 PM by Charles
        </member>
        <member name="M:XLabs.Forms.Validation.Validator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:XLabs.Forms.Validation.Validator"/> class.
            </summary>
            Element created at 07/11/2014,6:10 AM by Charles
        </member>
        <member name="P:XLabs.Forms.Validation.Validator.Sets">
            <summary>Gets or sets the list of ValiationSets.</summary>
            <value>The sets.</value>
            Element created at 07/11/2014,6:11 AM by Charles
        </member>
        <member name="T:XLabs.Forms.Validation.Validators">
            <summary>The set of available validators</summary>
            Element created at 07/11/2014,2:56 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.None">
            <summary>No validators</summary>
            Element created at 07/11/2014,2:55 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.Required">
            <summary>A value must be present</summary>
            Element created at 07/11/2014,2:56 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.Email">
            <summary>The string value must be a valid email address</summary>
            Element created at 07/11/2014,2:56 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.GreaterThan">
            <summary>The minimum numeric value</summary>
            Element created at 07/11/2014,2:57 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.LessThan">
            <summary>The maximum numeric value</summary>
            Element created at 07/11/2014,2:57 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.Pattern">
            <summary>A regex pattern that must be matched</summary>
            Element created at 07/11/2014,2:58 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.Between">
            <summary>The numeric value is between <see cref="P:XLabs.Forms.Validation.Rule.Minimum"/> and <see cref="P:XLabs.Forms.Validation.Rule.Maximum"/>/&gt;</summary>
            Element created at 07/11/2014,10:41 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.Predicate">
            <summary>Calls a user supplied predicate to validate the value</summary>
            Element created at 07/11/2014,10:49 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.DateTime">
            <summary>Verifies the value is a datetime</summary>
            Element created at 07/11/2014,11:07 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.Numeric">
            <summary>Verifies the value is numeric</summary>
            Element created at 07/11/2014,11:17 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.Integer">
            <summary>Verifies the value is an integer</summary>
            Element created at 07/11/2014,11:21 AM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.MinLength">
            <summary>Verifies the minimum string length of the property</summary>
            Element created at 07/11/2014,3:52 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.MaxLength">
            <summary>Verifies the maximum string length of the property</summary>
            Element created at 07/11/2014,3:52 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.AlphaOnly">
            <summary>Allows letters only (Unicode support)</summary>
            Element created at 07/11/2014,3:56 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.AlphaNumeric">
            <summary>Allows letters and numbers (Unicode support)</summary>
            Element created at 07/11/2014,3:57 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.NumericOnly">
            <summary>Allows only numbers</summary>
            Element created at 09/11/2014,9:50 PM by Charles
        </member>
        <member name="F:XLabs.Forms.Validation.Validators.UserSupplied">
            <summary>A user created Validator</summary>
            Element created at 08/11/2014,2:44 PM by Charles
        </member>
        <member name="T:XLabs.Forms.Controls.ExtendedPicker">
            <summary>
            Extends the Picker Class to add additional features not supported out of the box by Xamarin.
            Features Add:
            DataBinding
            </summary>
        </member>
        <member name="M:XLabs.Forms.Controls.ExtendedPicker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedPicker.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:XLabs.Forms.Controls.ExtendedPicker.SelectedItem" /> property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedPicker.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:XLabs.Forms.Controls.ExtendedPicker.ItemSource" /> property.
            </summary>
        </member>
        <member name="F:XLabs.Forms.Controls.ExtendedPicker.DisplayPropertyProperty">
            <summary>
            Identifies the <see cref="P:XLabs.Forms.Controls.ExtendedPicker.DisplayProperty" /> property.
            </summary>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedPicker.ItemsSource">
            <summary>
            Accepts an <see cref="T:System.Collections.IList"/> which is used to populate the picker with data. 
            By default the <see cref="M:System.Object.ToString"/> is displayed.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedPicker.SelectedItem">
            <summary>
            Sets the item currently displayed in the UI. 
            This works by finding the index of the item in the backing data and then updateing <see cref="P:Xamarin.Forms.Picker.SelectedIndex" />  
            so the two object need the same ref. 
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:XLabs.Forms.Controls.ExtendedPicker.DisplayProperty">
            <summary>
            A string used in reflection to identify the property to use as the display property of the object. 
            If this is not specified the <see cref="M:System.Object.ToString"/> is used.
            </summary>
            <value>The display property.</value>
        </member>
    </members>
</doc>
