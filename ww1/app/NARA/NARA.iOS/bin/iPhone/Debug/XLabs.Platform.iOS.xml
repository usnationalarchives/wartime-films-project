<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XLabs.Platform.iOS</name>
    </assembly>
    <members>
        <member name="T:XLabs.Platform.Device.Accelerometer">
            <summary>
            The accelerometer.
            </summary>
            <summary>
            Class Accelerometer.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Accelerometer.Gravitation">
            <summary>
            Gravitational force is 9.81 m/s^2
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Accelerometer._interval">
            <summary>
            The _interval
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Accelerometer.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Accelerometer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Accelerometer.HandleAcceleration(System.Object,UIKit.UIAccelerometerEventArgs)">
            <summary>
            Handles the acceleration.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:UIKit.UIAccelerometerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Device.Accelerometer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.Accelerometer"/> class.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Accelerometer.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="E:XLabs.Platform.Device.Accelerometer.ReadingAvailable">
            <summary>
            The reading available event handler.
            </summary>
        </member>
        <member name="E:XLabs.Platform.Device.Accelerometer.readingAvailable">
            <summary>
            Occurs when [reading available].
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Accelerometer.LatestReading">
            <summary>
            Gets the latest reading.
            </summary>
            <value>The latest reading.</value>
        </member>
        <member name="T:XLabs.Platform.Device.AppleDevice">
            <summary>
            Apple device base class.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.PhoneExpression">
            <summary>
            The iPhone expression.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.PodExpression">
            <summary>
            The iPod expression.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.PadExpression">
            <summary>
            The iPad expression.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.CtlHw">
            <summary>
            Generic CPU/IO.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.HwPhysmem">
            <summary>
            Total memory.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.device">
            <summary>
            The device.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.fileManager">
            <summary>
            The file manager
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.bluetoothHub">
            <summary>
            Reference to the Bluetooth hub singleton.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.AppleDevice.microphone">
            <summary>
            Microphone audio stream.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.AppleDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.AppleDevice"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.AppleDevice.sysctlbyname(System.String,System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Sysctlbynames the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="output">The output.</param>
            <param name="oldLen">The old length.</param>
            <param name="newp">The newp.</param>
            <param name="newlen">The newlen.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:XLabs.Platform.Device.AppleDevice.GetSystemProperty(System.String)">
            <summary>
            Gets the system property.
            </summary>
            <param name="property">Property to get.</param>
            <returns>The system property value.</returns>
        </member>
        <member name="M:XLabs.Platform.Device.AppleDevice.LaunchUriAsync(System.Uri)">
            <summary>
            Starts the default app associated with the URI for the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>The launch operation.</returns>
        </member>
        <member name="M:XLabs.Platform.Device.AppleDevice.GetDeviceInfo">
            <summary>
            Gets the hardware's <see cref="T:XLabs.Platform.Device.DeviceInfo"/>.
            </summary>
            <returns><see cref="T:XLabs.Platform.Device.DeviceInfo"/></returns>
            <exception cref="T:System.Exception">Throws an exception if unable to determine device type.</exception>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.CurrentDevice">
            <summary>
            Gets the runtime device for Apple's devices.
            </summary>
            <value>The current device.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Id">
            <summary>
            Gets Unique Id for the device.
            </summary>
            <value>The id for the device.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Display">
            <summary>
            Gets or sets the display information for the device.
            </summary>
            <value>The display.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.PhoneService">
            <summary>
            Gets or sets the phone service for this device.
            </summary>
            <value>Phone service instance if available, otherwise null.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Battery">
            <summary>
            Gets or sets the battery for the device.
            </summary>
            <value>The battery.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.MediaPicker">
            <summary>
            Gets the picture chooser.
            </summary>
            <value>The picture chooser.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Network">
            <summary>
            Gets the network service.
            </summary>
            <value>The network service.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Accelerometer">
            <summary>
            Gets or sets the accelerometer for the device if available
            </summary>
            <value>Instance of IAccelerometer if available, otherwise null.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Gyroscope">
            <summary>
            Gets the gyroscope.
            </summary>
            <value>The gyroscope instance if available, otherwise null.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Microphone">
            <summary>
            Gets the audio stream from the device's microphone.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.FileManager">
            <summary>
            Gets the file manager for the device.
            </summary>
            <value>Device file manager.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Name">
            <summary>
            Gets or sets the name of the device.
            </summary>
            <value>The name of the device.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.FirmwareVersion">
            <summary>
            Gets or sets the firmware version.
            </summary>
            <value>The firmware version.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.HardwareVersion">
            <summary>
            Gets or sets the hardware version.
            </summary>
            <value>The hardware version.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Manufacturer">
            <summary>
            Gets the manufacturer.
            </summary>
            <value>The manufacturer.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.BluetoothHub">
            <summary>
            Gets the bluetooth hub service.
            </summary>
            <value>The bluetooth hub service if available, otherwise null.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.TotalMemory">
            <summary>
            Gets the total memory in bytes.
            </summary>
            <value>The total memory in bytes.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.LanguageCode">
            <summary>
            Gets the language code.
            </summary>
            <value>The language code.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.TimeZoneOffset">
            <summary>
            Gets the time zone offset.
            </summary>
            <value>The time zone offset.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.TimeZone">
            <summary>
            Gets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="P:XLabs.Platform.Device.AppleDevice.Orientation">
            <summary>
            Gets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="T:XLabs.Platform.Device.Battery">
            <summary>
                Battery portion for Apple devices.
            </summary>
            <summary>
            Class Battery.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Battery.StartLevelMonitoring">
            <summary>
                Starts the level monitor.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Battery.StopLevelMonitoring">
            <summary>
                Stops the level monitoring.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Battery.StopChargerMonitoring">
            <summary>
                Stops the charger monitoring.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Battery.StartChargerMonitoring">
            <summary>
                Starts the charger monitoring.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Battery.Level">
            <summary>
                Gets the battery level.
            </summary>
            <returns>Battery level in percentage, 0-100</returns>
        </member>
        <member name="P:XLabs.Platform.Device.Battery.Charging">
            <summary>
                Gets a value indicating whether this <see cref="T:XLabs.Platform.Device.Battery"/> is charging.
            </summary>
            <value><c>true</c> if charging; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:XLabs.Platform.Device.Battery.OnLevelChange">
            <summary>
            Event handler for battery level changes.
            </summary>
        </member>
        <member name="E:XLabs.Platform.Device.Battery.OnChargerStatusChanged">
            <summary>
            Event handler for charger connection changes.
            </summary>
        </member>
        <member name="E:XLabs.Platform.Device.Battery.onLevelChange">
            <summary>
            Private event handler for battery level changes.
            </summary>
        </member>
        <member name="E:XLabs.Platform.Device.Battery.onChargerStatusChanged">
            <summary>
            Private event handler for charger connection changes.
            </summary>
        </member>
        <member name="T:XLabs.Platform.Device.BluetoothDevice">
            <summary>
            Class BluetoothDevice.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.BluetoothDevice.device">
            <summary>
            The device
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothDevice.#ctor(CoreBluetooth.CBPeripheral)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.BluetoothDevice"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothDevice.Connect">
            <summary>
            Connects this instance.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothDevice.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:XLabs.Platform.Device.BluetoothDevice.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:XLabs.Platform.Device.BluetoothDevice.Address">
            <summary>
            Gets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:XLabs.Platform.Device.BluetoothDevice.InputStream">
            <summary>
            Gets the input stream.
            </summary>
            <value>The input stream.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:XLabs.Platform.Device.BluetoothDevice.OutputStream">
            <summary>
            Gets the output stream.
            </summary>
            <value>The output stream.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:XLabs.Platform.Device.BluetoothDevice.BtDelegate">
            <summary>
            Class BtDelegate.
            </summary>
        </member>
        <member name="T:XLabs.Platform.Device.BluetoothHub">
            <summary>
            Class BluetoothHub.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.BluetoothHub.SerialPortUuid">
            <summary>
            The serial port UUID
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.BluetoothHub.TransferServiceUuid">
            <summary>
            The transfer service UUID
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.BluetoothHub.TransferCharacteristicUuid">
            <summary>
            The transfer characteristic UUID
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.BluetoothHub.manager">
            <summary>
            The manager
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothHub.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.BluetoothHub"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothHub.GetPairedDevices">
            <summary>
            Gets the paired devices.
            </summary>
            <returns>Task&lt;IReadOnlyList&lt;IBluetoothDevice&gt;&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothHub.manager_DiscoveredPeripheral(System.Object,CoreBluetooth.CBDiscoveredPeripheralEventArgs)">
            <summary>
            Handles the DiscoveredPeripheral event of the manager control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:CoreBluetooth.CBDiscoveredPeripheralEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothHub.ManagerOnRetrievedConnectedPeripherals(System.Object,CoreBluetooth.CBPeripheralsEventArgs)">
            <summary>
            Managers the on retrieved connected peripherals.
            </summary>
            <param name="sender">The sender.</param>
            <param name="cbPeripheralsEventArgs">The <see cref="T:CoreBluetooth.CBPeripheralsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothHub.OpenSettings">
            <summary>
            Opens the settings.
            </summary>
            <returns>Task.</returns>
            <exception cref="T:System.NotSupportedException">iOS does not support opening Bluetooth settings.</exception>
        </member>
        <member name="M:XLabs.Platform.Device.BluetoothHub.UpdatedState(CoreBluetooth.CBCentralManager)">
            <summary>
            Updateds the state.
            </summary>
            <param name="central">The central.</param>
        </member>
        <member name="P:XLabs.Platform.Device.BluetoothHub.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:XLabs.Platform.Device.BluetoothHub"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Platform.Device.DeviceInfo">
            <summary>
            Apple device base information.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.DeviceInfo.Type">
            <summary>
            Gets the type of device.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.DeviceInfo.MajorVersion">
            <summary>
            Device major version.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.DeviceInfo.MinorVersion">
            <summary>
            Device minor version.
            </summary>
        </member>
        <member name="T:XLabs.Platform.Device.DeviceType">
            <summary>
            Apple device type enumeration.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.DeviceType.Phone">
            <summary>
            Device is an iPhone.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.DeviceType.Pad">
            <summary>
            Device is an iPad.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.DeviceType.Pod">
            <summary>
            Device is an iPod.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.DeviceType.Simulator">
            <summary>
            Device is a simulator.
            </summary>
        </member>
        <member name="T:XLabs.Platform.Device.Display">
            <summary>
                Apple Display class.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Display.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:XLabs.Platform.Device.Display"/> class.
            </summary>
            <param name="height">Height in pixels.</param>
            <param name="width">Width in pixels.</param>
            <param name="xdpi">Pixel density for X.</param>
            <param name="ydpi">Pixel density for  Y.</param>
        </member>
        <member name="M:XLabs.Platform.Device.Display.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents the current <see cref="T:XLabs.Platform.Device.Display"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:XLabs.Platform.Device.Display"/>.</returns>
        </member>
        <member name="M:XLabs.Platform.Device.Display.WidthRequestInInches(System.Double)">
            <summary>
                Convert width in inches to runtime pixels
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Display.HeightRequestInInches(System.Double)">
            <summary>
                Convert height in inches to runtime pixels
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Display.Height">
            <summary>
                Gets the screen height in pixels
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Display.Width">
            <summary>
                Gets the screen width in pixels
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Display.Xdpi">
            <summary>
                Gets the screens X pixel density per inch
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Display.Ydpi">
            <summary>
                Gets the screens Y pixel density per inch
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Display.Scale">
            <summary>
            Gets the scale value of the display.
            </summary>
        </member>
        <member name="T:XLabs.Platform.Device.Gyroscope">
            <summary>
            Class Gyroscope.
            </summary>
            <summary>
            Class Gyroscope.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Gyroscope._motionManager">
            <summary>
            The _motion manager
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Gyroscope.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Gyroscope.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Gyroscope.OnUpdate(CoreMotion.CMGyroData,Foundation.NSError)">
            <summary>
            Called when [update].
            </summary>
            <param name="gyroData">The gyro data.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:XLabs.Platform.Device.Gyroscope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.Gyroscope"/> class.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Gyroscope.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:XLabs.Platform.Device.Gyroscope.IsSupported">
            <summary>
            Gets a value indicating whether this instance is supported.
            </summary>
            <value><c>true</c> if this instance is supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:XLabs.Platform.Device.Gyroscope.readingAvailable">
            <summary>
            Occurs when [reading available].
            </summary>
        </member>
        <member name="E:XLabs.Platform.Device.Gyroscope.ReadingAvailable">
            <summary>
            Occurs when [reading available].
            </summary>
        </member>
        <member name="P:XLabs.Platform.Device.Gyroscope.LatestReading">
            <summary>
            Gets the latest reading vector
            </summary>
            <value>Rotation values in radians per second</value>
        </member>
        <member name="T:XLabs.Platform.Device.Pad">
            <summary>
            Apple iPad.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Pad.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.Pad"/> class.
            </summary>
            <param name="majorVersion">Major version.</param>
            <param name="minorVersion">Minor version.</param>
        </member>
        <member name="P:XLabs.Platform.Device.Pad.Version">
            <summary>
            Gets the version of the iPad.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:XLabs.Platform.Device.Pad.IPadVersion">
            <summary>
            Enum IPadVersion
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad1">
            <summary>
            The i pad1
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad2Wifi">
            <summary>
            The i pad2 wifi
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad2Gsm">
            <summary>
            The i pad2 GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad2Cdma">
            <summary>
            The i pad2 cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad2WifiEmc2560">
            <summary>
            The i pad2 wifi emc2560
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadMiniWifi">
            <summary>
            The i pad mini wifi
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadMiniGsm">
            <summary>
            The i pad mini GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadMiniCdma">
            <summary>
            The i pad mini cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad3Wifi">
            <summary>
            The i pad3 wifi
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad3Cdma">
            <summary>
            The i pad3 cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad3Gsm">
            <summary>
            The i pad3 GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad4Wifi">
            <summary>
            The i pad4 wifi
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad4Gsm">
            <summary>
            The i pad4 GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPad4Cdma">
            <summary>
            The i pad4 cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadAirWifi">
            <summary>
            The i pad air wifi
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadAirGsm">
            <summary>
            The i pad air GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadAirCdma">
            <summary>
            The i pad air cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadMini2GWiFi">
            <summary>
            The i pad mini2 g wi fi
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadMini2GCellular">
            <summary>
            The i pad mini2 g cellular
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadMini3">
            <summary>
            The i pad mini3
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadMini3Wifi">
            <summary>
            The i pad mini3 Wifi
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pad.IPadVersion.IPadMini3Lte">
            <summary>
            The i pad mini3 Wifi
            </summary>
        </member>
        <member name="T:XLabs.Platform.Device.Phone">
            <summary>
            Apple iPhone.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Phone.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.Phone"/> class.
            </summary>
            <param name="majorVersion">Major version.</param>
            <param name="minorVersion">Minor version.</param>
        </member>
        <member name="P:XLabs.Platform.Device.Phone.Version">
            <summary>
            Gets the version of iPhone.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:XLabs.Platform.Device.Phone.PhoneType">
            <summary>
            The phone type.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.Unknown">
            <summary>
            Unknown phone type.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone1G">
            <summary>
            The iPhone 1G.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone3G">
            <summary>
            The i phone3 g
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone3Gs">
            <summary>
            The i phone3 gs
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone4Gsm">
            <summary>
            The i phone4 GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone4Cdma">
            <summary>
            The i phone4 cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone4S">
            <summary>
            The i phone4 s
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone5Gsm">
            <summary>
            The i phone5 GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone5Cdma">
            <summary>
            The i phone5 cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone5CCdma">
            <summary>
            The i phone5 c cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone5CGsm">
            <summary>
            The i phone5 c GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone5SCdma">
            <summary>
            The i phone5 s cdma
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone5SGsm">
            <summary>
            The i phone5 s GSM
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone6">
            <summary>
            The i phone6
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Phone.PhoneType.IPhone6Plus">
            <summary>
            The i phone6 plus
            </summary>
        </member>
        <member name="T:XLabs.Platform.Device.Pod">
            <summary>
            Apple iPod.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Pod.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.Pod"/> class.
            </summary>
            <param name="majorVersion">Major version.</param>
            <param name="minorVersion">Minor version.</param>
        </member>
        <member name="P:XLabs.Platform.Device.Pod.Version">
            <summary>
            Gets the version of iPod.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:XLabs.Platform.Device.Pod.PodVersion">
            <summary>
            Enum PodVersion
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pod.PodVersion.FirstGeneration">
            <summary>
            The first generation
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pod.PodVersion.SecondGeneration">
            <summary>
            The second generation
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pod.PodVersion.ThirdGeneration">
            <summary>
            The third generation
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pod.PodVersion.FourthGeneration">
            <summary>
            The fourth generation
            </summary>
        </member>
        <member name="F:XLabs.Platform.Device.Pod.PodVersion.FifthGeneration">
            <summary>
            The fifth generation
            </summary>
        </member>
        <member name="T:XLabs.Platform.Device.Simulator">
            <summary>
            Apple device Simulator.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Device.Simulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Device.Simulator"/> class.
            </summary>
        </member>
        <member name="T:XLabs.Platform.Extensions.EnumExtensions">
            <summary>
            Class EnumExtensions.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Gets the description.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:XLabs.Platform.Extensions.NsDataStream">
            <summary>
                Class NsDataStream.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Extensions.NsDataStream._data">
            <summary>
                The _data
            </summary>
        </member>
        <member name="M:XLabs.Platform.Extensions.NsDataStream.#ctor(Foundation.NSData)">
            <summary>
                Initializes a new instance of the <see cref="T:XLabs.Platform.Extensions.NsDataStream"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:XLabs.Platform.Extensions.NsDataStream.Dispose(System.Boolean)">
            <summary>
                Releases the unmanaged resources used by the <see cref="T:System.IO.UnmanagedMemoryStream" /> and optionally
                releases the managed resources.
            </summary>
            <param name="disposing">
                true to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="T:XLabs.Platform.Extensions.StringExtensions">
            <summary>
            Class StringExtensions.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Extensions.StringExtensions.StringHeight(System.String,UIKit.UIFont,System.nfloat)">
            <summary>
            Gets the height of a string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="width">The width.</param>
            <returns>nfloat.</returns>
        </member>
        <member name="M:XLabs.Platform.Extensions.StringExtensions.ToNativeString(System.String)">
            <summary>
            To the native string.
            </summary>
            <param name="text">The text.</param>
            <returns>NSString.</returns>
        </member>
        <member name="M:XLabs.Platform.Extensions.StringExtensions.StringRect(System.String,UIKit.UIFont,System.nfloat)">
            <summary>
            Gets the rectangle of a string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="width">The width.</param>
            <returns>CGRect.</returns>
        </member>
        <member name="M:XLabs.Platform.Extensions.StringExtensions.StringSize(System.String,UIKit.UIFont)">
            <summary>
            Strings the size.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <returns>CGSize.</returns>
        </member>
        <member name="T:XLabs.Platform.Extensions.UiViewExtensions">
            <summary>
            Class UiViewExtensions.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Extensions.UiViewExtensions.StreamToPng(UIKit.UIView,System.IO.Stream)">
            <summary>
            Streams to PNG.
            </summary>
            <param name="view">The view.</param>
            <param name="stream">The stream.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:XLabs.Platform.Extensions.UiViewExtensions.ToNativeImage(UIKit.UIView)">
            <summary>
            Takes an image of the view.
            </summary>
            <param name="view">View to process to image.</param>
            <returns>A native image of type <see cref="T:UIKit.UIImage"/>.</returns>
        </member>
        <member name="M:XLabs.Platform.Extensions.UiViewExtensions.ToBitmapContext(CoreGraphics.CGSize)">
            <summary>
            To the bitmap context.
            </summary>
            <param name="size">The size.</param>
            <returns>CGBitmapContext.</returns>
        </member>
        <member name="T:XLabs.Platform.Services.Email.EmailService">
            <summary>
            Class EmailService.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Email.EmailService.ShowDraft(System.String,System.String,System.Boolean,System.String[],System.String[],System.String[],System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Shows the draft.
            </summary>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="html">if set to <c>true</c> [HTML].</param>
            <param name="to">To.</param>
            <param name="cc">The cc.</param>
            <param name="bcc">The BCC.</param>
            <param name="attachments">The attachments.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Email.EmailService.ShowDraft(System.String,System.String,System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Shows the draft.
            </summary>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="html">if set to <c>true</c> [HTML].</param>
            <param name="to">To.</param>
            <param name="attachments">The attachments.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Email.EmailService.GetMimeType(System.String)">
            <summary>
            Gets the type of the MIME.
            </summary>
            <param name="filename">The filename.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:XLabs.Platform.Services.Email.EmailService.CanSend">
            <summary>
            Gets a value indicating whether this instance can send.
            </summary>
            <value><c>true</c> if this instance can send; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate">
            <summary>
            Class GeolocationSingleUpdateDelegate.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate._bestHeading">
            <summary>
            The _best heading
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate._haveHeading">
            <summary>
            The _have heading
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate._haveLocation">
            <summary>
            The _have location
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate._desiredAccuracy">
            <summary>
            The _desired accuracy
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate._includeHeading">
            <summary>
            The _include heading
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate._manager">
            <summary>
            The _manager
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate._position">
            <summary>
            The _position
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate._tcs">
            <summary>
            The _TCS
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate.#ctor(CoreLocation.CLLocationManager,System.Double,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="desiredAccuracy">The desired accuracy.</param>
            <param name="includeHeading">if set to <c>true</c> [include heading].</param>
            <param name="timeout">The timeout.</param>
            <param name="cancelToken">The cancel token.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate.AuthorizationChanged(CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus)">
            <summary>
            Authorizations the changed.
            </summary>
            <param name="manager">The manager.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate.Failed(CoreLocation.CLLocationManager,Foundation.NSError)">
            <summary>
            Faileds the specified manager.
            </summary>
            <param name="manager">The manager.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate.ShouldDisplayHeadingCalibration(CoreLocation.CLLocationManager)">
            <summary>
            Shoulds the display heading calibration.
            </summary>
            <param name="manager">The manager.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate.UpdatedLocation(CoreLocation.CLLocationManager,CoreLocation.CLLocation,CoreLocation.CLLocation)">
            <summary>
            Updateds the location.
            </summary>
            <param name="manager">The manager.</param>
            <param name="newLocation">The new location.</param>
            <param name="oldLocation">The old location.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate.UpdatedHeading(CoreLocation.CLLocationManager,CoreLocation.CLHeading)">
            <summary>
            Updateds the heading.
            </summary>
            <param name="manager">The manager.</param>
            <param name="newHeading">The new heading.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate.StopListening">
            <summary>
            Stops the listening.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate.Task">
            <summary>
            Gets the task.
            </summary>
            <value>The task.</value>
        </member>
        <member name="T:XLabs.Platform.Services.Geolocation.Geolocator">
            <summary>
            Class Geolocator.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.Geolocator._position">
            <summary>
            The _position
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Geolocation.Geolocator._manager">
            <summary>
            The _manager
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Services.Geolocation.Geolocator"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.StopListening">
            <summary>
            Stop listening to location changes
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.GetPositionAsync(System.Int32)">
            <summary>
            Gets the position asynchronous.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>Task&lt;Position&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.GetPositionAsync(System.Int32,System.Boolean)">
            <summary>
            Gets the position asynchronous.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="includeHeading">if set to <c>true</c> [include heading].</param>
            <returns>Task&lt;Position&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.GetPositionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the position asynchronous.
            </summary>
            <param name="cancelToken">The cancel token.</param>
            <returns>Task&lt;Position&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.GetPositionAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Gets the position asynchronous.
            </summary>
            <param name="cancelToken">The cancel token.</param>
            <param name="includeHeading">if set to <c>true</c> [include heading].</param>
            <returns>Task&lt;Position&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.GetPositionAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the position asynchronous.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="cancelToken">The cancel token.</param>
            <returns>Task&lt;Position&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.GetPositionAsync(System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Gets the position asynchronous.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="cancelToken">The cancel token.</param>
            <param name="includeHeading">if set to <c>true</c> [include heading].</param>
            <returns>Task&lt;Position&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">timeout;Timeout must be positive or Timeout.Infinite</exception>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.StartListening(System.UInt32,System.Double)">
            <summary>
            Start listening to location changes
            </summary>
            <param name="minTime">Minimum interval in milliseconds</param>
            <param name="minDistance">Minimum distance in meters</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.StartListening(System.UInt32,System.Double,System.Boolean)">
            <summary>
            Start listening to location changes
            </summary>
            <param name="minTime">Minimum interval in milliseconds</param>
            <param name="minDistance">Minimum distance in meters</param>
            <param name="includeHeading">Include heading information</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            minTime
            or
            minDistance
            </exception>
            <exception cref="T:System.InvalidOperationException">Already listening</exception>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.GetManager">
            <summary>
            Gets the manager.
            </summary>
            <returns>CLLocationManager.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.OnUpdatedHeading(System.Object,CoreLocation.CLHeadingUpdatedEventArgs)">
            <summary>
            Handles the <see cref="E:UpdatedHeading"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:CoreLocation.CLHeadingUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.OnLocationsUpdated(System.Object,CoreLocation.CLLocationsUpdatedEventArgs)">
            <summary>
            Handles the <see cref="E:LocationsUpdated"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:CoreLocation.CLLocationsUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.OnUpdatedLocation(System.Object,CoreLocation.CLLocationUpdatedEventArgs)">
            <summary>
            Handles the <see cref="E:UpdatedLocation"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:CoreLocation.CLLocationUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.UpdatePosition(CoreLocation.CLLocation)">
            <summary>
            Updates the position.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.OnFailed(System.Object,Foundation.NSErrorEventArgs)">
            <summary>
            Handles the <see cref="E:Failed"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Foundation.NSErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.OnAuthorizationChanged(System.Object,CoreLocation.CLAuthorizationChangedEventArgs)">
            <summary>
            Handles the <see cref="E:AuthorizationChanged"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:CoreLocation.CLAuthorizationChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.OnPositionChanged(XLabs.Platform.Services.Geolocation.PositionEventArgs)">
            <summary>
            Handles the <see cref="E:PositionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:XLabs.Platform.Services.Geolocation.PositionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Geolocation.Geolocator.OnPositionError(XLabs.Platform.Services.Geolocation.PositionErrorEventArgs)">
            <summary>
            Handles the <see cref="E:PositionError"/> event.
            </summary>
            <param name="e">The <see cref="T:XLabs.Platform.Services.Geolocation.PositionErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:XLabs.Platform.Services.Geolocation.Geolocator.DesiredAccuracy">
            <summary>
            Gets or sets the desired accuracy.
            </summary>
            <value>The desired accuracy.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Geolocation.Geolocator.IsListening">
            <summary>
            Gets a value indicating whether this instance is listening.
            </summary>
            <value><c>true</c> if this instance is listening; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Geolocation.Geolocator.SupportsHeading">
            <summary>
            Gets a value indicating whether [supports heading].
            </summary>
            <value><c>true</c> if [supports heading]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Geolocation.Geolocator.IsGeolocationAvailable">
            <summary>
            Gets a value indicating whether this instance is geolocation available.
            </summary>
            <value><c>true</c> if this instance is geolocation available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Geolocation.Geolocator.IsGeolocationEnabled">
            <summary>
            Gets a value indicating whether this instance is geolocation enabled.
            </summary>
            <value><c>true</c> if this instance is geolocation enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:XLabs.Platform.Services.Geolocation.Geolocator.PositionError">
            <summary>
            Occurs when [position error].
            </summary>
        </member>
        <member name="E:XLabs.Platform.Services.Geolocation.Geolocator.PositionChanged">
            <summary>
            Occurs when [position changed].
            </summary>
        </member>
        <member name="T:XLabs.Platform.Services.Media.MediaPicker">
            <summary>
            Class MediaPicker.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPicker.TypeImage">
            <summary>
            The type image
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPicker.TypeMovie">
            <summary>
            The type movie
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPicker._pickerDelegate">
            <summary>
            The _picker delegate
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPicker._popover">
            <summary>
            The _popover
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Services.Media.MediaPicker"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.SelectPhotoAsync(XLabs.Platform.Services.Media.CameraMediaStorageOptions)">
            <summary>
            Select a picture from library.
            </summary>
            <param name="options">The storage options.</param>
            <returns>Task&lt;IMediaFile&gt;.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.TakePhotoAsync(XLabs.Platform.Services.Media.CameraMediaStorageOptions)">
            <summary>
            Takes the picture.
            </summary>
            <param name="options">The storage options.</param>
            <returns>Task&lt;IMediaFile&gt;.</returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.SelectVideoAsync(XLabs.Platform.Services.Media.VideoMediaStorageOptions)">
            <summary>
            Selects the video asynchronous.
            </summary>
            <param name="options">The options.</param>
            <returns>Task&lt;IMediaFile&gt;.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.TakeVideoAsync(XLabs.Platform.Services.Media.VideoMediaStorageOptions)">
            <summary>
            Takes the video asynchronous.
            </summary>
            <param name="options">The options.</param>
            <returns>Task&lt;IMediaFile&gt;.</returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.GetMediaAsync(UIKit.UIImagePickerControllerSourceType,System.String,XLabs.Platform.Services.Media.MediaStorageOptions)">
            <summary>
            Gets the media asynchronous.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="mediaType">Type of the media.</param>
            <param name="options">The options.</param>
            <returns>Task&lt;MediaFile&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            There's no current active window
            or
            Could not find current view controller
            or
            Only one operation can be active at at time
            </exception>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.SetupController(XLabs.Platform.Services.Media.MediaPickerDelegate,UIKit.UIImagePickerControllerSourceType,System.String,XLabs.Platform.Services.Media.MediaStorageOptions)">
            <summary>
            Setups the controller.
            </summary>
            <param name="mpDelegate">The mp delegate.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="mediaType">Type of the media.</param>
            <param name="options">The options.</param>
            <returns>MediaPickerController.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.GetCameraDevice(XLabs.Platform.Services.Media.CameraDevice)">
            <summary>
            Gets the UI camera device.
            </summary>
            <param name="device">The device.</param>
            <returns>UIImagePickerControllerCameraDevice.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.GetQuailty(XLabs.Platform.Services.Media.VideoQuality)">
            <summary>
            Gets the quailty.
            </summary>
            <param name="quality">The quality.</param>
            <returns>UIImagePickerControllerQualityType.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.VerifyOptions(XLabs.Platform.Services.Media.MediaStorageOptions)">
            <summary>
            Verifies the options.
            </summary>
            <param name="options">The options.</param>
            <exception cref="T:System.ArgumentNullException">options</exception>
            <exception cref="T:System.ArgumentException">options.Directory must be a relative path;options</exception>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPicker.VerifyCameraOptions(XLabs.Platform.Services.Media.CameraMediaStorageOptions)">
            <summary>
            Verifies the camera options.
            </summary>
            <param name="options">The options.</param>
            <exception cref="T:System.ArgumentException">options.Camera is not a member of CameraDevice</exception>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPicker.IsCameraAvailable">
            <summary>
            Gets a value indicating whether this instance is camera available.
            </summary>
            <value><c>true</c> if this instance is camera available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPicker.IsPhotosSupported">
            <summary>
            Gets a value indicating whether this instance is photos supported.
            </summary>
            <value><c>true</c> if this instance is photos supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPicker.IsVideosSupported">
            <summary>
            Gets a value indicating whether this instance is videos supported.
            </summary>
            <value><c>true</c> if this instance is videos supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPicker.OnMediaSelected">
            <summary>
            Event the fires when media has been selected
            </summary>
            <value>The on photo selected.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPicker.OnError">
            <summary>
            Gets or sets the on error.
            </summary>
            <value>The on error.</value>
        </member>
        <member name="T:XLabs.Platform.Services.Media.MediaPickerController">
            <summary>
            Class MediaPickerController. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerController.#ctor(XLabs.Platform.Services.Media.MediaPickerDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Services.Media.MediaPickerController"/> class.
            </summary>
            <param name="mpDelegate">The mp delegate.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerController.GetResultAsync">
            <summary>
            Gets the result asynchronous.
            </summary>
            <returns>Task&lt;MediaFile&gt;.</returns>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPickerController.Delegate">
            <summary>
            Gets or sets the delegate.
            </summary>
            <value>The delegate.</value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:XLabs.Platform.Services.Media.MediaPickerDelegate">
            <summary>
            Class MediaPickerDelegate.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPickerDelegate._orientation">
            <summary>
            The _orientation
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPickerDelegate._observer">
            <summary>
            The _observer
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPickerDelegate._options">
            <summary>
            The _options
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPickerDelegate._source">
            <summary>
            The _source
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPickerDelegate._tcs">
            <summary>
            The _TCS
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPickerDelegate._viewController">
            <summary>
            The _view controller
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.#ctor(UIKit.UIViewController,UIKit.UIImagePickerControllerSourceType,XLabs.Platform.Services.Media.MediaStorageOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Services.Media.MediaPickerDelegate"/> class.
            </summary>
            <param name="viewController">The view controller.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.FinishedPickingMedia(UIKit.UIImagePickerController,Foundation.NSDictionary)">
            <summary>
            Finisheds the picking media.
            </summary>
            <param name="picker">The picker.</param>
            <param name="info">The information.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.Canceled(UIKit.UIImagePickerController)">
            <summary>
            Canceleds the specified picker.
            </summary>
            <param name="picker">The picker.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.DisplayPopover(System.Boolean)">
            <summary>
            Displays the popover.
            </summary>
            <param name="hideFirst">if set to <c>true</c> [hide first].</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.Dismiss(UIKit.UIImagePickerController,System.Action)">
            <summary>
            Dismisses the specified picker.
            </summary>
            <param name="picker">The picker.</param>
            <param name="onDismiss">The on dismiss.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.DidRotate(Foundation.NSNotification)">
            <summary>
            Dids the rotate.
            </summary>
            <param name="notice">The notice.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.GetShouldRotate(UIKit.UIDeviceOrientation)">
            <summary>
            Gets the should rotate.
            </summary>
            <param name="orientation">The orientation.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.GetShouldRotate6(UIKit.UIDeviceOrientation)">
            <summary>
            Gets the should rotate6.
            </summary>
            <param name="orientation">The orientation.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.GetPictureMediaFile(Foundation.NSDictionary)">
            <summary>
            Gets the picture media file.
            </summary>
            <param name="info">The information.</param>
            <returns>MediaFile.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.GetMovieMediaFile(Foundation.NSDictionary)">
            <summary>
            Gets the movie media file.
            </summary>
            <param name="info">The information.</param>
            <returns>MediaFile.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.GetUniquePath(System.String,System.String,System.String)">
            <summary>
            Gets the unique path.
            </summary>
            <param name="type">The type.</param>
            <param name="path">The path.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.GetOutputPath(System.String,System.String,System.String)">
            <summary>
            Gets the output path.
            </summary>
            <param name="type">The type.</param>
            <param name="path">The path.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.IsValidInterfaceOrientation(UIKit.UIDeviceOrientation)">
            <summary>
            Determines whether [is valid interface orientation] [the specified self].
            </summary>
            <param name="self">The self.</param>
            <returns><c>true</c> if [is valid interface orientation] [the specified self]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.IsSameOrientationKind(UIKit.UIDeviceOrientation,UIKit.UIDeviceOrientation)">
            <summary>
            Determines whether [is same orientation kind] [the specified o1].
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns><c>true</c> if [is same orientation kind] [the specified o1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerDelegate.GetDeviceOrientation(UIKit.UIInterfaceOrientation)">
            <summary>
            Gets the device orientation.
            </summary>
            <param name="self">The self.</param>
            <returns>UIDeviceOrientation.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPickerDelegate.Popover">
            <summary>
            Gets or sets the popover.
            </summary>
            <value>The popover.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPickerDelegate.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPickerDelegate.Task">
            <summary>
            Gets the task.
            </summary>
            <value>The task.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.MediaPickerDelegate.IsCaptured">
            <summary>
            Gets a value indicating whether this instance is captured.
            </summary>
            <value><c>true</c> if this instance is captured; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Platform.Services.Media.MediaPickerPopoverDelegate">
            <summary>
            Class MediaPickerPopoverDelegate.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPickerPopoverDelegate._picker">
            <summary>
            The _picker
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.MediaPickerPopoverDelegate._pickerDelegate">
            <summary>
            The _picker delegate
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerPopoverDelegate.#ctor(XLabs.Platform.Services.Media.MediaPickerDelegate,UIKit.UIImagePickerController)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Services.Media.MediaPickerPopoverDelegate"/> class.
            </summary>
            <param name="pickerDelegate">The picker delegate.</param>
            <param name="picker">The picker.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerPopoverDelegate.ShouldDismiss(UIKit.UIPopoverController)">
            <summary>
            Shoulds the dismiss.
            </summary>
            <param name="popoverController">The popover controller.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.MediaPickerPopoverDelegate.DidDismiss(UIKit.UIPopoverController)">
            <summary>
            Dids the dismiss.
            </summary>
            <param name="popoverController">The popover controller.</param>
        </member>
        <member name="T:XLabs.Platform.Services.Media.Microphone">
            <summary>
            Class Microphone.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.Microphone._audioQueue">
            <summary>
            The _audio queue
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.Microphone._bufferSize">
            <summary>
            The _buffer size
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.Microphone.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Services.Media.Microphone"/> class.
            </summary>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.Microphone.StartRecording(System.Int32)">
            <summary>
            Starts the recording.
            </summary>
            <param name="rate">The rate.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.Microphone.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.Microphone.QueueInputCompleted(System.Object,AudioToolbox.InputCompletedEventArgs)">
            <summary>
            Handles iOS audio buffer queue completed message.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Input completed parameters.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.Microphone.Start(System.Int32)">
            <summary>
            Starts the specified sample rate.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.Microphone.Stop">
            <summary>
            Stops this instance.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="E:XLabs.Platform.Services.Media.Microphone.OnBroadcast">
            <summary>
            Occurs when new audio has been streamed.
            </summary>
        </member>
        <member name="P:XLabs.Platform.Services.Media.Microphone.SampleRate">
            <summary>
            Gets the sample rate.
            </summary>
            <value>The sample rate in hertz.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.Microphone.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
            <value>The channel count.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.Microphone.BitsPerSample">
            <summary>
            Gets bits per sample.
            </summary>
            <value>The bits per sample.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.Microphone.Active">
            <summary>
            Gets a value indicating whether this <see cref="T:XLabs.Platform.Services.Media.Microphone"/> is active.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.Microphone.SupportedSampleRates">
            <summary>
            Gets the average data transfer rate
            </summary>
            <value>The average data transfer rate in bytes per second.</value>
        </member>
        <member name="T:XLabs.Platform.Services.Media.SoundService">
            <summary>
            Class SoundService.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.SoundService.isScrubbing">
            <summary>
            The _is scrubbing
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Media.SoundService.player">
            <summary>
            The _player
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.SoundService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Platform.Services.Media.SoundService"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.SoundService.Play">
            <summary>
            Plays this instance.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.SoundService.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.SoundService.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Media.SoundService.OnFileFinished(XLabs.Platform.Services.Media.SoundFinishedEventArgs)">
            <summary>
            Handles the <see cref="E:FileFinished"/> event.
            </summary>
            <param name="e">The <see cref="T:XLabs.Platform.Services.Media.SoundFinishedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Media.SoundService.SetMediaAsync(System.String)">
            <summary>
            Sets the media asynchronous.
            </summary>
            <param name="filename">The filename.</param>
            <returns>Task&lt;SoundFile&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.SoundService.PlayAsync(System.String,System.String)">
            <summary>
            Plays the asynchronous.
            </summary>
            <param name="filename">The filename.</param>
            <param name="extension">The extension.</param>
            <returns>Task&lt;SoundFile&gt;.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Media.SoundService.GoToAsync(System.Double)">
            <summary>
            Goes to asynchronous.
            </summary>
            <param name="position">The position.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:XLabs.Platform.Services.Media.SoundService.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>The volume.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.SoundService.IsPlaying">
            <summary>
            Gets a value indicating whether this instance is playing.
            </summary>
            <value><c>true</c> if this instance is playing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.SoundService.CurrentTime">
            <summary>
            Gets the current time.
            </summary>
            <value>The current time.</value>
        </member>
        <member name="P:XLabs.Platform.Services.Media.SoundService.CurrentFile">
            <summary>
            Gets the current file.
            </summary>
            <value>The current file.</value>
        </member>
        <member name="E:XLabs.Platform.Services.Media.SoundService.SoundFileFinished">
            <summary>
            Occurs when [sound file finished].
            </summary>
        </member>
        <member name="T:XLabs.Platform.Services.Network">
            <summary>
            Class Network.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Network.InternetConnectionStatus">
            <summary>
            Internets the connection status.
            </summary>
            <returns>NetworkStatus.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Network.HandleReachabilityChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the reachability changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Network.IsReachable(System.String,System.TimeSpan)">
            <summary>
            Determines whether the specified host is reachable.
            </summary>
            <param name="host">The host.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Network.IsReachableByWifi(System.String,System.TimeSpan)">
            <summary>
            Determines whether [is reachable by wifi] [the specified host].
            </summary>
            <param name="host">The host.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="E:XLabs.Platform.Services.Network.reachabilityChanged">
            <summary>
            Occurs when [reachability changed].
            </summary>
        </member>
        <member name="E:XLabs.Platform.Services.Network.ReachabilityChanged">
            <summary>
            Occurs when [reachability changed].
            </summary>
        </member>
        <member name="T:XLabs.Platform.Services.PhoneService">
            <summary>
            Apple Phone service implements <see cref="T:XLabs.Platform.Services.IPhoneService"/>.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.PhoneService.TelNet">
            <summary>
            The tel net
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.PhoneService.DialNumber(System.String)">
            <summary>
            Opens native dialog to dial the specified number.
            </summary>
            <param name="number">Number to dial.</param>
        </member>
        <member name="M:XLabs.Platform.Services.PhoneService.SendSMS(System.String,System.String)">
            <summary>
            Sends the SMS.
            </summary>
            <param name="to">To.</param>
            <param name="body">The body.</param>
        </member>
        <member name="P:XLabs.Platform.Services.PhoneService.CellularProvider">
            <summary>
            Gets the cellular provider.
            </summary>
            <value>The cellular provider name.</value>
        </member>
        <member name="P:XLabs.Platform.Services.PhoneService.IsCellularDataEnabled">
            <summary>
            Gets a value indicating whether this instance has cellular data enabled.
            </summary>
            <value><c>true</c> if this instance is cellular data enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.PhoneService.IsCellularDataRoamingEnabled">
            <summary>
            Gets a value indicating whether this instance has cellular data roaming enabled.
            </summary>
            <value><c>true</c> if this instance is cellular data roaming enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.PhoneService.IsNetworkAvailable">
            <summary>
            Gets a value indicating whether this instance is network available.
            </summary>
            <value><c>true</c> if this instance is network available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XLabs.Platform.Services.PhoneService.ICC">
            <summary>
            Gets the ISO Country Code.
            </summary>
            <value>The ISO Country Code.</value>
        </member>
        <member name="P:XLabs.Platform.Services.PhoneService.MCC">
            <summary>
            Gets the Mobile Country Code.
            </summary>
            <value>The Mobile Country Code.</value>
        </member>
        <member name="P:XLabs.Platform.Services.PhoneService.MNC">
            <summary>
            Gets the Mobile Network Code.
            </summary>
            <value>The Mobile Network Code.</value>
        </member>
        <member name="P:XLabs.Platform.Services.PhoneService.CanSendSMS">
            <summary>
            Gets a value indicating whether this instance can send SMS.
            </summary>
            <value><c>true</c> if this instance can send SMS; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:XLabs.Platform.Services.Reachability">
            <summary>
            The reachability utility class.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Reachability.adHocWiFiNetworkReachability">
            <summary>
            The ad hoc wi fi network reachability
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Reachability.defaultRouteReachability">
            <summary>
            The default route reachability
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.Reachability.remoteHostReachability">
            <summary>
            The remote host reachability
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.Reachability.IsReachableWithoutRequiringConnection(SystemConfiguration.NetworkReachabilityFlags)">
            <summary>
            Checks if network is reachable without requiring connection.
            </summary>
            <param name="flags">The reachability flags.</param>
            <returns>True if reachable, false if connection is required.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Reachability.IsHostReachable(System.String)">
            <summary>
            Determines if host is reachable.
            </summary>
            <param name="host">The host address.</param>
            <returns>True if host is reachable, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Reachability.IsAdHocWiFiNetworkAvailable(SystemConfiguration.NetworkReachabilityFlags@)">
            <summary>
            Determines if AdHoc WiFi network is available.
            </summary>
            <param name="flags">Optional extra network reachability flags.</param>
            <returns>Returns true if it is possible to reach the AdHoc WiFi network, otherwise false.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Reachability.RemoteHostStatus(System.String)">
            <summary>
            The remote host status.
            </summary>
            <param name="hostName">The host name.</param>
            <returns>The <see cref="T:XLabs.Platform.Services.NetworkStatus"/>.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Reachability.InternetConnectionStatus">
            <summary>
            The internet connection status.
            </summary>
            <returns>The <see cref="T:XLabs.Platform.Services.NetworkStatus"/>.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Reachability.LocalWifiConnectionStatus">
            <summary>
            The local WiFi connection status.
            </summary>
            <returns>The <see cref="T:XLabs.Platform.Services.NetworkStatus"/>.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.Reachability.OnChange(SystemConfiguration.NetworkReachabilityFlags)">
            <summary>
            Called when [change].
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:XLabs.Platform.Services.Reachability.IsNetworkAvailable(SystemConfiguration.NetworkReachabilityFlags@)">
            <summary>
            Returns network reachability flags and network availability.
            </summary>
            <param name="flags">The network reachability flags.</param>
            <returns>True if network is available, otherwise false.</returns>
        </member>
        <member name="E:XLabs.Platform.Services.Reachability.ReachabilityChanged">
            <summary>
            The reachability changed event.
            </summary>
            <remarks>Raised every time there is an interesting reachable event,
            we do not even pass the info as to what changed, and
            we lump all three status we probe into one.</remarks>
        </member>
        <member name="T:XLabs.Platform.Services.SecureStorage">
            <summary>
            Implements <see cref="T:XLabs.Platform.Services.ISecureStorage"/> for iOS using <see cref="T:Security.SecKeyChain"/>.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.SecureStorage.Store(System.String,System.Byte[])">
            <summary>
            Stores data.
            </summary>
            <param name="key">Key for the data.</param>
            <param name="dataBytes">Data bytes to store.</param>
        </member>
        <member name="M:XLabs.Platform.Services.SecureStorage.Retrieve(System.String)">
            <summary>
            Retrieves stored data.
            </summary>
            <param name="key">Key for the data.</param>
            <returns>Byte array of stored data.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.SecureStorage.Delete(System.String)">
            <summary>
            Deletes data.
            </summary>
            <param name="key">Key for the data to be deleted.</param>
        </member>
        <member name="M:XLabs.Platform.Services.SecureStorage.Contains(System.String)">
            <summary>
            Checks if the storage contains a key.
            </summary>
            <param name="key">The key to search.</param>
            <returns>True if the storage has the key, otherwise false.</returns>
        </member>
        <member name="T:XLabs.Platform.Services.TextToSpeechService">
            <summary>
            The text to speech service for iOS.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.TextToSpeechService.Speak(System.String,System.String)">
            <summary>
            The speak.
            </summary>
            <param name="text">The text.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:XLabs.Platform.Services.TextToSpeechService.GetInstalledLanguages">
            <summary>
            Get installed languages.
            </summary>
            <returns>The installed language names.</returns>
        </member>
        <member name="T:XLabs.Platform.Services.IO.FileManager">
            <summary>
            Class FileManager.
            </summary>
        </member>
        <member name="F:XLabs.Platform.Services.IO.FileManager.isolatedStorageFile">
            <summary>
            The isolated storage file
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.#ctor">
            <summary>
            Initialized new instance of <see cref="T:XLabs.Platform.Services.IO.FileManager"/> using user store for application.
            </summary>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.#ctor(System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Initialized new instance of <see cref="T:XLabs.Platform.Services.IO.FileManager"/>.
            </summary>
            <param name="isolatedStorageFile">Isolated storage file to use.</param>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.OpenFile(System.String,XLabs.Platform.Services.IO.FileMode,XLabs.Platform.Services.IO.FileAccess)">
            <summary>
            Opens the file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>Stream.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.OpenFile(System.String,XLabs.Platform.Services.IO.FileMode,XLabs.Platform.Services.IO.FileAccess,XLabs.Platform.Services.IO.FileShare)">
            <summary>
            Opens the file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <param name="share">The share.</param>
            <returns>Stream.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.FileExists(System.String)">
            <summary>
            Files the exists.
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time.
            </summary>
            <param name="path">The path.</param>
            <returns>DateTimeOffset.</returns>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.DeleteFile(System.String)">
            <summary>
            Deletes the file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:XLabs.Platform.Services.IO.FileManager.CopyDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Copies a directory to another.
            </summary>
            <param name="source">Source directory.</param>
            <param name="destination">Destination directory. Created when necessary.</param>
            <exception cref="T:System.ArgumentException">Source directory does not exist</exception>
            <exception cref="T:System.ArgumentException">Exception is thrown if source directory doesn't exist.</exception>
        </member>
    </members>
</doc>
