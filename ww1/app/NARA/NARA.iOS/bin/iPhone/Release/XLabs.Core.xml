<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XLabs.Core</name>
    </assembly>
    <members>
        <member name="T:XLabs.Data.ObservableObject">
            <summary>
            Base class enabling INotifyPropertyChanged implementation and methods for setting property values.
            </summary>
        </member>
        <member name="M:XLabs.Data.ObservableObject.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property to raise the PropertyChanged event for.</param>
        </member>
        <member name="M:XLabs.Data.ObservableObject.NotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <param name="propertyExpression">The lambda expression of the property to raise the PropertyChanged event for.</param>
        </member>
        <member name="M:XLabs.Data.ObservableObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            The property changed event invoker.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:XLabs.Data.ObservableObject.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Changes the property if the value is different and raises the PropertyChanged event.
            </summary>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <param name="storage">Reference to current value.</param>
            <param name="value">New value to be set.</param>
            <param name="propertyExpression">The lambda expression of the property to raise the PropertyChanged event for.</param>
            <returns><c>true</c> if new value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Data.ObservableObject.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Changes the property if the value is different and raises the PropertyChanged event.
            </summary>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <param name="storage">Reference to current value.</param>
            <param name="value">New value to be set.</param>
            <param name="propertyName">The name of the property to raise the PropertyChanged event for.</param>
            <returns><c>true</c> if new value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:XLabs.Data.ObservableObject.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets property name from expression.
            </summary>
            <param name="propertyExpression">
            The property expression.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Throws an exception if expression is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Expression should be a member access lambda expression
            </exception>
        </member>
        <member name="E:XLabs.Data.ObservableObject.PropertyChanged">
            <summary>
            Occurs when property is changed.
            </summary>
        </member>
        <member name="T:XLabs.Enums.ImageOrientation">
            <summary>
            Specifies where the image will occur relative to the text on a
            </summary>
        </member>
        <member name="F:XLabs.Enums.ImageOrientation.ImageToLeft">
            <summary>
            The image to left
            </summary>
        </member>
        <member name="F:XLabs.Enums.ImageOrientation.ImageOnTop">
            <summary>
            The image on top
            </summary>
        </member>
        <member name="F:XLabs.Enums.ImageOrientation.ImageToRight">
            <summary>
            The image to right
            </summary>
        </member>
        <member name="F:XLabs.Enums.ImageOrientation.ImageOnBottom">
            <summary>
            The image on bottom
            </summary>
        </member>
        <member name="T:XLabs.Enums.Orientation">
            <summary>
            Enum Orientation
            </summary>
        </member>
        <member name="F:XLabs.Enums.Orientation.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:XLabs.Enums.Orientation.Portrait">
            <summary>
            The portrait
            </summary>
        </member>
        <member name="F:XLabs.Enums.Orientation.Landscape">
            <summary>
            The landscape
            </summary>
        </member>
        <member name="F:XLabs.Enums.Orientation.PortraitUp">
            <summary>
            The portrait up
            </summary>
        </member>
        <member name="F:XLabs.Enums.Orientation.PortraitDown">
            <summary>
            The portrait down
            </summary>
        </member>
        <member name="F:XLabs.Enums.Orientation.LandscapeLeft">
            <summary>
            The landscape left
            </summary>
        </member>
        <member name="F:XLabs.Enums.Orientation.LandscapeRight">
            <summary>
            The landscape right
            </summary>
        </member>
        <member name="T:XLabs.Enums.TextCellDetailLocation">
            <summary>
            Enum TextCellDetailLocation
            </summary>
        </member>
        <member name="F:XLabs.Enums.TextCellDetailLocation.Below">
            <summary>
            Set detail Below
            </summary>
        </member>
        <member name="F:XLabs.Enums.TextCellDetailLocation.Right">
            <summary>
            Set detail Right
            </summary>
        </member>
        <member name="T:XLabs.Exceptions.InvalidNestingException">
            <summary>
            Thrown when an element or attached property is not withing the 
            proper container
            </summary>
        </member>
        <member name="M:XLabs.Exceptions.InvalidNestingException.#ctor">
            <summary>
            Hide any possible default constructor
            Redundant I know, but it costs nothing
            and communicates the design intent to
            other developers.
            </summary>
        </member>
        <member name="M:XLabs.Exceptions.InvalidNestingException.#ctor(System.Type,System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Constructs the exception and passes a meaningful
            message to the base Exception
            </summary>
            <param name="nestedType">The inner type</param>
            <param name="expectedContainer">The container type that was expected</param>
            <param name="history">All parents considered in the search</param>
        </member>
        <member name="P:XLabs.Exceptions.InvalidNestingException.SearchPath">
            <summary>
            All parents considered in the search
            </summary>
        </member>
        <member name="P:XLabs.Exceptions.InvalidNestingException.NestedType">
            <summary>
            The actual type of inner object
            </summary>
        </member>
        <member name="P:XLabs.Exceptions.InvalidNestingException.ExpectedContainer">
            <summary>
            The expected type of the container
            </summary>
        </member>
        <member name="P:XLabs.Exceptions.InvalidNestingException.NestedName">
            <summary>
            The name of the inner object
            </summary>
        </member>
        <member name="P:XLabs.Exceptions.InvalidNestingException.ExpectedContainerName">
            <summary>
            The name of the expected container
            </summary>
        </member>
        <member name="T:XLabs.Exceptions.InvalidVisualObjectException">
            <summary>
            Thrown when datatemplate inflates to an object 
            that is neither a <see cref="!:Xamarin.Forms.View"/> object nor a
            <see cref="!:Xamarin.Forms.ViewCell"/> object
            </summary>
        </member>
        <member name="M:XLabs.Exceptions.InvalidVisualObjectException.#ctor">
            <summary>
            Hide any possible default constructor
            Redundant I know, but it costs nothing
            and communicates the design intent to
            other developers.
            </summary>
        </member>
        <member name="M:XLabs.Exceptions.InvalidVisualObjectException.#ctor(System.Type,System.String)">
            <summary>
            Constructs the exception and passes a meaningful
            message to the base Exception
            </summary>
            <param name="inflatedtype">The actual type the datatemplate inflated to.</param>
            <param name="name">The calling methods name, uses [CallerMemberName]</param>
        </member>
        <member name="P:XLabs.Exceptions.InvalidVisualObjectException.InflatedType">
            <summary>
            The actual type the datatemplate inflated to.
            </summary>
        </member>
        <member name="P:XLabs.Exceptions.InvalidVisualObjectException.MemberName">
            <summary>
            The MemberName the exception occured in.
            </summary>
        </member>
        <member name="T:XLabs.Exceptions.NoDataTemplateMatchException">
            <summary>
            exception thrown when a template cannot
            be found for a supplied type
            </summary>
        </member>
        <member name="M:XLabs.Exceptions.NoDataTemplateMatchException.#ctor">
            <summary>
            Hide any possible default constructor
            Redundant I know, but it costs nothing
            and communicates the design intent to
            other developers.
            </summary>
        </member>
        <member name="M:XLabs.Exceptions.NoDataTemplateMatchException.#ctor(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Constructs the exception and passses a meaningful
            message to the base Exception
            </summary>
            <param name="tomatch">The type that a match was attempted for</param>
            <param name="candidates">All types examined during the match process</param>
        </member>
        <member name="P:XLabs.Exceptions.NoDataTemplateMatchException.AttemptedMatch">
            <summary>
            The type that a match was attempted for
            </summary>
        </member>
        <member name="P:XLabs.Exceptions.NoDataTemplateMatchException.TypesExamined">
            <summary>
            A list of all types that were examined
            </summary>
        </member>
        <member name="P:XLabs.Exceptions.NoDataTemplateMatchException.TypeNamesExamined">
            <summary>
            A List of the names of all examined types (Simple name only)
            </summary>
        </member>
        <member name="T:XLabs.Exceptions.PropertyNotFoundException">
            <summary>
            Thrown when a property could not be found on a Type
            </summary>
            Element created at 07/11/2014,3:35 AM by Charles
        </member>
        <member name="M:XLabs.Exceptions.PropertyNotFoundException.#ctor">
            <summary>
            Hide any possible default constructor
            Redundant I know, but it costs nothing
            and communicates the design intent to
            other developers.
            </summary>
        </member>
        <member name="M:XLabs.Exceptions.PropertyNotFoundException.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Constructs the exception and passes a meaningful
            message to the base Exception
            </summary>
            <param name="etype">The Type that was inspected.</param>
            <param name="property">The property Name.</param>
            <param name="available">The available properties found on the Type.</param>
            <param name="caller">The method that attempted to find the property.</param>
            Element created at 07/11/2014,3:36 AM by Charles
        </member>
        <member name="P:XLabs.Exceptions.PropertyNotFoundException.InspectedType">
            <summary>Gets the type of the inspected object.</summary>
            <value>The type of the inspected.</value>
            Element created at 07/11/2014,3:37 AM by Charles
        </member>
        <member name="P:XLabs.Exceptions.PropertyNotFoundException.InspectedTypeName">
            <summary>Gets the type name of the inspected object.</summary>
            <value>The name of the inspected type.</value>
            Element created at 07/11/2014,3:37 AM by Charles
        </member>
        <member name="P:XLabs.Exceptions.PropertyNotFoundException.PropertyName">
            <summary>Gets the name of the property.</summary>
            <value>The name of the property.</value>
            Element created at 07/11/2014,3:37 AM by Charles
        </member>
        <member name="P:XLabs.Exceptions.PropertyNotFoundException.AvailableProperties">
            <summary>Gets the available properties.</summary>
            <value>The available properties.</value>
            Element created at 07/11/2014,3:37 AM by Charles
        </member>
        <member name="T:XLabs.DateTimeExtensions">
            <summary>
            Class DateTimeExtensions.
            </summary>
        </member>
        <member name="F:XLabs.DateTimeExtensions.UnixTime">
            <summary>
            The unix time
            </summary>
        </member>
        <member name="M:XLabs.DateTimeExtensions.SinceUnixTime(System.DateTime)">
            <summary>
            Sinces the unix time.
            </summary>
            <param name="time">The time.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:XLabs.DateTimeExtensions.SinceUnixTime(System.DateTimeOffset)">
            <summary>
            Sinces the unix time.
            </summary>
            <param name="time">The time.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:XLabs.DateTimeExtensions.SinceUnixTime(System.Nullable{System.DateTime})">
            <summary>
            Sinces the unix time.
            </summary>
            <param name="time">The time.</param>
            <returns>System.Nullable&lt;TimeSpan&gt;.</returns>
        </member>
        <member name="M:XLabs.DateTimeExtensions.SinceUnixTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            Sinces the unix time.
            </summary>
            <param name="time">The time.</param>
            <returns>System.Nullable&lt;TimeSpan&gt;.</returns>
        </member>
        <member name="M:XLabs.DateTimeExtensions.FullMilliseconds(System.Nullable{System.TimeSpan})">
            <summary>
            Fulls the milliseconds.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>System.Nullable&lt;System.Int64&gt;.</returns>
        </member>
        <member name="T:XLabs.IEnumerableExtensions">
            <summary>
            Class IEnumerableExtensions.
            </summary>
        </member>
        <member name="M:XLabs.IEnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>
            </summary>
            <param name="enumerable">Enumerable object.</param>
            <typeparam name="T">Type of item.</typeparam>
            <returns>IReadOnlyCollection{T}</returns>
        </member>
        <member name="M:XLabs.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Fors the each.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="T:XLabs.NumericExtensions">
            <summary>
            Class NumericExtensions.
            </summary>
        </member>
        <member name="M:XLabs.NumericExtensions.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified self.
            </summary>
            <param name="self">The self.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:XLabs.NumericExtensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified self.
            </summary>
            <param name="self">The self.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:XLabs.BigEndianReader">
            <summary>
            Class BigEndianReader.
            </summary>
        </member>
        <member name="M:XLabs.BigEndianReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.BigEndianReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadDecimal">
            <summary>
            Reads the decimal.
            </summary>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadDouble">
            <summary>
            Reads the double.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadSingle">
            <summary>
            Reads the single.
            </summary>
            <returns>System.Single.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadInt64">
            <summary>
            Reads the int64.
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadUInt64">
            <summary>
            Reads the u int64.
            </summary>
            <returns>System.UInt64.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadInt32">
            <summary>
            Reads the int32.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadUInt32">
            <summary>
            Reads the u int32.
            </summary>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadInt16">
            <summary>
            Reads the int16.
            </summary>
            <returns>System.Int16.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadUInt16">
            <summary>
            Reads the u int16.
            </summary>
            <returns>System.UInt16.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.ReadChar">
            <summary>
            Reads the character.
            </summary>
            <returns>System.Char.</returns>
        </member>
        <member name="M:XLabs.BigEndianReader.GetReversedBytes(System.Int32)">
            <summary>
            Gets the reversed bytes.
            </summary>
            <param name="count">The count.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:XLabs.EventArgs`1">
            <summary>
            Generic event argument class
            </summary>
            <typeparam name="T">Type of the argument</typeparam>
        </member>
        <member name="M:XLabs.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.EventArgs"/> class.
            </summary>
            <param name="value">Value of the argument</param>
        </member>
        <member name="P:XLabs.EventArgs`1.Value">
            <summary>
            Gets the value of the event argument
            </summary>
        </member>
        <member name="T:XLabs.EventExtensions">
            <summary>
            Event extensions.
            </summary>
        </member>
        <member name="M:XLabs.EventExtensions.Invoke``1(System.EventHandler{XLabs.EventArgs{``0}},System.Object,``0)">
            <summary>
            Raise the specified event.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="sender">Sender object.</param>
            <param name="value">Argument value.</param>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:XLabs.EventExtensions.TryInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Tries the invoke.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:XLabs.Helpers.GroupedListSource`2">
            <summary>
            Observable collection 
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XLabs.Helpers.GroupedListSource`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Helpers.GroupedListSource`2"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Helpers.GroupedListSource`2.#ctor(System.Collections.Generic.IEnumerable{XLabs.Helpers.ListGroup{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Helpers.GroupedListSource`2"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="items">The collection from which the elements are copied.</param>
        </member>
        <member name="T:XLabs.Icons">
            <summary>
            Font Awesome icons
            Get all the icons at http://fortawesome.github.io/Font-Awesome/cheatsheet/
            </summary>
        </member>
        <member name="P:XLabs.Icons.Anchor">
            <summary>
            Gets the anchor.
            </summary>
            <value>The anchor.</value>
        </member>
        <member name="P:XLabs.Icons.Check">
            <summary>
            Gets the check.
            </summary>
            <value>The check.</value>
        </member>
        <member name="P:XLabs.Icons.Car">
            <summary>
            Gets the car.
            </summary>
            <value>The car.</value>
        </member>
        <member name="P:XLabs.Icons.Cloud">
            <summary>
            Gets the cloud.
            </summary>
            <value>The cloud.</value>
        </member>
        <member name="P:XLabs.Icons.Download">
            <summary>
            Gets the download.
            </summary>
            <value>The download.</value>
        </member>
        <member name="P:XLabs.Icons.Envelope">
            <summary>
            Gets the envelope.
            </summary>
            <value>The envelope.</value>
        </member>
        <member name="P:XLabs.Icons.ExternalLink">
            <summary>
            Gets the external link.
            </summary>
            <value>The external link.</value>
        </member>
        <member name="P:XLabs.Icons.SignOut">
            <summary>
            Gets the sign out.
            </summary>
            <value>The sign out.</value>
        </member>
        <member name="P:XLabs.Icons.Send">
            <summary>
            Gets the send.
            </summary>
            <value>The send.</value>
        </member>
        <member name="P:XLabs.Icons.TrashCan">
            <summary>
            Gets the trash can.
            </summary>
            <value>The trash can.</value>
        </member>
        <member name="P:XLabs.Icons.Undo">
            <summary>
            Gets the undo.
            </summary>
            <value>The undo.</value>
        </member>
        <member name="P:XLabs.Icons.User">
            <summary>
            Gets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:XLabs.Icons.Warning">
            <summary>
            Gets the warning.
            </summary>
            <value>The warning.</value>
        </member>
        <member name="P:XLabs.Icons.Pencil">
            <summary>
            Gets the pencil.
            </summary>
            <value>The pencil.</value>
        </member>
        <member name="P:XLabs.Icons.Lock">
            <summary>
            Gets the lock.
            </summary>
            <value>The lock.</value>
        </member>
        <member name="P:XLabs.Icons.Unlock">
            <summary>
            Gets the unlock.
            </summary>
            <value>The unlock.</value>
        </member>
        <member name="P:XLabs.Icons.Save">
            <summary>
            Gets the save.
            </summary>
            <value>The save.</value>
        </member>
        <member name="P:XLabs.Icons.Twitter">
            <summary>
            Gets the twitter.
            </summary>
            <value>The twitter.</value>
        </member>
        <member name="P:XLabs.Icons.FacebookSquare">
            <summary>
            Gets the facebook square.
            </summary>
            <value>The facebook square.</value>
        </member>
        <member name="P:XLabs.Icons.Facebook">
            <summary>
            Gets the facebook.
            </summary>
            <value>The facebook.</value>
        </member>
        <member name="P:XLabs.Icons.Github">
            <summary>
            Gets the github.
            </summary>
            <value>The github.</value>
        </member>
        <member name="P:XLabs.Icons.Google">
            <summary>
            Gets the google.
            </summary>
            <value>The google.</value>
        </member>
        <member name="P:XLabs.Icons.GooglePlus">
            <summary>
            Gets the google plus.
            </summary>
            <value>The google plus.</value>
        </member>
        <member name="P:XLabs.Icons.Gears">
            <summary>
            Gets the gears.
            </summary>
            <value>The gears.</value>
        </member>
        <member name="P:XLabs.Icons.Ticket">
            <summary>
            Gets the ticket.
            </summary>
            <value>The ticket.</value>
        </member>
        <member name="P:XLabs.Icons.Windows">
            <summary>
            Gets the windows.
            </summary>
            <value>The windows.</value>
        </member>
        <member name="P:XLabs.Icons.Trello">
            <summary>
            Gets the trello.
            </summary>
            <value>The trello.</value>
        </member>
        <member name="T:XLabs.Helpers.ListGroup`2">
            <summary>
            Observable collection grouped by a key.
            </summary>
            <typeparam name="TKey">Key value type.</typeparam>
            <typeparam name="T">Group value type.</typeparam>
        </member>
        <member name="M:XLabs.Helpers.ListGroup`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Helpers.ListGroup`2"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Helpers.ListGroup`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Helpers.ListGroup`2"/> class.
            </summary>
            <param name="items">The collection from which the elements are copied.</param>
        </member>
        <member name="M:XLabs.Helpers.ListGroup`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Helpers.ListGroup`2"/> class.
            </summary>
            <param name="key">Key value.</param>
            <param name="items">The collection from which the elements are copied.</param>
        </member>
        <member name="P:XLabs.Helpers.ListGroup`2.Key">
            <summary>
            Gets or sets the key for the group.
            </summary>
        </member>
        <member name="T:XLabs.TaskUtils">
            <summary>
            Class TaskUtils.
            </summary>
        </member>
        <member name="M:XLabs.TaskUtils.TaskFromResult``1(``0)">
            <summary>
            Tasks from result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="T:XLabs.Vector3">
            <summary>
            Class Vector3.
            </summary>
        </member>
        <member name="M:XLabs.Vector3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Vector3"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.Vector3"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="P:XLabs.Vector3.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:XLabs.Vector3.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:XLabs.Vector3.Z">
            <summary>
            Gets or sets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="T:XLabs.RelayCommand">
            <summary>
            Class RelayCommand.
            </summary>
        </member>
        <member name="F:XLabs.RelayCommand.execute">
            <summary>
            The _execute
            </summary>
        </member>
        <member name="F:XLabs.RelayCommand.canExecute">
            <summary>
            The _can execute
            </summary>
        </member>
        <member name="M:XLabs.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.RelayCommand"/> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
            <exception cref="T:System.ArgumentNullException">execute</exception>
        </member>
        <member name="M:XLabs.RelayCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the RelayCommand class that
            can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:XLabs.RelayCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the can execute changed.
            </summary>
        </member>
        <member name="M:XLabs.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:XLabs.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:XLabs.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="T:XLabs.RelayCommand`1">
            <summary>
            Generic RelayCommand class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XLabs.RelayCommand`1.execute">
            <summary>
            The execute
            </summary>
        </member>
        <member name="F:XLabs.RelayCommand`1.canExecute">
            <summary>
            The can execute
            </summary>
        </member>
        <member name="M:XLabs.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.RelayCommand`1"/> class.
            </summary>
            <param name="execute">The execute action.</param>
            <exception cref="T:System.ArgumentNullException">execute</exception>
        </member>
        <member name="M:XLabs.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:XLabs.RelayCommand`1"/> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute predicate.</param>
            <exception cref="T:System.ArgumentNullException">execute</exception>
        </member>
        <member name="M:XLabs.RelayCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raise <see cref="E:XLabs.RelayCommand`1.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:XLabs.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XLabs.RelayCommand`1.Execute(System.Object)">
            <summary>
            Executes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="E:XLabs.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="T:XLabs.Reporting.DebugReport">
            <summary>
            Writes reports using Debug.WriteLine
            </summary>
        </member>
        <member name="T:XLabs.Reporting.IReport">
            <summary>
            Interface for reporting events.
            </summary>
        </member>
        <member name="M:XLabs.Reporting.IReport.Exception(System.Exception)">
            <summary>
            Report an exception.
            </summary>
            <param name="exception">Exception that happened.</param>
        </member>
        <member name="M:XLabs.Reporting.DebugReport.Exception(System.Exception)">
            <summary>
            Report an exception.
            </summary>
            <param name="exception">Exception that happened.</param>
        </member>
        <member name="T:XLabs.Reporting.Report">
            <summary>
            Static Report class.
            </summary>
        </member>
        <member name="F:XLabs.Reporting.Report.Reporters">
            <summary>
            The reporters
            </summary>
        </member>
        <member name="M:XLabs.Reporting.Report.#cctor">
            <summary>
            Initializes static members of the <see cref="T:XLabs.Reporting.Report"/> class.
            </summary>
        </member>
        <member name="M:XLabs.Reporting.Report.Add(XLabs.Reporting.IReport)">
            <summary>
            Adds the specified report.
            </summary>
            <param name="report">The report.</param>
        </member>
        <member name="M:XLabs.Reporting.Report.Remove(XLabs.Reporting.IReport)">
            <summary>
            Removes the specified report.
            </summary>
            <param name="report">The report.</param>
        </member>
        <member name="M:XLabs.Reporting.Report.Exception(System.Exception)">
            <summary>
            Exceptions the specified exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:XLabs.Utilities.TtfFileInfo">
            <summary>
            TTF File Information
            </summary>
        </member>
        <member name="M:XLabs.Utilities.TtfFileInfo.FromStream(System.IO.Stream)">
            <summary>
            Creates <see cref="T:XLabs.Utilities.TtfFileInfo"/> from <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to create the structure. Stream will be disposed after use.</param>
            <returns><see cref="T:XLabs.Utilities.TtfFileInfo"/> if successful, otherwise null.</returns>
        </member>
        <member name="P:XLabs.Utilities.TtfFileInfo.FontName">
            <summary>
            Gets the Font Name.
            </summary>
        </member>
        <member name="P:XLabs.Utilities.TtfFileInfo.Version">
            <summary>
            Gets the file version.
            </summary>
        </member>
        <member name="P:XLabs.Utilities.TtfFileInfo.TableCount">
            <summary>
            Gets the count of tables in the file.
            </summary>
        </member>
    </members>
</doc>
